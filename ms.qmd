---
docx: 
reference-doc: "./bib/tmpl.docx"
csl: "./bib/proceedings-of-the-royal-society-b.csl"
bibliography: "./bib/refs.bib"
execute:
  echo: false
  error: false
  cache: false
  warning: false
crossref:  
  fig-title: Figure    # (default is "Figure")
  title-delim: —     # (default is ":")
  fig-prefix: Fig.   # (default is "Figure")
  tbl-prefix: Tab.   # (default is "Table")
editor_options: 
  chunk_output_type: console
---



```{r}
#| label: setup
pacman::p_load(tidyverse, flextable, emmeans, DHARMa, brms, here, ggplot2, lme4, zoo, lmerTest, broom, tidybayes, ggh4x, cowplot, fitdistrplus, MASS, goftest, forcats, nortest, fitdistrplus, ggh4x, PupillometryR, png, grid, remotes, ggthemes, bayestestR, HDInterval, DiagrammeR, magick)
```

```{r, cleandata}
#| label: cleandata
# Obtain the main df using "./R/1_data_process.R"
source(here("R", "data_process.R"))
```

```{r, sampleSize}
#| label: sampleSize
# List with the sample sizes from the main database.
source(here("R", "func.R"))
#
hormone <- c("CORT", "Control")
temperature <- c("Cold", "Hot")
#
n_list <- list()
#
for(k in 1:length(hormone)){
  for(l in 1:length(temperature)){
    list_name <- paste0(hormone[k], "_", temperature[l])
    n_list[[list_name]] <- sample(df = clean_df, corti = hormone[k], therm = temperature[l])
  }
}
#
```

```{r, countclutches}
#| label: countclutches
# Count the number of clutches per species
#
clutches <- clean_df %>% 
  distinct(clutch) %>% 
  nrow()
```

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```


## Introduction

Cognition encompasses how animals acquire, process, and store information, enabling perception, learning, memory, and decision-making [@shettleworth]. It is essential for survival and reproduction, allowing individuals to adapt to their environment effectively [@dukas_evolutionary_2004]. However, cognitive abilities can vary considerably between individuals, with differences arising from genetic factors, environmental conditions, or a combination of both [@sakata_neural_2000; @dukas_evolutionary_2004]. The prenatal environment, in particular, plays a critical role in shaping brain development and cognition across a wide range of species [@sakata_neural_2000; @zhu_prenatal_2004; @crino_corticosterone_2014-learn; @amiel_effects_2017]. For instance, plenty of studies have investigated how prenatal conditions can influence learning abilities and memory across different taxa [@zhu_prenatal_2004; @crino_corticosterone_2014-learn; @bebus_associative_2016; @abayarathna_effects_2020]. However, the impact of early-life environments on other cognitive domains has been less studied [but see @burger_antipredator_1998; @vila_pouca_quantity_2019]. A fundamental cognitive skill is acquiring information from the environment [@shettleworth]. Perception of different stimuli is essential for locating food, avoiding predators, or interacting with conspecifics [@burger_antipredator_1998; @desfilis2003stimulus; @recio2023conspecific]. Variations in the ability to detect or recognize some relevant stimuli can have significant consequences for an individual’s fitness. For example, individuals better at detecting prey might be more competitive in foraging contexts, which will affect the energy they can obtain and allocate for other processes like growth or reproduction. Therefore, understanding how prenatal conditions affect the ability to detect prey can be essential to understanding the broader consequences of early-life environments on fitness. Yet, little is known about how prenatal conditions influence prey-related cognition [but see @burger_effects_1990].  

The prenatal environment influences cognitive abilities because the brain is particularly sensitive to environmental inputs during the early stages of development [@zhu_prenatal_2004]. Early-life conditions can shape cognition by altering gene expression [@zhou2020effects], neurotransmitter production [@amani2021perinatal], or brain structure [@amiel_effects_2017]. One key mechanism linking cognition and brain function is mitochondrial physiology and their effects on energy production and oxidative stress [@siegel1994basic; @du_dynamic_2009; @picard_mitochondria_2014; @picard_energetic_2018]. Given the high energetic demands of cognitive processes [@mcnay_decreases_2000; @mann_coupling_2021; @alexandrov_neuronal_2022], cognitive performance is expected to depend on efficient mitochondrial respiration. Additionally, high cognitive abilities are typically associated with increased neuron density and functionality [@lefebvre_taxonomic_2011; @amiel_effects_2017], both of which can be impaired by excessive ROS production and oxidative stress byproduct of mitochondrial function [@finkel_oxidants_2000; @zhu_prenatal_2004; @du_dynamic_2009; @gong_chronic_2011; @hoffmann_mitochondrion_2018]. For instance, @hara_presynaptic_2014 found that performance in visuospatial working-memory tasks correlated negatively with the number of round-shaped mitochondria — associated with higher oxidative stress — per presynaptic bouton. These findings emphasize the role of mitochondrial action in shaping cognitive abilities. However, how the early environment influences mitochondrial physiology and how that translates into cognitive consequences remains largely unknown in non-mammalian animals [see @chaudhari2022early for a review]. In particular, whether and how these interactions affect perception abilities, such as prey detection, is still largely unexplored.  

Maternal conditions can play a crucial role in shaping mitochondrial function in the offspring. Because mitochondria are maternally inherited, a mother’s physiological state can directly impact mitochondria through trans-generational effects [@zhu_prenatal_2004; @song2009prenatal; @picard_mitochondria_2014]. One key factor in this process is the action of glucocorticoids (GCs), hormones that regulate energy metabolism and stress responses [@sapolsky_how_2000]. Under stressful situations, animals instigate adaptive physiological and behavioural adjustments that involve increases in GCs. These GCs can be transmitted to the offspring and influence their mitochondrial functioning [@picard_mitochondria_2014]. For instance, prenatal stress or elevated yolk GCs increase oxidative stress in Sprague-Dawley rats (_Rattus norvegicus_) and domestic chickens (_Gallus domesticus_) [@zhu_prenatal_2004; @song2009prenatal; @haussmann_embryonic_2012].  

In ectotherms, thermal conditions can be a significant source of maternal stress. When animals experience temperatures outside their optimal thermal range, they activate the physiological stress response, leading to increased GC production that can be passed to the offspring [see @Crino_2023]. However, the temperature can also directly affect offspring development beyond maternal effects, particularly during early life [@noble_developmental_2018; @crino2024eggs]. The prenatal thermal environment can play a critical role in shaping mitochondrial function, altering energy metabolism or oxidative stress [@stier2022experimental; @crino2024eggs]. For example, Red-eared slider turtle (_Trachemys scripta elegans_) hatchlings incubated at 26.5 ºC exhibited greater oxidative damage compared to those incubated at temperatures 0.7 to 1.2 ºC warmer [@treidel2016temperature]. Therefore, the combined effects of prenatal GCs and temperature can have profound consequences for mitochondrial function, with significant repercussions for brain development and cognition. Yet, we have little evidence of how the interactive effects of prenatal GCs and temperature can impact cognitive abilities through mitochondrial physiology.  

Here, we investigated the combined effects of prenatal temperature and corticosterone (CORT) - the main GC in reptiles - on mitochondrial functioning and prey detection in the delicate skink (_Lampropholis delicata_). We manipulated prenatal CORT levels and incubation temperature, then assessed hatchlings’ ability to detect chemical and visual prey stimuli through behavioral tests. After these tests, we examined mitochondrial function in different brain regions associated with processing chemical and visual cues. We hypothesized that prenatal CORT and temperature would interact to influence mitochondrial physiology and prey detection. GCs can alter mitochondrial function by increasing oxidative stress [reviewed in @costantini2011meta] and reducing mitochondrial efficiency [@gong_chronic_2011;  but see @crino2024eggs]. Similarly, high temperatures can decrease mitochondrial efficiency but also oxidative damage [@treidel2016temperature; @crino2024eggs]. Therefore, we predicted that prenatal CORT exposure would impair mitochondrial function by increasing ROS levels and reducing energy availability, disrupting cognitive performance. However, higher incubation temperatures would increase performance only when the cost of higher oxidative stress overcome the benefits of increased mitochondrial efficiency. In addition, we predicted complex interactions between CORT and incubation temperature, as both factors negatively impact mitochondrial efficiency but have opposite effects on oxidative stress. Finally, since early environmental effects on mitochondrial function can vary across brain regions [@coomber_independent_1997], we expected regional differences in mitochondrial physiology accross treatments, which in turn would lead to stimulus-dependent variations in detection abilities. Our study provides insights into how prenatal conditions shape mitochondrial physiology and cognitive abilities, emphasizing the importance of early-life environments in cognitive development.  


## Methods

#### Husbandry

#### Animal husbandry  
*Breeding colony* -- The lizards tested came from a breeding colony established in the laboratory since 2019. This colony consisted of 270 adults of *L. delicata* housed in plastic containers (41.5 L x 30.5 W x 21 H cm) with six lizards (two males and four females) per enclosure. Enclosures were provided with non-stick matting, shelter, and several small water dishes. Water was given daily, and the lizards were fed approx. 40 mid-size crickets (_Acheta domestica_) per enclosure three days a week. Crickets were dusted with calcium weekly and multivitamin and calcium biweekly. Room temperatures were set to 22-24 ºC, but to ensure a temperature gradient, we provided the enclosures with a heat chord and a heat lamp following a 12 h light:12 h dark cycle keeping warm side of enclosures is usually at 34 ºC.

*Eggs collection and incubation* -- Between mid-October 2022 and the end of February 2023, we provide females with a place to lay the eggs by placing a small box (12.5 L x 8.3 W x 5 H cm) with moist vermiculite in one side of the communal enclosures. These boxes were checked three days a week for eggs. After collection, we measured length and width of eggs with a digital caliper to the nearest 0.1 mm and weight them with a digital scale ± 0.001g error. Then eggs were treated with CORT or vehicle (see CORT and temperature manipulation below) and were placed in individual cups (80 mL) with moist vermiculite (12 parts water to 4 parts vermiculite). The cups were covered with cling wrap to retain moisture and left in two incubators at two different temperatures (see CORT and temperature manipulation below) until hatching.

*Hatchlings* -- Incubators were checked three times a week for hatchlings. We measured and weighted lizards immediately after hatching. We employed a rule to obtain Snout-vent length (SVL) and Tail length (TL) to the nearest mm, and a digital scale (± 0.001g error) to measure mass. We then placed hatchlings in individual enclosures (18.7L x 13.2W x 6.3H cm) and provided them with nonstick matting and a small water dish until the beginning of the experiment. During this period, lizards were given water dayly and received 3-6 small *A. domestica* crickets three times a week. All care otherwise follows similar protocols to adults (see above).  

Two weeks before we started the tests (see below), lizards were moved to the experimental arena (see @fig-Methods) for acclimatization. The arenas were individual medium size (41 L x 29.7 W x 22 H cm) plastic containers with a shelter (9 L x 6 W x 1.5 H cm) on one of the extremes and a water dish on the middle of the arena. These arenas were placed in two rooms in six racks, each with its own CCTV system (device model DVR-HP210475) that allowed us to record lizards' behaviour during the experiment (see details below). The number of lizards per treatment in each rack was counterbalanced to control for any effect of the room or the position of the lizard in the rack. During acclimatization, lizards were fed with only one cricket per day dusted with calcium and multivitamin, and water was supplied *ad libitum*. We provided a temperature gradient by means of a heat cord and heat lamps in a 12 h light: 12 h dark cycle. The rooms temperature was set to between 22-24 Celsius. After the tests, animals were euthanized and mitochondrial physiology was analyzed in various brain regions (see Brain mitochondrial activity protocol below).  

#### CORT and Temperature manipulation
To test the interactive effects of CORT and incubation temperature, we manipulated CORT concentrations in eggs and incubated them under one of two temperature regimes (Cold - 23 ± 3 ºC or Hot - 28 ± 3 ºC) in a 2x2 factorial design (@fig-Methods A). Eggs were topically supplied with: a) 5 µL of crystalline corticosterone (Sigma, Cat. No. C2505) dissolved in 100% ethanol at a final 10 pg CORT/mL concentration (CORT treatment), or b) an equal volume of 100% Ethanol (Control treatment). We selected doses based on previous studies where CORT treatment increased mean yolk CORT levels ~3.7x higher than control eggs [@crino2024eggs]. Then, eggs were incubated in one of the two previously mentioned temperature regimes. These temperatures are within the natural limits in _L. delicata_ [@cheetham2011embryonic].  

The number of eggs per clutch assigned to each hormone and temperature treatment was counterbalanced in a partial split-clutch design. At least one egg per clutch was assigned to each treatment, while in cluthces bigger than four the remaining eggs were randomly assigned to one of the treatments. When we found less than four eggs in a clutch, we assigned each egg randomly to one of the treatments.  

#### Prey discrimination tests
The experiment involved presenting lizards with various stimuli from different prey types, then recording and analyzing their behaviour towards each stimulus. We followed the methods employed by @desfilis2003stimulus and @recio_prey_2021, with some modifications relevant to the objectives of this study. Lizards were presented chemical or visual stimuli from a familiar and unfamiliar prey, with a total of four trials per individual (@fig-Methods C).  

We used crickets (_A. domestica_) as the familiar prey and mealworm larvae (_Tenebrio molitor_) as the unfamiliar prey. None of the species are included in the natural diet of the lizards [@lunney1989diets], but both are reported to be eaten in lab conditions [@michelangeli2016sa]. We expected to see differences between known and unknown prey because previous experience may influence stimuli perception through habituation or sensitisation [@burger_effects_1990; @burger_effects_1991; @desfilis2003stimulus], and we included familiarity with the prey as a factor in our analyses (see below).  

Each stimulus was presented inside a transparent plastic vessel containing a white, two-chambered device (see @fig-Methods B) made of polylactic acid. In chemical trials, the prey was placed in the closed chamber at the back of the device, making it invisible to the lizard, while in visual trials, the prey was placed in the front chamber. Holes in both the device and the front sides of the transparent vessel (see @fig-Methods B, C) allowed chemical cues to be released; however, these holes were sealed with silicone in the visual trials. To increase the availability of chemical cues, we glued a piece of filter paper (left for at least 8 hours in one of the prey's enclosures: _A. domestica_ or _T. molitor_) to the device during chemical trials. In visual trials, the filter paper was placed in an empty box for the same duration under identical conditions. In both chemical and visual trials, the prey remained inside the vessel to control for potential acoustic cues. The order of stimulus presentation was counterbalanced across treatments.  

Each trial began by placing the experimental device in the side of the arena opposite to the shelter (see arena in @fig-Methods A), and then removing the shelter. The water cup had already been removed. We recorded the lizard's behaviour for approximately one hour. We assessed lizards' ability to detect each stimulus ('Detection latency') by recording the time from when the lizard resumed normal activity (i.e., walking for at least 5 consecutive seconds; T~0~ in @fig-Methods D) until the first interaction with the stimulus (T~D~ in @fig-Methods D). We consider an interatcion when the lizard touched the front of the vessel or the filter paper with its snout for more than five consecutive seconds.   

To control for potential differences in hunger levels, all lizards fasted for two days before the experiment, a period considered harmless for this species [@young2022physiological]. Besides, after each trial, the lizards were given a cricket to assess their motivation to forage. The cricket was left in the enclosure for one hour, and we recorded whether the lizard ate it (recorded as 1) or not (recorded as 0). In `r sum(is.na(clean_df$motivation))` videos, the camera stopped recording before the end of the motivation test (T~f~ in @fig-Methods D), so motivation was recorded as NA. We used their performance in the motivation test as a covariate in the analyses (see below).   

All trials were conducted between 1100 and 1300 h, when the lizards were most active. To control for potential effects of neophobia, we simulated test conditions for two days prior to the experiment by removing the shelter and water cup, and exposing the subjects to the vessel without a stimulus. This simulation lasted for 1 hour at the same time of day as the tests, but no behavior was recorded.  

```{r, fig-Methods}
#| label: fig-Methods
#| fig-cap: "Scheme of our experimental design. In panel A, we show the different stages of our experiment and the main manipulations. In panel B, we show the experimental device used to present the stimuli in the behavioural tests. In panel C, we show the experimental setup for the prey discrimination tests. In panel D, we show the relevant times from our behavioural tests."
#
knitr::include_graphics("./Others/Methods.png")
```


#### Brain mitochondrial activity
Two months after the completion of the tests, we euthanized lizards using an injectable anaesthetic followed by decapitation. We injected peritoneally 10 mg/kg of a 10 mg/mL alfaxan solution and then, after several minutes, we evaluated the lizard's response by turning it upside down, and by testing the pinching relfex in one of the front limbs. Lizards were decapitated with surgical scissors once they were not responsive. This protocol was approved by the Animal Ethics Committee of the Australian National University (Protocol number: A2022_33). After decapitation, the head was opened and the brain was dissected. We extracted manually two main regions of the brain, the olfactory bulbs and the optic tecta, as they are associated with lizards' chemical and visual perception, respectively [@wyneken2007reptilian]. Both regions were transferred immediately to 1.5mL centrifuge tubes containing 100µL of 1X PBS.  

Both regions were transferred immediately to 1.5 mL centrifuge tubes containing 100 µL of cold 1X PBS and kept on ice until further processing. For the olfactory bulbs, the tissue was mechanically homogenized by placing the tissue in the well of a 100 µm mesh filter (pluriStrainer) affixed atop a 1.5 mL centrifuge tube, then mashed with the rubber end of an insulin syringe stopper. The resulting olfactory bulb homogenate was then rinsed through the filter with 1 mL of cold 1X PBS to prepare a homogenate suspension. Optic tecta were mechanically homogenized the same way as olfactory bulbs, but were first enzymatically digested by incubating the tissue in 100µL of 125 U/mL collagenase (type II) for 30-min at 32°C. We enzymatically digested optic tecta but not olfactory bulbs because in a pilot study, enzymatic digestion prior to mechanical digestion improved the yield of viable cells in optic tecta homogenate, but did not noticeably affect the yield of viable cells in olfactory bulbs homogenate (unpublished data). Following homogenization, we centrifuged each sample at 1000 RCF for 10 minutes to pellet cells, then removed the supernatant (hereafter, this process referred to as ‘washing’) and resuspended the cells in 500 µL 1x PBS. This step was to performed to remove cellular debris from homogenates. From each 500 µL suspension of homogenate collected on a given trial day, we first added 100 µL of homogenate to a pooled sample of each tissue type to use for single-color controls, and the remaining 40 0µL of homogenate was split among two 200 µL aliquots. One aliquot was used fresh to measure mitochondrial function (mitochondrial density, membrane potential, ROS), one aliquot was cryopreserved for later measurements of oxidative damage (8-OHdG, lipid peroxidation), and the third aliquot was cryopreserved for a different experiment. Aliquots were cryopreserved in 1 mL solution of 1% Neutral-Buffered Formalin (as a fixative agent), 1X Tris-EDTA (chelates metals that can damage DNA during freezing) and 10% DMSO (a cryoprotectant), then stored at -20 °C until oxidative damage assays. 

From fresh homogenate suspensions, we loaded the wells of a 96-well flat-bottom plate (Nunclon) with 50 µL of homogenate in duplicates (2 wells per homogenate). To each replicate well, we added 5 µL of a fluorescent probe mix containing equal parts 5 µM MitoTracker Deep Red FM, 2.5 µM MitoTracker Orange CMTMRos, and 50 µM MitoSOX Red. We used these fluorescent probes as indicators of mitochondrial density, mitochondrial membrane potential, and superoxide (ROS) production, respectively. We then added 5 µL of #µM Hoechst 33342 Nuclear Viability Dye to each sample, which we used to distinguish live, viable, intact cells from cellular debris. We then loaded 6 wells with 50 µL of homogenate taken from each pooled homogenate suspension (12 wells total), which were to be negative and single-color controls. One well was left unstained as a negative control, one was stained with all the probes to be a positive control, and the remaining four wells were treated with 5 µL of one of 5 µM MitoTracker Deep Red FM, 2.5 µM MitoTracker Orange CMTMRos, 50 µM MitoSOX Red, or #µM Hoechst 33342 Nuclear Viability Dye. Any remaining pooled homogenate was fixed and frozen as previously described. We incubated the loaded plate at 32 °C for 30 minutes to stain and then diluted the samples with 50 µL cold 1x PBS to halt the staining process. Upon the completion of staining, samples were immediately transferred to flow cytometry facilities for data collection and were sampled within 2 hours. Samples prepared this way remained viable for flow cytometry for approximately 5 hours post-staining at room temperature (~19°C) before cells began rapidly degrading (unpublished data).

Assays of oxidative damage from cryopreserved samples were performed within 6 months of the initial processing and analysis of fresh samples. On the day of oxidative damage assays, we rapidly thawed frozen samples by briefly (1-2 minutes) submerging them in near-boiling water. We washed each thawed sample twice, the first time resuspending the pelleted cells in 1 mL warm 1X Tris-EDTA, and the second time in 200 µL warm 1X PBS. Pooled homogenate was divided into 100 µL aliquots to serve as single-color controls. Thawed, resuspended samples were first stained with 20 µL (10 µL for controls) of #µM Hoechst 33342 Nuclear Viability Dye and 20 µL of 100 µM BODIPY 665/676 Lipid Peroxidation Sensor and incubated at 32 °C for 20 minutes. Following staining, we washed cells to prevent further binding of unbound fluorescent probes, then resuspended the pellet in 200 µL warm 1X PBS containing 5 mM (6.14 mg/mL) digitonin. We incubated the samples at 32 °C for 20 minutes to permeabilize the cell membrane, after which we washed the homogenate and resuspended the pelleted cells in 200 µL 1X PBS. We added 20 µL of 70 µM 8-OHdG Polyclonal Antibody to each sample, after which we left the homogenate overnight (~12 hours) for the antibody to bind to 8-OHdG, a marker of oxidative damage on DNA. The following day we counterstained the cells with 20 µL of #µM (100 µg/mL) H+G Goat Anti-Rabbit Conjugate Antibody with Alexa-Fluor 488 at 32 °C for 20 minutes. After the cells had been tagged with 8-OHdG antibodies and counterstained, we washed the cells once more and resuspended the pellet in 400 µL of 1X PBS. Unstained and single-color controls were treated identically to samples, but stained with only up to one of BODIPY 665/676, Hoechst 33342, 8-OHdG antibody, or Alexa-Fluor 488 conjugate. Additionally, one control was stained with both 8-OHdG antibody and the Alexa-Fluor 488 conjugated. We then loaded a 96-well plate with 100 µL of each single-color control and 100 µL in duplicate of each sample. We performed all flow cytometry assays on samples within 48-hours of thawing the samples.

All flow cytometry assays were performed using a flow cytometer with 5-lasers (blue, red, yellow-green, violet, and ultraviolet), 20 detectors, and a high-throughput plate reader (Becton Dickson LSRFortessa X-20) using the default wavelength filters on detectors. Immediately prior to all assays, we performed a quality-control check and laser alignment using the CS&T function of BD FACSDiva (v. 8.0.1) and BD CS&T fluorescent beads (Lot No. 30664) diluted at 2 drops to 150 µL 1X PBS. During data collection, data for single-color controls was filtered using a liberal threshold of 200 on the FSC (roughly, cell size) detector, while data from samples was filtered using a threshold of 200 on the BUV-496 (Hoechst 33342) detector. These thresholds were chosen to filter small debris or inviable or non-intact cells from our observations. The detectors and voltage settings used in data acquisition for each assay type (mitochondrial function, oxidative damage) were determined during pilot trials prior to assays and were not changed during assays to allow for comparison among different plates and samples throughout the experiment. Voltages were chosen to center the distribution of observations in each channel at 103 fluorescent intensity and reduce observations of off-scale (<101 or >105) events. For the mitochondrial function assay, we recorded data from the following channels (in brackets: voltage; parameter): FSC (44; forward scatter), SSC (180; side scatter), Alexa-Fluor 488 (544; autofluorescence), BUV-496 (450; Hoechst 33342), APC (647; MitoTracker Deep Red FM), PE (522; MitoTracker Orange CMTMRos), and PerCP-Cy5-5 (592; MitoSOX Red) channels. For the oxidative damage assay, we recorded data from the following channels: FSC (425; forward scatter), SSC (300; side scatter), Alexa-Fluor 488 (275; 8-OHdG Antibody + Alexa-Fluor 488 conjugate), BUV-496 (525; Hoechst 33342), and PE-Cy5 (850; BODIPY 665/676). Fluorescent intensity data was collected via the BD FACSDiva (v. 8.0.1) software, with no compensation applied during data collection, and all on a linear scale (detectable range of 0-252166). We recorded data for both the area and height of the fluorescent signal, but only used the area in downstream analyses, with height being recorded for the sake of quality control. Data was exported from BD FACSDiva as individual *.fcs (“flow cytometry standard”) files for each sample, then imported into FlowJo (v. 10.1) for processing.

In FlowJo v. 10.1 we first applied transformed all fluorescent data to a logarithmic base 10 scale, then applied a basic gating process across all channels by filtering to observations within the detectable range (101-105) to remove any off-scale events. We then used a backgating process wherein we aimed to identify the approximate FSC (cell size) and SSC (cell complexity) range of viable cells that were positive for all stains. We primarily used the BUV-496 channel (Hoechst 33342) in the backgating process to identify intact, nucleated cells (BUV-496 > 103). For the mitochondrial function assay, we aimed to identify populations of viable cells containing mitochondria (APC > 103) and actively respiring (PE and PerCP-Cy5-5 > 103). For the oxidative damage assay, we aimed to identify populations of cells exhibiting both DNA damage (Alexa-Fluor 488 > 103) and lipid peroxidation (PerCP > 103). When backgating was done, we filtered the data to the FSC by SSC range that captured the ideal population. We used the backgated population for compensation of fluorescent spillover between different fluorescent probes. To account for fluorescent spillover, we used a traditional compensation matrix using the compensation function of FlowJo v.10.1. We identified the “positive” population for each channel as the brightest ~2.5% of the distribution of observations in the respective single-color control for that channel and used unstained controls as a universal negative. We visually inspected the compensation matrix and its effects on population distributions for under- and over-compensation, whereupon we changed the compensation matrix manually until data was properly compensated. We applied the compensation matrix to all samples for downstream processing. Following compensation, we again gated the data following the same process as for backgating but using the compensated parameters for each channel. Following gating, we exported the geometric mean (mean fluorescent intensity; MFI) and robust confidence-values for each channel for each sample. For analysis, we exported summary statistics of only the area of the fluorescent signal. Although we exported robust confidence values for checking repeatability between replicate samples, we used the mean and standard deviation of geometric means among replicates for each individual as our main response variables in analyses.  

#### Statistical analyses

We performed the analyses for each brain region/stimulus and each variable (mitochondrial density, mitochondrial potential, ROS, DNA damage, lipid peroxidation, and detection latency) separately. We fitted first a set of preliminary models where we included the main effects of hormone (CORT versus Control), temperature (Cold versus Hot), and their interaction. We also added to these models the sex and age of the lizards at the time where the trials started (for detection latency), or when the lizards were euthanized (for all mitochondrial-related variables). For detection latency we also included as fixed factors lizards' previous experience with the prey (familiar versus unknown), their performance on the motivation test [if they ate the cricket (1), or not (0)], and the interaction between CORT and motivation, as CORT can impact apetite [@conde2018stress]. We also included for all the models the clutch identity as a random factor. Since detection latency was fitted for both types of prey in a repeated measures design, these models also included individual identity as a random factor. Structure and results of these models are provided on Tables S1-S12 in Supplementary Material. After the preliminary models, we fitted a set of definitive models where those factors that were not significant in the preliminary models were excluded except the main interest factors: CORT, temperature and their interaction. Random factors remain the same in the definitive models. All the response variables were mean centered and standardized by dividing by two times the standard deviation. Before standardization, mitochondrial density, DNA damage, lipid peroxidation, and detection latency were log-transformed. 

All the models were run using the brm function from the _brms_ package [@burkner2017brms] in R (version 4.4.0) [@R]. We ran four parallel MCMC chains of 8000 iterations for each model, with a warmup period of 2000 iterations. The error structure was modelled assuming a gaussian distribution for all variables. To test for differences between treatments, we made contrasts between treatments using the posterior distributions of the parameters. We employed pMCMC values to tests if the contrasts were different from zero [@endo2019introduction]. We considered an effect statistically significant if pMCMC < 0.05.  

To further explore the relationships between mitochondrial physiology and detection latency, we followed Structural Equations Modelling approach. We fitted a multivariate model using the _brms_ package [@burkner2017brms] in R (version 4.4.0) [@R] for each brain region/stimulus separately. We included in the model all the variables of interest and their interactions structured following a specific hypothesis (see @fig-sem_results_OB or @fig-sem_results_OT). We also included for each variable those factors that were significant in our definitive models but we excluded the non-significant ones. Because experience with prey did not affect lizards' behaviour (see Tables S11, S12), and to reduce the complexity of the models, we averaged lizards detection latency across both types of prey and excluded lizard identity from the random factors. Clutch identity was included as a random factor for all variables. We ran four parallel MCMC chains of 8000 iterations for each model, with a warmup period of 2000 iterations. The error structure was modelled assuming a gaussian distribution. Rescor was set as true to control for potential correlations between the residuals of the variables.

We obtained direct, indirect, and total effects of one variable on another from the posterior parameters. We estimated direct effects using posterior estimates from the SEM models. Specifically, direct effects correspond to the posterior estimates of a predictor's effect on the response variable. For example, the direct effect of mitochondrial density on detection latency is given by the posterior estimate of detection latency regressed on mitochondrial density. Indirect effects were computed by multiplying the direct effect of the predictor on the mediator by the direct effect of the mediator on the response variable. For instance, the indirect effect of ROS production on detection latency was obtained by summing the products of (i) the direct effect of ROS on DNA damage multiplied by the direct effect of DNA damage on detection latency, and (ii) the direct effect of ROS on lipid peroxidation multiplied by the direct effect of lipid peroxidation on detection latency. Total effects were the sum of direct and indirect effects. Refer to @fig-sem_results_OB or @fig-sem_results_OT for a visual representation of the SEM models.  

## Results

Final sample size for mitochondrial assays was 80 lizards, 20 per treatment. These lizards were subjected each to 4 tests getting a total of 320 behavioural observations, out of which `r sum(is.na(clean_df$t_D))` were recorded as NA. These animals came from a total of `r clutches` clutches.  

```{r, models_mitochondrial}
#| label: models_mitochondrial
#
# Run models mitochondrial physiology (each region separately)
#
var_m <- c("mean_mitodensity", "mean_potential", "mean_ros", "mean_dnadamage", "mean_peroxidation")
regions <- c("OB", "OT")
for (p in var_m){
  for (h in regions){
    if (h == "OB"){
      df <- clean_df %>% filter(region == "OB")
      l <- "OB"
      if (p %in% c("mean_mitodensity", "mean_potential", "mean_ros")){
        formula <- paste0(p, "~ cort*temp + (1|clutch)")
      } else if (p == "mean_dnadamage"){
        formula <- paste0(p, "~ cort*temp + age_euthanasia + sex + (1|clutch)")
      } else {
        formula <- paste0(p, "~ cort*temp + age_euthanasia + (1|clutch)")
      }
    } else {
      df <- clean_df %>% filter(region == "OT")
      l <- "OT"
      if (p %in% c("mean_mitodensity", "mean_potential", "mean_ros")){
        formula <- paste0(p, "~ cort*temp + (1|clutch)")
      } else if (p == "mean_dnadamage"){
        formula <- paste0(p, "~ cort*temp + sex + (1|clutch)")
      } else {
        formula <- paste0(p, "~ cort*temp + age_euthanasia + (1|clutch)")
      }
    }

    pmodel_name <- paste0("m_def_", p, "_", h)
    assign(pmodel_name, fit_m(df = df,
                              cat = "def",
                              var = p,
                              formula = formula,
                              fam = gaussian(),
                              label = l,
                              refit = FALSE),
          envir = .GlobalEnv)  # Assign to the global environment
  }
} 
```

```{r, models_behaviour}
#| label: models_behaviour
# Fitting the model and extraction of posteriors for Detection Latency (log-normal).
source(here("R", "func.R"))
#
#
## Run model behaviour for both stimuli separately
#
beh_df <- clean_df
stimuli <- c("Chemical", "Visual")
for (s in stimuli){
  df_b <- beh_df %>% filter(stimulus == s)
  formula_t_D <- t_D ~ cort*temp + (1|clutch) + (1|lizard_id)

  pmodel_name <- paste0("m_def_t_D_", s)
  assign(pmodel_name, fit_m(df = df_b,
                             cat = "def",
                             var = "t_D",
                             formula = formula_t_D,
                             fam = gaussian(),
                             label = s,
                             refit = FALSE),
          envir = .GlobalEnv)  # Assign to the global environment
}
```

```{r, organise_posteriors}
#| label: organise_posteriors
#
# Organising the posteriors of the previous models to fit the tables below
#
source(here("R", "func.R"))
#
# Databases for each region/stimulus
post_OB <- data.frame()
post_OT <- data.frame()
# Names posteriors:
region <- c("OB", "OT")
names_OB <- c("m_def_mean_mitodensity_OB", "m_def_mean_potential_OB", "m_def_mean_ros_OB", "m_def_mean_dnadamage_OB", "m_def_mean_peroxidation_OB", "m_def_t_D_Chemical")
names_OT <- c("m_def_mean_mitodensity_OT", "m_def_mean_potential_OT", "m_def_mean_ros_OT", "m_def_mean_dnadamage_OT", "m_def_mean_peroxidation_OT", "m_def_t_D_Visual")
#
# Organising the results
for (r in region) {
  model_select <- get(paste0("names_", r))   
  for (pos in model_select) {
    model <- get(pos)      # Get the model from the global environment
    post_result <- tidy_post(model)        # Apply tidy_post to each model
    # Add a new column to identify the region and model
    post_result$Region <- r
    post_result$Model <- pos
    # Append to the appropriate data frame
    if (r == "OB") {
      post_OB <- bind_rows(post_OB, post_result)
    } else {
      post_OT <- bind_rows(post_OT, post_result)
    }
  }
}
```

```{r, values_posteriors}
#| label: values_posteriors
#
# Extracting the posteriors for the models and the values of interest. Here, I am creating dfs for each of the variables with the values for all the prenatal conditions to make contrasts easier to write.
#
source(here("R", "func.R"))
#
# A) Olfactory bulbs/Chemical stimulus
#
MD_OB <- post_values(m_def_mean_mitodensity_OB, "none")
MP_OB <- post_values(m_def_mean_potential_OB, "none")
ROS_OB <- post_values(m_def_mean_ros_OB, "none")
DNA_OB <- post_values(m_def_mean_dnadamage_OB, "none")
LP_OB <- post_values(m_def_mean_peroxidation_OB, "none")
DET_OB <- post_values(m_def_t_D_Chemical, "none")
#
# B) Optic tecta/Visual stimulus
MD_OT <- post_values(m_def_mean_mitodensity_OT, "none")
MP_OT <- post_values(m_def_mean_potential_OT, "none")
ROS_OT <- post_values(m_def_mean_ros_OT, "none")
DNA_OT <- post_values(m_def_mean_dnadamage_OT, "sex")
LP_OT <- post_values(m_def_mean_peroxidation_OT, "none")
DET_OT <- post_values(m_def_t_D_Visual, "none")
```

#### Mitochondrial physiology

Results for mitochondrial analyses are presented on Tables S13-S15 (Supplementary Material) in means of R^2 scores and the estimates of each predictor in the difinitive models. Preliminary models can be found in Tables S1-S12 (Supplementary Material). @fig-results_energy and @fig-results_oxidative summarize the effects of early conditions on mitochondrial fuction. 

_Mitochondrial density_: neither CORT (Contrast β~Control~ - β~CORT~ for Olfactory bulbs: mean = `r format_dec(mean(c(MD_OB$Control_Cold, MD_OB$Control_Hot)) - mean(c(MD_OB$CORT_Cold, MD_OB$CORT_Hot)), 3)`, pMCMC `r format_p(pmcmc(c(MD_OB$Control_Cold, MD_OB$Control_Hot) - c(MD_OB$CORT_Cold, MD_OB$CORT_Hot)), 3, equal = TRUE)`; β~Control~ - β~CORT~ for Optic tecta: mean = `r format_dec(mean(c(MD_OT$Control_Cold, MD_OT$Control_Hot)) - mean(c(MD_OT$CORT_Cold, MD_OT$CORT_Hot)), 3)`, pMCMC `r format_p(pmcmc(c(MD_OT$Control_Cold, MD_OT$Control_Hot) - c(MD_OT$CORT_Cold, MD_OT$CORT_Hot)), 3, equal = TRUE)`), temperature (β~Hot~ - β~Cold~ for Olfactory bulbs: mean = `r format_dec(mean(c(MD_OB$CORT_Hot, MD_OB$Control_Hot)) - mean(c(MD_OB$CORT_Cold, MD_OB$Control_Cold)), 3)`, pMCMC `r format_p(pmcmc(c(MD_OB$CORT_Hot, MD_OB$Control_Hot) - c(MD_OB$CORT_Cold, MD_OB$Control_Cold)), 3, equal = TRUE)`; β~Hot~ - β~Cold~ for Optic tecta: mean = `r format_dec(mean(c(MD_OT$CORT_Hot, MD_OT$Control_Hot)) - mean(c(MD_OT$CORT_Cold, MD_OT$Control_Cold)), 3)`, pMCMC `r format_p(pmcmc(c(MD_OT$CORT_Hot, MD_OT$Control_Hot) - c(MD_OT$CORT_Cold, MD_OT$Control_Cold)), 3, equal = TRUE)`), or the interaction ([(β~Control-Hot~ - β~CORT-Hot~) - (β~Control-Cold~ - β~CORT-Cold~)] for Olfactory bulbs: mean = `r format_dec((mean(MD_OB$Control_Hot) - mean(MD_OB$CORT_Hot)) - (mean(MD_OB$Control_Cold) - mean(MD_OB$CORT_Cold)), 3)`, pMCMC `r format_p(pmcmc((MD_OB$Control_Hot - MD_OB$CORT_Hot) - (MD_OB$Control_Cold - MD_OB$CORT_Cold)), 3, equal = TRUE)`; [(β~Control-Hot~ - β~CORT-Hot~) - (β~Control-Cold~ - β~CORT-Cold~)] for Optic tecta: mean = `r format_dec((mean(MD_OT$Control_Hot) - mean(MD_OT$CORT_Hot)) - (mean(MD_OT$Control_Cold) - mean(MD_OT$CORT_Cold)), 3)`, pMCMC `r format_p(pmcmc((MD_OT$Control_Hot - MD_OT$CORT_Hot) - (MD_OT$Control_Cold - MD_OT$CORT_Cold)), 3, equal = TRUE)`) had significant effects on mitochondrial density in neither of the two brain regions extracted (@fig-results_energy A, C).  

_Mitochondrial potential_: the effects of CORT (β~Control~ - β~CORT~ for Olfactory bulbs: mean = `r format_dec(mean(c(MP_OB$Control_Cold, MP_OB$Control_Hot)) - mean(c(MP_OB$CORT_Cold, MP_OB$CORT_Hot)), 3)`, pMCMC `r format_p(pmcmc(c(MP_OB$Control_Cold, MP_OB$Control_Hot) - c(MP_OB$CORT_Cold, MP_OB$CORT_Hot)), 3, equal = TRUE)`; β~Control~ - β~CORT~ for Optic tecta: mean = `r format_dec(mean(c(MP_OT$Control_Cold, MP_OT$Control_Hot)) - mean(c(MP_OT$CORT_Cold, MP_OT$CORT_Hot)), 3)`, pMCMC `r format_p(pmcmc(c(MP_OT$Control_Cold, MP_OT$Control_Hot) - c(MP_OT$CORT_Cold, MP_OT$CORT_Hot)), 3, equal = TRUE)`), temperature (β~Hot~ - β~Cold~ for Olfactory bulbs: mean = `r format_dec(mean(c(MP_OB$CORT_Hot, MP_OB$Control_Hot)) - mean(c(MP_OB$CORT_Cold, MP_OB$Control_Cold)), 3)`, pMCMC `r format_p(pmcmc(c(MP_OB$CORT_Hot, MP_OB$Control_Hot) - c(MP_OB$CORT_Cold, MP_OB$Control_Cold)), 3, equal = TRUE)`; β~Hot~ - β~Cold~ for Optic tecta: mean = `r format_dec(mean(c(MP_OT$CORT_Hot, MP_OT$Control_Hot)) - mean(c(MP_OT$CORT_Cold, MP_OT$Control_Cold)), 3)`, pMCMC `r format_p(pmcmc(c(MP_OT$CORT_Hot, MP_OT$Control_Hot) - c(MP_OT$CORT_Cold, MP_OT$Control_Cold)), 3, equal = TRUE)`), or the interaction ([(β~Control-Hot~ - β~CORT-Hot~) - (β~Control-Cold~ - β~CORT-Cold~)] for Olfactory bulbs: mean = `r format_dec((mean(MP_OB$Control_Hot) - mean(MP_OB$CORT_Hot)) - (mean(MP_OB$Control_Cold) - mean(MP_OB$CORT_Cold)), 3)`, pMCMC `r format_p(pmcmc((MP_OB$Control_Hot - MP_OB$CORT_Hot) - (MP_OB$Control_Cold - MP_OB$CORT_Cold)), 3, equal = TRUE)`; [(β~Control-Hot~ - β~CORT-Hot~) - (β~Control-Cold~ - β~CORT-Cold~)] for Optic tecta: mean = `r format_dec((mean(MP_OT$Control_Hot) - mean(MP_OT$CORT_Hot)) - (mean(MP_OT$Control_Cold) - mean(MP_OT$CORT_Cold)), 3)`, pMCMC `r format_p(pmcmc((MP_OT$Control_Hot - MP_OT$CORT_Hot) - (MP_OT$Control_Cold - MP_OT$CORT_Cold)), 3, equal = TRUE)`) were not significant on membrane potential neither for the Olfactory bulbs or the Optic tecta (@fig-results_energy B, D).

```{r, fig-results_energy}
#| label: fig-results_energy
#| fig-cap: "Estimates of mitochondrial density (A, C) and mitochondrial potential (B, D) in the olfactory bulbs (A, B) and optic tecta (C, D) of L. delicata hatchlings as a function of the different prenatal conditions. Black dots indicate the posterior mean, and the bars represent the SD of the estimates. The y-axis represents the posterior estimates of the variable of interest, and the x-axis represents the different prenatal conditions. Lines with asterisks represent significant differences between groups based on pMCMC values (pMCMC < 0.05), no lines indicate no significant differences."
#| fig-name: "fig-results_energy"
#
source(here("R", "func.R"))
#
# A) Plotting the results for OB/Chemical stimulus using the df from before
plot_density_OB <- plotting(MD_OB, "Mit density")
plot_potential_OB <- plotting(MP_OB, "Mit potential")
#
legend_plot <- get_legend(plot_density_OB + theme(legend.position = "right"))
#
fig_OB_energy <- plot_grid(plot_density_OB, NULL, plot_potential_OB, NULL,
                    nrow = 1, rel_widths = c(0.8, 0.1, 0.8, 0.8))
#
# B) Plotting the results for OT/Visual stimulus
plot_density_OT <- plotting(MD_OT, "Mit density")
plot_potential_OT <- plotting(MP_OT, "Mit potential")
#
fig_OT_energy <- plot_grid(plot_density_OT, NULL, plot_potential_OT, NULL,
                    nrow = 1, rel_widths = c(0.8, 0.1, 0.8, 0.8))
#
# C) Merging plots
#
# Create the figure grid with extra space for images
fig_results_energy <- plot_grid(
  fig_OB_energy, fig_OT_energy,
  nrow = 2)
# Final composition: Merge everything, adding images and legend
final_plot_energy <- ggdraw(fig_results_energy) +
  # Insert OB image in the top right
  draw_image("./Others/OB.png", x = 0.7, y = 0.8, width = 0.12, height = 0.2) +
  # Insert OT image in the middle right
  draw_image("./Others/OT.png", x = 0.7, y = 0.3, width = 0.11, height = 0.18) +
  # Insert legend at the bottom-right
  draw_grob(legend_plot, x = 0.85, y = 0.15, width = 0.0001, height = 0.0001) +
  # Insert title for each plot
  annotate("text", x = 0.032, y = 0.965, label = "A", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("text", x = 0.39, y = 0.965, label = "B", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("text", x = 0.032, y = 0.47, label = "C", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("text", x = 0.39, y = 0.47, label = "D", hjust = 1, vjust = 1, size = 7, fontface = "bold")
#
# Print final plot
ggsave(here("./output/figures/text/results_energy.png"), plot = final_plot_energy, width = 21, height = 14, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/text/results_energy.png")
```


_ROS_: we did not find significant effects of CORT (β~Control~ - β~CORT~ for Olfactory bulbs: mean = `r format_dec(mean(c(ROS_OB$Control_Cold, ROS_OB$Control_Hot)) - mean(c(ROS_OB$CORT_Cold, ROS_OB$CORT_Hot)), 3)`, pMCMC `r format_p(pmcmc(c(ROS_OB$Control_Cold, ROS_OB$Control_Hot) - c(ROS_OB$CORT_Cold, ROS_OB$CORT_Hot)), 3, equal = TRUE)`; β~Control~ - β~CORT~ for Optic tecta: mean = `r format_dec(mean(c(ROS_OT$Control_Cold, ROS_OT$Control_Hot)) - mean(c(ROS_OT$CORT_Cold, ROS_OT$CORT_Hot)), 3)`, pMCMC `r format_p(pmcmc(c(ROS_OT$Control_Cold, ROS_OT$Control_Hot) - c(ROS_OT$CORT_Cold, ROS_OT$CORT_Hot)), 3, equal = TRUE)`), temperature (β~Hot~ - β~Cold~ for Olfactory bulbs: mean = `r format_dec(mean(c(ROS_OB$CORT_Hot, ROS_OB$Control_Hot)) - mean(c(ROS_OB$CORT_Cold, ROS_OB$Control_Cold)), 3)`, pMCMC `r format_p(pmcmc(c(ROS_OB$CORT_Hot, ROS_OB$Control_Hot) - c(ROS_OB$CORT_Cold, ROS_OB$Control_Cold)), 3, equal = TRUE)`; β~Hot~ - β~Cold~ for Optic tecta: mean = `r format_dec(mean(c(ROS_OT$CORT_Hot, ROS_OT$Control_Hot)) - mean(c(ROS_OT$CORT_Cold, ROS_OT$Control_Cold)), 3)`, pMCMC `r format_p(pmcmc(c(ROS_OT$CORT_Hot, ROS_OT$Control_Hot) - c(ROS_OT$CORT_Cold, ROS_OT$Control_Cold)), 3, equal = TRUE)`), or the interaction ([(β~Control-Hot~ - β~CORT-Hot~) - (β~Control-Cold~ - β~CORT-Cold~)] for Olfactory bulbs: mean = `r format_dec((mean(ROS_OB$Control_Hot) - mean(ROS_OB$CORT_Hot)) - (mean(ROS_OB$Control_Cold) - mean(ROS_OB$CORT_Cold)), 3)`, pMCMC `r format_p(pmcmc((ROS_OB$Control_Hot - ROS_OB$CORT_Hot) - (ROS_OB$Control_Cold - ROS_OB$CORT_Cold)), 3, equal = TRUE)`; [(β~Control-Hot~ - β~CORT-Hot~) - (β~Control-Cold~ - β~CORT-Cold~)] for Optic tecta: mean = `r format_dec((mean(ROS_OT$Control_Hot) - mean(ROS_OT$CORT_Hot)) - (mean(ROS_OT$Control_Cold) - mean(ROS_OT$CORT_Cold)), 3)`, pMCMC `r format_p(pmcmc((ROS_OT$Control_Hot - ROS_OT$CORT_Hot) - (ROS_OT$Control_Cold - ROS_OT$CORT_Cold)), 3, equal = TRUE)`) on ROS levels in Olfactory bulbs nor Optic tecta (@fig-results_oxidative A, D).

_DNA damage_: there were not significant effects of CORT (β~Control~ - β~CORT~ for Olfactory bulbs: mean = `r format_dec(mean(c(DNA_OB$Control_Cold, DNA_OB$Control_Hot)) - mean(c(DNA_OB$CORT_Cold, DNA_OB$CORT_Hot)), 3)`, pMCMC `r format_p(pmcmc(c(DNA_OB$Control_Cold, DNA_OB$Control_Hot) - c(DNA_OB$CORT_Cold, DNA_OB$CORT_Hot)), 3, equal = TRUE)`; β~Control~ - β~CORT~ for Optic tecta: mean = `r format_dec(mean(c(DNA_OT$Control_Cold, DNA_OT$Control_Hot)) - mean(c(DNA_OT$CORT_Cold, DNA_OT$CORT_Hot)), 3)`, pMCMC `r format_p(pmcmc(c(DNA_OT$Control_Cold, DNA_OT$Control_Hot) - c(DNA_OT$CORT_Cold, DNA_OT$CORT_Hot)), 3, equal = TRUE)`) or temperature (β~Hot~ - β~Cold~ for Olfactory bulbs: mean = `r format_dec(mean(c(DNA_OB$CORT_Hot, DNA_OB$Control_Hot)) - mean(c(DNA_OB$CORT_Cold, DNA_OB$Control_Cold)), 3)`, pMCMC `r format_p(pmcmc(c(DNA_OB$CORT_Hot, DNA_OB$Control_Hot) - c(DNA_OB$CORT_Cold, DNA_OB$Control_Cold)), 3, equal = TRUE)`; β~Hot~ - β~Cold~ for Optic tecta: mean = `r format_dec(mean(c(DNA_OT$CORT_Hot, DNA_OT$Control_Hot)) - mean(c(DNA_OT$CORT_Cold, DNA_OT$Control_Cold)), 3)`, pMCMC `r format_p(pmcmc(c(DNA_OT$CORT_Hot, DNA_OT$Control_Hot) - c(DNA_OT$CORT_Cold, DNA_OT$Control_Cold)), 3, equal = TRUE)`) in none of the regions. The CORT-temperature interaction was not significant for the Olfactory bulbs ([(β~Control-Hot~ - β~CORT-Hot~) - (β~Control-Cold~ - β~CORT-Cold~)]: mean = `r format_dec((mean(DNA_OB$Control_Hot) - mean(DNA_OB$CORT_Hot)) - (mean(DNA_OB$Control_Cold) - mean(DNA_OB$CORT_Cold)), 3)`, pMCMC `r format_p(pmcmc((DNA_OB$Control_Hot - DNA_OB$CORT_Hot) - (DNA_OB$Control_Cold - DNA_OB$CORT_Cold)), 3, equal = TRUE)`). However, there was a significant interaction between CORT and temperature in the Optic tecta ([(β~Control-Hot~ - β~CORT-Hot~) - (β~Control-Cold~ - β~CORT-Cold~)]: mean = `r format_dec((mean(DNA_OT$Control_Hot) - mean(DNA_OT$CORT_Hot)) - (mean(DNA_OT$Control_Cold) - mean(DNA_OT$CORT_Cold)), 3)`, pMCMC `r format_p(pmcmc((DNA_OT$Control_Hot - DNA_OT$CORT_Hot) - (DNA_OT$Control_Cold - DNA_OT$CORT_Cold)), 3, equal = TRUE)`), where CORT had no effect on hot-incubated lizards (β~Control-Hot~ - β~CORT-Hot~: mean = `r format_dec(mean(DNA_OT$Control_Hot) - mean(DNA_OT$CORT_Hot),3)`, pMCMC `r format_p(pmcmc(DNA_OT$Control_Hot - DNA_OT$CORT_Hot), 3, equal = TRUE)`) and decreased total DNA damage in cold-incubated animals (β~Control-Cold~ - β~CORT-Cold~: mean = `r format_dec(mean(DNA_OT$Control_Cold) - mean(DNA_OT$CORT_Cold),3)`, pMCMC `r format_p(pmcmc(DNA_OT$Control_Cold - DNA_OT$CORT_Cold), 3, equal = TRUE)`) (see @fig-results_oxidative C, E). Additionally, we found a significant effect of sex on DNA damage in the Optic tecta, and an effect of age on DNA damage in the Olfactory bulbs (Tables S13-S15 Supplementary Material).  

_Lipid peroxidation_: we did not see significant effects of CORT (β~Control~ - β~CORT~ for Olfactory bulbs: mean = `r format_dec(mean(c(LP_OB$Control_Cold, LP_OB$Control_Hot)) - mean(c(LP_OB$CORT_Cold, LP_OB$CORT_Hot)), 3)`, pMCMC `r format_p(pmcmc(c(LP_OB$Control_Cold, LP_OB$Control_Hot) - c(LP_OB$CORT_Cold, LP_OB$CORT_Hot)), 3, equal = TRUE)`; β~Control~ - β~CORT~ for Optic tecta: mean = `r format_dec(mean(c(LP_OT$Control_Cold, LP_OT$Control_Hot)) - mean(c(LP_OT$CORT_Cold, LP_OT$CORT_Hot)), 3)`, pMCMC `r format_p(pmcmc(c(LP_OT$Control_Cold, LP_OT$Control_Hot) - c(LP_OT$CORT_Cold, LP_OT$CORT_Hot)), 3, equal = TRUE)`) ot temperature (β~Hot~ - β~Cold~ for Olfactory bulbs: mean = `r format_dec(mean(c(LP_OB$CORT_Hot, LP_OB$Control_Hot)) - mean(c(LP_OB$CORT_Cold, LP_OB$Control_Cold)), 3)`, pMCMC `r format_p(pmcmc(c(LP_OB$CORT_Hot, LP_OB$Control_Hot) - c(LP_OB$CORT_Cold, LP_OB$Control_Cold)), 3, equal = TRUE)`; β~Hot~ - β~Cold~ for Optic tecta: mean = `r format_dec(mean(c(LP_OT$CORT_Hot, LP_OT$Control_Hot)) - mean(c(LP_OT$CORT_Cold, LP_OT$Control_Cold)), 3)`, pMCMC `r format_p(pmcmc(c(LP_OT$CORT_Hot, LP_OT$Control_Hot) - c(LP_OT$CORT_Cold, LP_OT$Control_Cold)), 3, equal = TRUE)`) on lipid peroxidation in either the Olfactory bulbs nor the Optic tecta. However, the interaction between CORT and temperature was significant in the Optic tecta ([(β~Control-Hot~ - β~CORT-Hot~) - (β~Control-Cold~ - β~CORT-Cold~)]: mean = `r format_dec((mean(LP_OT$Control_Hot) - mean(LP_OT$CORT_Hot)) - (mean(LP_OT$Control_Cold) - mean(LP_OT$CORT_Cold)), 3)`, pMCMC `r format_p(pmcmc((LP_OT$Control_Hot - LP_OT$CORT_Hot) - (LP_OT$Control_Cold - LP_OT$CORT_Cold)), 3, equal = TRUE)`), but not in the Olfactory bulbs ([(β~Control-Hot~ - β~CORT-Hot~) - (β~Control-Cold~ - β~CORT-Cold~)]: mean = `r format_dec((mean(LP_OB$Control_Hot) - mean(LP_OB$CORT_Hot)) - (mean(LP_OB$Control_Cold) - mean(LP_OB$CORT_Cold)), 3)`, pMCMC `r format_p(pmcmc((LP_OB$Control_Hot - LP_OB$CORT_Hot) - (LP_OB$Control_Cold - LP_OB$CORT_Cold)), 3, equal = TRUE)`) (@fig-results_oxidative C, F). We found that, in the Optic tecta, CORT has opposite effects on eggs incubated at high temperatures (β~Control-Hot~ - β~CORT-Hot~: mean = `r format_dec(mean(LP_OT$Control_Hot) - mean(LP_OT$CORT_Hot),3)`, pMCMC `r format_p(pmcmc(LP_OT$Control_Hot - LP_OT$CORT_Hot), 3, equal = TRUE)`) than at low temperatures (β~Control-Cold~ - β~CORT-Cold~: mean = `r format_dec(mean(LP_OT$Control_Cold) - mean(LP_OT$CORT_Cold),3)`, pMCMC `r format_p(pmcmc(LP_OT$Control_Cold - LP_OT$CORT_Cold), 3, equal = TRUE)`), but differences between groups were not significant (see @fig-results_oxidative C).  In addition, age had significant effects on lipid peroxidation for both regions (Tables S13-S15 Supplementary Material).  

```{r, fig-results_oxidative}
#| label: fig-results_oxidative
#| fig-cap: "Estimates of ROS (A, D), DNA damage (B, E), and lipid peroxidation (C, F) in the olfactory bulbs (A - C) and optic tecta (D - F) of L. delicata hatchlings as a function of the different prenatal conditions. Black dots indicate the posterior mean, and the bars represent the SD of the estimates. The y-axis represents the posterior estimates of the variable of interest, and the x-axis represents the different prenatal conditions. Lines with asterisks represent significant differences between groups based on pMCMC values (pMCMC < 0.05), no lines indicate no significant differences."
#| fig-name: "fig-results_oxidative"
#
source(here("R", "func.R"))
#
# A) Plotting the results for OB/Chemical stimulus
plot_ros_OB <- plotting(ROS_OB, "ROS")
plot_dnadamage_OB <- plotting(DNA_OB, "DNA damage")
plot_peroxidation_OB <- plotting(LP_OB, "Lipid peroxidation")
#
legend_plot <- get_legend(plot_ros_OB + theme(legend.position = "right"))
#
fig_OB_oxidative_top <- plot_grid(plot_ros_OB, NULL, NULL, NULL,
                    nrow = 1, rel_widths = c(0.8, 0.1, 0.8, 0.8))
fig_OB_oxidative_bottom <- plot_grid(plot_dnadamage_OB, NULL, plot_peroxidation_OB, NULL,
                    nrow = 1, rel_widths = c(0.8, 0.1, 0.8, 0.8))
fig_OB_oxidative <- plot_grid(fig_OB_oxidative_top, fig_OB_oxidative_bottom,
                    nrow = 2)
#
# B) Plotting the results for OT/Visual stimulus
plot_ros_OT <- plotting(ROS_OT, "ROS")
plot_dnadamage_OT <- plotting(DNA_OT, "DNA damage")
plot_peroxidation_OT <- plotting(LP_OT, "Lipid peroxidation")
#
fig_OT_oxidative_top <- plot_grid(plot_ros_OT, NULL, NULL, NULL,
                    nrow = 1, rel_widths = c(0.8, 0.1, 0.8, 0.8))
fig_OT_oxidative_bottom <- plot_grid(plot_dnadamage_OT, NULL, plot_peroxidation_OT, NULL,
                    nrow = 1, rel_widths = c(0.8, 0.1, 0.8, 0.8))
fig_OT_oxidative <- plot_grid(fig_OT_oxidative_top, fig_OT_oxidative_bottom,
                    nrow = 2)
#
# C) Merging plots
#
# Create the figure grid with extra space for images
fig_results_oxidative <- plot_grid(
  fig_OB_oxidative, NULL, fig_OT_oxidative,
  nrow = 3, rel_heights = c(1, 0.05, 1))
# Final composition: Merge everything, adding images and legend
final_plot_oxidative <- ggdraw(fig_results_oxidative) +
  # Insert OB image in the top right
  draw_image("./Others/OB.png", x = 0.7, y = 0.795, width = 0.15, height = 0.25) +
  # Insert OT image in the middle right
  draw_image("./Others/OT.png", x = 0.7, y = 0.305, width = 0.14, height = 0.23) +
  # Insert legend at the bottom-right
  draw_grob(legend_plot, x = 0.85, y = 0.1, width = 0.0001, height = 0.0001) +
  # Insert title for each plot
  annotate("text", x = 0.0325, y = 0.985, label = "A", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("text", x = 0.0325, y = 0.735, label = "B", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("text", x = 0.3925, y = 0.735, label = "C", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("text", x = 0.0325, y = 0.485, label = "D", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("text", x = 0.0325, y = 0.235, label = "E", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("text", x = 0.3925, y = 0.235, label = "F", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("segment", x = 0.32, xend= 0.32, y = 0.17, yend = 0.215, size = 0.5, colour = "black") +
  annotate("segment", x = 0.31, xend= 0.32, y = 0.17, yend = 0.17, size = 0.5, colour = "black") +
  annotate("segment", x = 0.31, xend= 0.32, y = 0.215, yend = 0.215, size = 0.5, colour = "black") +
  annotate("text", x = 0.33, y = 0.187, label = "*", hjust = 0.5, vjust = 0.5, size = 7)
#
# Print final plot
ggsave(here("./output/figures/text/results_oxidative.png"), plot = final_plot_oxidative, width = 21, height = 21, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/text/results_oxidative.png")
```

#### Prey detection

Results for behaviour analyses are presented on Tables S13-S15 (Supplementary Material) in means of R^2 scores and the estimates of each predictor in the difinitive models. Preliminary models can be found in Tables S1-S12 (Supplementary Material). @fig-results_behaviour summarizes the effects of early conditions on detection latency for both types of stimulus.

Lizards detected chemical stimulus faster when exposed to prenatal CORT (β~Control~ - β~CORT~: mean = `r format_dec(mean(c(DET_OB$Control_Cold, DET_OB$Control_Hot)) - mean(c(DET_OB$CORT_Cold, DET_OB$CORT_Hot)), 3)`, pMCMC `r format_p(pmcmc(c(DET_OB$Control_Cold, DET_OB$Control_Hot) - c(DET_OB$CORT_Cold, DET_OB$CORT_Hot)), 3, equal = TRUE)`), but there was no effect of temperature (β~Hot~ - β~Cold~: mean = `r format_dec(mean(c(DET_OB$CORT_Hot, DET_OB$Control_Hot)) - mean(c(DET_OB$CORT_Cold, DET_OB$Control_Cold)), 3)`, pMCMC `r format_p(pmcmc(c(DET_OB$CORT_Hot, DET_OB$Control_Hot) - c(DET_OB$CORT_Cold, DET_OB$Control_Cold)), 3, equal = TRUE)`), nor the interaction ([(β~Control-Hot~ - β~CORT-Hot~) - (β~Control-Cold~ - β~CORT-Cold~)]: mean = `r format_dec((mean(DET_OB$Control_Hot) - mean(DET_OB$CORT_Hot)) - (mean(DET_OB$Control_Cold) - mean(DET_OB$CORT_Cold)), 3)`, pMCMC `r format_p(pmcmc((DET_OB$Control_Hot - DET_OB$CORT_Hot) - (DET_OB$Control_Cold - DET_OB$CORT_Cold)), 3, equal = TRUE)`) in chemo-detection (@fig-results_behaviour A). In contrast, there were no significant effects of CORT (β~Control~ - β~CORT~: mean = `r format_dec(mean(c(DET_OT$Control_Cold, DET_OT$Control_Hot)) - mean(c(DET_OT$CORT_Cold, DET_OT$CORT_Hot)), 3)`, pMCMC `r format_p(pmcmc(c(DET_OT$Control_Cold, DET_OT$Control_Hot) - c(DET_OT$CORT_Cold, DET_OT$CORT_Hot)), 3, equal = TRUE)`), temperature (β~Hot~ - β~Cold~: mean = `r format_dec(mean(c(DET_OT$CORT_Hot, DET_OT$Control_Hot)) - mean(c(DET_OT$CORT_Cold, DET_OT$Control_Cold)), 3)`, pMCMC `r format_p(pmcmc(c(DET_OT$CORT_Hot, DET_OT$Control_Hot) - c(DET_OT$CORT_Cold, DET_OT$Control_Cold)), 3, equal = TRUE)`), or their interaction ([(β~Control-Hot~ - β~CORT-Hot~) - (β~Control-Cold~ - β~CORT-Cold~)]: mean = `r format_dec((mean(DET_OT$Control_Hot) - mean(DET_OT$CORT_Hot)) - (mean(DET_OT$Control_Cold) - mean(DET_OT$CORT_Cold)), 3)`, pMCMC `r format_p(pmcmc((DET_OT$Control_Hot - DET_OT$CORT_Hot) - (DET_OT$Control_Cold - DET_OT$CORT_Cold)), 3, equal = TRUE)`) on the detection latency of visual stimulus (@fig-results_behaviour B).

```{r, fig-results_behaviour}
#| label: fig-results_behaviour
#| fig-cap: "Estimates of detection latency of chemical (A) and visual (B) stimulus by L. delicata hatchlings as a function of the different prenatal conditions. Black dots indicate the posterior mean, and the bars represent the SD of the estimates. The y-axis represents the posterior estimates of the variable of interest, and the x-axis represents the different prenatal conditions. Lines with asterisks represent significant differences between groups based on pMCMC values (pMCMC < 0.05), no lines indicate no significant differences."
#| fig-name: "fig-results"
#
source(here("R", "func.R"))
# A) Plotting the results for OB/Chemical stimulus
plot_t_D_Chemical <- plotting(DET_OB, "Detection latency")
#
# B) Plotting the results for OT/Visual stimulus
plot_t_D_Visual <- plotting(DET_OT, "Detection latency")
#
legend_plot <- get_legend(plot_t_D_Chemical + theme(legend.position = "right"))
#
# C) Merging plots
#
# Create the figure grid with extra space for images
fig_results_behaviour <- plot_grid(plot_t_D_Chemical, NULL, plot_t_D_Visual, NULL,
                    nrow = 1, rel_widths = c(0.8, 0.5, 0.8, 0.7))
# Final composition: Merge everything, adding images and legend
final_plot_behaviour <- ggdraw(fig_results_behaviour) +
  # Insert CS image in the top middle
  draw_image("./Others/CS.png", x = 0.165, y = 0.47, width = 0.4, height = 0.5) +
  # Insert VS image in the top right
  draw_image("./Others/VS.png", x = 0.6, y = 0.47, width = 0.4, height = 0.5) +
  # Insert legend at the bottom-right
  draw_grob(legend_plot, x = 0.885, y = 0.23, width = 0.0001, height = 0.0001) +
  # Insert title for each plot
  annotate("text", x = 0.035, y = 0.96, label = "A", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("text", x = 0.5, y = 0.96, label = "B", hjust = 1, vjust = 1, size = 7, fontface = "bold") +  
  annotate("segment", x = 0.27, xend= 0.27, y = 0.69, yend = 0.88, size = 0.5, colour = "black") +
  annotate("segment", x = 0.266, xend= 0.27, y = 0.69, yend = 0.69, size = 0.5, colour = "black") +
  annotate("segment", x = 0.266, xend= 0.27, y = 0.88, yend = 0.88, size = 0.5, colour = "black") +
  annotate("text", x = 0.28, y = 0.76, label = "*", hjust = 0.5, vjust = 0.5, size = 7) +
  annotate("segment", x = 0.27, xend= 0.27, y = 0.32, yend = 0.51, size = 0.5, colour = "black") +
  annotate("segment", x = 0.266, xend= 0.27, y = 0.32, yend = 0.32, size = 0.5, colour = "black") +
  annotate("segment", x = 0.266, xend= 0.27, y = 0.51, yend = 0.51, size = 0.5, colour = "black") +
  annotate("text", x = 0.28, y = 0.39, label = "*", hjust = 0.5, vjust = 0.5, size = 7)
#
# Print final plot
ggsave(here("./output/figures/text/results_behaviour.png"), plot = final_plot_behaviour, width = 21, height = 7, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/text/results_behaviour.png")
```

#### SEM results

```{r, model_sem_OB}
#| label: model_sem_OB
# Making the SEM model by using a multivariate brms. The aim is to test the relationships between mitochondrial physiology and detection latency.
# To simplify the random factors, and since there is no effect of experience with the prey in prey detection, latency was averaged across the two preys. Every other predictor added to the model was based on previous brms for each variable separated.
# All continue variables were standardized (var/2SD) before running the models (see data_process.R). 
#
source(here("R", "func.R"))
#
SEM_df <- clean_df %>%
  group_by(lizard_id, prey) %>%
  mutate(t_D = mean(t_D, na.rm = TRUE)) %>%
  ungroup() %>%
  filter(prey == "Unknown")
#
#
data_sem_OB <- SEM_df %>%
  filter(region == "OB") %>%
  mutate(obs = as.integer(c(1:80))) %>%
  mutate(vec = rep(0, length(obs)))
# Create the models
#
refit <- FALSE
#
#
if(refit){
  m_OB <- brm(
    bf(t_D | se(vec, sigma = TRUE) ~ cort + mean_mitodensity + mean_potential + mean_dnadamage + mean_peroxidation + (1|clutch) + (1|q|obs)) +
    bf(mean_dnadamage | se(vec, sigma = TRUE) ~ age_euthanasia + mean_ros + (1|clutch) + (1|p|obs)) +
    bf(mean_peroxidation | se(vec, sigma = TRUE) ~ age_euthanasia + mean_ros + (1|clutch)+ (1|p|obs)) +
    bf(mean_ros | se(vec, sigma = TRUE) ~ mean_mitodensity + mean_potential + (1|clutch) + (1|t|obs)) +
  set_rescor(FALSE),
  family = gaussian(),
  data = data_sem_OB,
  chains = 4, cores = 4, iter = 8000, warmup = 2000,
  control = list(adapt_delta = 0.99, max_treedepth = 11))
  # Save the model
  saveRDS(m_OB, file = here("output/m_SEM/m_OB.rds"))
} else {
  m_OB <- readRDS(here("output/m_SEM/m_OB.rds"))
}
#
#
#
#
#Chcking residual correlations
m_OB <- brm(
  bf(t_D | se(vec, sigma = FALSE) ~ cort + mean_mitodensity + mean_potential + mean_dnadamage + mean_peroxidation + (1|clutch) + (1|q|obs)) +
  bf(mean_dnadamage | se(vec, sigma = FALSE) ~ age_euthanasia + mean_ros + (1|clutch) + (1|p|obs)) +
  bf(mean_peroxidation | se(vec, sigma = FALSE) ~ age_euthanasia + mean_ros + (1|clutch)+ (1|p|obs)) +
  bf(mean_ros | se(vec, sigma = FALSE) ~ mean_mitodensity + mean_potential + (1|clutch) + (1|t|obs)) +
set_rescor(FALSE),
family = gaussian(),
data = data_sem_OB,
chains = 2, cores = 4, iter = 2000, warmup = 1000,
control = list(adapt_delta = 0.99, max_treedepth = 11))
#
m_OB2 <- brm(
  bf(t_D ~ cort + mean_mitodensity + mean_potential + mean_dnadamage + mean_peroxidation + (1|clutch) + (1|q|obs)) +
  bf(mean_dnadamage ~ age_euthanasia + mean_ros + (1|clutch) + (1|p|obs)) +
  bf(mean_peroxidation ~ age_euthanasia + mean_ros + (1|clutch)+ (1|p|obs)) +
  bf(mean_ros ~ mean_mitodensity + mean_potential + (1|clutch) + (1|t|obs)) +
set_rescor(FALSE),
family = gaussian(),
data = data_sem_OB,
chains = 2, cores = 4, iter = 2000, warmup = 1000,
prior = c(
    prior(normal(0, 1e-10), class = "sigma")),
control = list(adapt_delta = 0.99, max_treedepth = 11))
#
#
m_OB_rescorT <- readRDS(here("output/m_SEM/m_OB_rescorT.rds"))
```

```{r, sem_tidy_OB}
#| label: sem_tidy_OB
source(here("R", "func.R"))
#
# I am extracting here all the values for getting the total effects of each of the variables in the model. I am using the posterior values for each of the variables to get the total effects assuming that:
## total effect = direct effect + indirect effect + residual correlation
# In other words:
## total effect = 
# Extract the posteriors for the SEM model
post_sem_OB <- as_draws_df(m_OB) 
#
#### A) Get the direct paths per each variable
# 
# A.1) Detection
OB_coeff_cort_det <- post_sem_OB$b_tD_cortCORT
det_sem_OB_control <- post_sem_OB %>%
  dplyr::select(-b_tD_cortCORT) %>%
  dplyr::sample_n(size = 12000, replace = FALSE) # We take here 12000 random values for all the variables to get estimates for Control treatment, which is the reference level
det_sem_OB_cort <- post_sem_OB %>%
  mutate(across(everything(), ~.x + b_tD_cortCORT)) %>%
  dplyr::sample_n(size = 12000, replace = FALSE) %>% # We take here 12000 random values for all the variables AFTER adding to b_tD_cortCORT to all columns to get estimates for CORT lizards, which is NOT the reference level
  dplyr::select(-b_tD_cortCORT)
det_sem_OB_controlled <- bind_rows(det_sem_OB_control, det_sem_OB_cort)
#
OB_coeff_mitodensity_det <- det_sem_OB_controlled$b_tD_mean_mitodensity
OB_coeff_potential_det <- det_sem_OB_controlled$b_tD_mean_potential
OB_coeff_dna_det <- det_sem_OB_controlled$b_tD_mean_dnadamage
OB_coeff_perox_det <- det_sem_OB_controlled$b_tD_mean_peroxidation
# 
# A.2) DNA damage
OB_coeff_age_dna <- post_sem_OB$b_meandnadamage_age_euthanasia
OB_coeff_ros_dna <- post_sem_OB$b_meandnadamage_mean_ros
#
# A.3) Lipid peroxidation
OB_coeff_age_perox <- post_sem_OB$b_meanperoxidation_age_euthanasia
OB_coeff_ros_perox <- post_sem_OB$b_meanperoxidation_mean_ros
#
# A.4) ROS
OB_coeff_mitodensity_ros <- post_sem_OB$b_meanros_mean_mitodensity
OB_coeff_potential_ros <- post_sem_OB$b_meanros_mean_potential
#
#
#### B) Get the indirect paths for each variable
#
# B.1) Detection
OB_undir_ros_det <- OB_coeff_ros_dna * OB_coeff_dna_det + OB_coeff_ros_perox * OB_coeff_perox_det
OB_undir_mitodensity_det <- OB_coeff_mitodensity_ros * OB_coeff_ros_dna * OB_coeff_dna_det + OB_coeff_mitodensity_ros * OB_coeff_ros_perox * OB_coeff_perox_det
OB_undir_potential_det <- OB_coeff_potential_ros * OB_coeff_ros_dna * OB_coeff_dna_det + OB_coeff_potential_ros * OB_coeff_ros_perox * OB_coeff_perox_det
OB_undir_age_det <- OB_coeff_age_dna * OB_coeff_dna_det + OB_coeff_age_perox * OB_coeff_perox_det
#
# B.2) DNA damage
OB_undir_mitodensity_dna <- OB_coeff_mitodensity_ros * OB_coeff_ros_dna
OB_undir_potential_dna <- OB_coeff_potential_ros * OB_coeff_ros_dna
#
# B.3) Lipid peroxidation
OB_undir_mitodensity_perox <- OB_coeff_mitodensity_ros * OB_coeff_ros_perox
OB_undir_potential_perox <- OB_coeff_potential_ros * OB_coeff_ros_perox
#
#
#### C) Get the total effects for each variable
#
# C.1) Detection
OB_total_cort_det <- OB_coeff_cort_det
OB_total_mitodensity_det <- OB_undir_mitodensity_det
OB_total_potential_det <- OB_undir_potential_det
OB_total_ros_det <- OB_undir_ros_det
OB_total_dna_det <- OB_coeff_dna_det
OB_total_perox_det <- OB_coeff_perox_det
OB_total_age_det <- OB_undir_age_det
#
# C.2) DNA damage
OB_total_age_dna <- OB_coeff_age_dna
OB_total_ros_dna <- OB_coeff_ros_dna
OB_total_mitodensity_dna <- OB_undir_mitodensity_dna
OB_total_potential_dna <- OB_undir_potential_dna
#
# C.3) Lipid peroxidation
OB_total_age_perox <- OB_coeff_age_perox
OB_total_ros_perox <- OB_coeff_ros_perox
OB_total_mitodensity_perox <- OB_undir_mitodensity_perox
OB_total_potential_perox <- OB_undir_potential_perox
#
# C.4) ROS
OB_total_mitodensity_ros <- OB_coeff_mitodensity_ros
OB_total_potential_ros <- OB_coeff_potential_ros
#
#
# D) Create a df with the values for each variable
#
# D.1) Detection (for example)
det_results_semOB <- data.frame(
  reference_variable = rep("t_D", 7),
  predictor_modulator = c("cort",
                          "age",
                          "mean_mitodensity",
                          "mean_potential",
                          "ROS",
                          "mean_dnadamage",
                          "mean_peroxidation"),
  direct_effects = I(list(OB_coeff_cort_det,
                          NA,
                          OB_coeff_mitodensity_det,
                          OB_coeff_potential_det,
                          NA,
                          OB_coeff_dna_det,
                          OB_coeff_perox_det)),
  indirect_effects = I(list(NA,
                          OB_undir_age_det,
                          OB_undir_mitodensity_det,
                          OB_undir_potential_det,
                          OB_undir_ros_det,
                          NA,
                          NA)),
  total_effects = I(list(OB_total_cort_det,
                        OB_total_age_det,
                        OB_total_mitodensity_det,
                        OB_total_potential_det,
                        OB_total_ros_det,
                        OB_total_dna_det,
                        OB_total_perox_det))
  ) %>% 
  group_by(predictor_modulator) %>%
  summarize(
    # Summarizing each list column (direct_effects, indirect_effects, etc.)
    mean_direct_effects = format_dec(mean(unlist(direct_effects), na.rm = TRUE), 3),
    mean_indirect_effects = format_dec(mean(unlist(indirect_effects), na.rm = TRUE), 3),
    mean_total_effects = format_dec(mean(unlist(total_effects), na.rm = TRUE), 3),
    q5_direct = format_dec(quantile(unlist(direct_effects), 0.05, na.rm = TRUE), 3),
    q95_direct = format_dec(quantile(unlist(direct_effects), 0.95, na.rm = TRUE), 3),
    q5_indirect = format_dec(quantile(unlist(indirect_effects), 0.05, na.rm = TRUE), 3),
    q95_indirect = format_dec(quantile(unlist(indirect_effects), 0.95, na.rm = TRUE), 3),
    q5_total = format_dec(quantile(unlist(total_effects), 0.05, na.rm = TRUE), 3),
    q95_total = format_dec(quantile(unlist(total_effects), 0.95, na.rm = TRUE), 3)) %>%
  mutate(source = "det_results_semOB")
#
# D.2) DNA damage
dna_results_semOB <- data.frame(
  reference_variable = rep("DNA damage", 4),
  predictor_modulator = c("age",
                          "mean_mitodensity",
                          "mean_potential",
                          "ROS"),
  direct_effects = I(list(OB_coeff_age_dna,
                          NA,
                          NA,
                          OB_coeff_ros_dna)),
  indirect_effects = I(list(NA,
                          OB_undir_mitodensity_dna,
                          OB_undir_potential_dna,
                          NA)),
  total_effects = I(list(OB_total_age_dna,
                        OB_total_mitodensity_dna,
                        OB_total_potential_dna,
                        OB_total_ros_dna))) %>% 
  group_by(predictor_modulator) %>%
  summarize(
    # Summarizing each list column (direct_effects, indirect_effects, etc.)
    mean_direct_effects = format_dec(mean(unlist(direct_effects), na.rm = TRUE), 3),
    mean_indirect_effects = format_dec(mean(unlist(indirect_effects), na.rm = TRUE), 3),
    mean_total_effects = format_dec(mean(unlist(total_effects), na.rm = TRUE), 3),
    q5_direct = format_dec(quantile(unlist(direct_effects), 0.05, na.rm = TRUE), 3),
    q95_direct = format_dec(quantile(unlist(direct_effects), 0.95, na.rm = TRUE), 3),
    q5_indirect = format_dec(quantile(unlist(indirect_effects), 0.05, na.rm = TRUE), 3),
    q95_indirect = format_dec(quantile(unlist(indirect_effects), 0.95, na.rm = TRUE), 3),
    q5_total = format_dec(quantile(unlist(total_effects), 0.05, na.rm = TRUE), 3),
    q95_total = format_dec(quantile(unlist(total_effects), 0.95, na.rm = TRUE), 3)) %>%
  mutate(source = "dna_results_semOB")
#
# D.3) Lipid peroxidation
perox_results_semOB <- data.frame(
  reference_variable = rep("lipid peroxidation", 4),
  predictor_modulator = c("age",
                          "mean_mitodensity",
                          "mean_potential",
                          "ROS"),
  direct_effects = I(list(OB_coeff_age_perox,
                          NA,
                          NA,
                          OB_coeff_ros_perox)),
  indirect_effects = I(list(NA,
                          OB_undir_mitodensity_perox,
                          OB_undir_potential_perox,
                          NA)),
  total_effects = I(list(OB_total_age_perox,
                        OB_total_mitodensity_perox,
                        OB_total_potential_perox,
                        OB_total_ros_perox))) %>% 
  group_by(predictor_modulator) %>%
  summarize(
    # Summarizing each list column (direct_effects, indirect_effects, etc.)
    mean_direct_effects = format_dec(mean(unlist(direct_effects), na.rm = TRUE), 3),
    mean_indirect_effects = format_dec(mean(unlist(indirect_effects), na.rm = TRUE), 3),
    mean_total_effects = format_dec(mean(unlist(total_effects), na.rm = TRUE), 3),
    q5_direct = format_dec(quantile(unlist(direct_effects), 0.05, na.rm = TRUE), 3),
    q95_direct = format_dec(quantile(unlist(direct_effects), 0.95, na.rm = TRUE), 3),
    q5_indirect = format_dec(quantile(unlist(indirect_effects), 0.05, na.rm = TRUE), 3),
    q95_indirect = format_dec(quantile(unlist(indirect_effects), 0.95, na.rm = TRUE), 3),
    q5_total = format_dec(quantile(unlist(total_effects), 0.05, na.rm = TRUE), 3),
    q95_total = format_dec(quantile(unlist(total_effects), 0.95, na.rm = TRUE), 3)) %>%
  mutate(source = "perox_results_semOB")
#
# D.4) ROS
ros_results_semOB <- data.frame(
  reference_variable = rep("ROS", 2),
  predictor_modulator = c("mean_mitodensity",
                          "mean_potential"),
  direct_effects = I(list(OB_coeff_mitodensity_ros,
                          OB_coeff_potential_ros)),
  indirect_effects = I(list(NA,
                          NA)),
  total_effects = I(list(OB_total_mitodensity_ros,
                        OB_total_potential_ros))) %>% 
  group_by(predictor_modulator) %>%
  summarize(
    # Summarizing each list column (direct_effects, indirect_effects, etc.)
    mean_direct_effects = format_dec(mean(unlist(direct_effects), na.rm = TRUE), 3),
    mean_indirect_effects = format_dec(mean(unlist(indirect_effects), na.rm = TRUE), 3),
    mean_total_effects = format_dec(mean(unlist(total_effects), na.rm = TRUE), 3),
    q5_direct = format_dec(quantile(unlist(direct_effects), 0.05, na.rm = TRUE), 3),
    q95_direct = format_dec(quantile(unlist(direct_effects), 0.95, na.rm = TRUE), 3),
    q5_indirect = format_dec(quantile(unlist(indirect_effects), 0.05, na.rm = TRUE), 3),
    q95_indirect = format_dec(quantile(unlist(indirect_effects), 0.95, na.rm = TRUE), 3),
    q5_total = format_dec(quantile(unlist(total_effects), 0.05, na.rm = TRUE), 3),
    q95_total = format_dec(quantile(unlist(total_effects), 0.95, na.rm = TRUE), 3)) %>%
  mutate(source = "ros_results_semOB")
#
#
# E) Merge everything into a single df
#
sem_results_OB <- bind_rows(det_results_semOB, dna_results_semOB, perox_results_semOB, ros_results_semOB)
```


Results for SEM models are presented on Tables S16-S18 (Supplementary Material) in means of R^2 scores and the direct, indirect, and total effects for all variables. @fig-sem_results_OB and @fig-sem_results_OT summarize direct effects between the variables included in the model for bot brain regions and stimuli.

_Detection of chemical stimulus and its relation with mitochondrial physiology in Olfactory bulbs_: we found significant increases of ROS with increases in mitochondrial density (Direct effect estimation: β~D~ = `r format_dec(mean(OB_coeff_mitodensity_ros), 3)`, pMCMC `r format_p(pmcmc(OB_coeff_mitodensity_det), 3, equal = TRUE)`) and mitochondrial potential (β~D~ = `r format_dec(mean(OB_coeff_potential_ros), 3)`, pMCMC `r format_p(pmcmc(OB_coeff_potential_det), 3, equal = TRUE)`) (see @fig-sem_results_OB). However, there were no significant direct effects of ROS on DNA damage or lipid peroxidation; neither of mitochondrial density, mitochondrial potential, DNA damage, or lipid peroxidation on the detection abilities (see @fig-sem_results_OB and Table S17 in Supplementary Material). Age increased DNA damage (β~D~ = `r format_dec(mean(OB_coeff_age_dna), 3)`m pMCMC `r format_p(pmcmc(OB_coeff_age_dna), 3, equal = TRUE)`) and lipid peroxidation (β~D~ = `r format_dec(mean(OB_coeff_age_perox), 3)`m pMCMC `r format_p(pmcmc(OB_coeff_age_perox), 3, equal = TRUE)`) in the Olfactory bulbs, but there was no indirect effect on detecion latency (Indirect effect estimation β~I~ = `format_dec(mean(OB_undir_age_det), 3)`m pMCMC `r format_p(pmcmc(OB_undir_age_det), 3, equal = TRUE)`) Additionally, CORT shows a week effect on detection latency (β~D~ = `r format_dec(mean(OB_coeff_cort_det), 3)`, pMCMC `r format_p(pmcmc(OB_coeff_cort_det), 3, equal = TRUE)`), suggesting that CORT treated animals detect chemical stimulus faster; but the effect here was not significant.    

```{r, fig-sem_results_OB}
#| label: fig-sem_results_OB
#| fig-cap: "Structural Equation Models for OB/Chemical stimulus"
#| fig-name: "fig-sem_results_OB"
#
# A) Getting all the direct coefficients
OB_cort_det <- paste0(format_dec(mean(OB_coeff_cort_det), 3),
                  " [", format_dec(quantile(OB_coeff_cort_det, 0.05), 3),
                  ", ", format_dec(quantile(OB_coeff_cort_det, 0.95), 3), "]")
OB_density_det <- paste0(format_dec(mean(OB_coeff_mitodensity_det), 3),
                  " [", format_dec(quantile(OB_coeff_mitodensity_det, 0.05), 3),
                  ", ", format_dec(quantile(OB_coeff_mitodensity_det, 0.95), 3), "]")
OB_potential_det <- paste0(format_dec(mean(OB_coeff_potential_det), 3),
                  " [", format_dec(quantile(OB_coeff_potential_det, 0.05), 3),
                  ", ", format_dec(quantile(OB_coeff_potential_det, 0.95), 3), "]")
OB_dna_det <- paste0(format_dec(mean(OB_coeff_dna_det), 3),
                  " [", format_dec(quantile(OB_coeff_dna_det, 0.05), 3),
                  ", ", format_dec(quantile(OB_coeff_dna_det, 0.95), 3), "]")
OB_perox_det <- paste0(format_dec(mean(OB_coeff_perox_det), 3),
                  " [", format_dec(quantile(OB_coeff_perox_det, 0.05), 3),
                  ", ", format_dec(quantile(OB_coeff_perox_det, 0.95), 3), "]")
#
OB_age_dna <- paste0(format_dec(mean(OB_coeff_age_dna), 3),
                  " [", format_dec(quantile(OB_coeff_age_dna, 0.05), 3),
                  ", ", format_dec(quantile(OB_coeff_age_dna, 0.95), 3), "]")
OB_ros_dna <- paste0(format_dec(mean(OB_coeff_ros_dna), 3),
                  " [", format_dec(quantile(OB_coeff_ros_dna, 0.05), 3),
                  ", ", format_dec(quantile(OB_coeff_ros_dna, 0.95), 3), "]")
#
OB_age_perox <- paste0(format_dec(mean(OB_coeff_age_perox), 3),
                  " [", format_dec(quantile(OB_coeff_age_perox, 0.05), 3),
                  ", ", format_dec(quantile(OB_coeff_age_perox, 0.95), 3), "]")
OB_ros_perox <- paste0(format_dec(mean(OB_coeff_ros_perox), 3),
                  " [", format_dec(quantile(OB_coeff_ros_perox, 0.05), 3),
                  ", ", format_dec(quantile(OB_coeff_ros_perox, 0.95), 3), "]")
#
OB_density_ros <- paste0(format_dec(mean(OB_coeff_mitodensity_ros), 3),
                  " [", format_dec(quantile(OB_coeff_mitodensity_ros, 0.05), 3),
                  ", ", format_dec(quantile(OB_coeff_mitodensity_ros, 0.95), 3), "]")
OB_potential_ros <- paste0(format_dec(mean(OB_coeff_potential_ros), 3),
                  " [", format_dec(quantile(OB_coeff_potential_ros, 0.05), 3),
                  ", ", format_dec(quantile(OB_coeff_potential_ros, 0.95), 3), "]")
#
imgOB <- readPNG(here("Others", "SEM_OB.png"))
plot_SEM_OB <- rasterGrob(imgOB, interpolate = TRUE)
#
fig_SEM_OB <- ggdraw(plot_SEM_OB) +
  annotate("text", x = 0.815, y = 0.59, label = OB_cort_det, hjust = 1, vjust = 1, size = 2.8, family = "Times", color = "darkgreen") +
  annotate("text", x = 0.35, y = 0.26, label = OB_density_det, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.35, y = 0.918, label = OB_potential_det, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.83, y = 0.745, label = OB_dna_det, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.83, y = 0.455, label = OB_perox_det, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.55, y = 0.538, label = OB_age_dna, hjust = 1, vjust = 1, size = 2.8, family = "Times", color = "darkgreen") +
  annotate("text", x = 0.525, y = 0.813, label = OB_ros_dna, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.57, y = 0.115, label = OB_age_perox, hjust = 1, vjust = 1, size = 2.8, family = "Times", color = "darkgreen") +
  annotate("text", x = 0.525, y = 0.365, label = OB_ros_perox, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.285, y = 0.355, label = OB_density_ros, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.285, y = 0.825, label = OB_potential_ros, hjust = 1, vjust = 1, size = 2.8, family = "Times")
ggsave(here("./output/figures/text/SEM_OB.png"), plot = fig_SEM_OB, width = 21, height = 10, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/text/SEM_OB.png")
```

```{r, models_sem_OT}
#| label: models_sem_OT
# Making the same models above but for OT/Visual stimulus
#
source(here("R", "func.R"))
#
#
data_sem_OT <- SEM_df %>%
  filter(region == "OT")
#
# Create the models
#
refit <- FALSE
#
if(refit){
  m_OT <- brm(
    bf(t_D ~ mean_mitodensity + mean_potential + mean_dnadamage + mean_peroxidation + (1|clutch)) +
    bf(mean_dnadamage ~ cort*temp + sex + mean_ros + (1|clutch)) +
    bf(mean_peroxidation ~ cort*temp + age_euthanasia + mean_ros + (1|clutch)) +
    bf(mean_ros ~ mean_mitodensity + mean_potential + (1|clutch)) +
  set_rescor(TRUE),
  family = gaussian(),
  data = data_sem_OT, 
  chains = 4, cores = 4, iter = 8000, warmup = 2000,
  control = list(adapt_delta = 0.99, max_treedepth = 11))
  # Save the model
  saveRDS(m_OT, file = here("output/m_SEM/m_OT.rds"))
} else {
  m_OT <- readRDS(here("output/m_SEM/m_OT.rds"))
}
#
```

```{r, sem_tidy_OT}
#| label: sem_tidy_OT
source(here("R", "func.R"))
#
# I am extracting here all the values for getting the total effects of each of the variables in the model. I am using the posterior values for each of the variables to get the total effects assuming that:
## total effect = direct effect + indirect effect + residual correlation
# In other words:
## total effect = 
# Extract the posteriors for the SEM model
post_sem_OT <- as_draws_df(m_OT) 
#
#### A) Get the direct paths per each variable
# 
# A.1) Detection
OT_coeff_mitodensity_det <- post_sem_OT$b_tD_mean_mitodensity
OT_coeff_potential_det <- post_sem_OT$b_tD_mean_potential
OT_coeff_dna_det <- post_sem_OT$b_tD_mean_dnadamage
OT_coeff_perox_det <- post_sem_OT$b_tD_mean_peroxidation
#
# A.2) DNA damage
#
# Getting CORT coefficient for both temperatures controlling for each sex
dna_sem_OT_male <- post_sem_OT %>%
  dplyr::select(-b_meandnadamage_sexFemale)
dna_sem_OT_fem <- post_sem_OT %>%
  mutate(across(everything(), ~.x + b_meandnadamage_sexFemale)) %>%
  dplyr::select(-b_meandnadamage_sexFemale) # Add effect of sex to everything to see estimates on females (males the reference level for sex)

dna_sem_OT_male_trt <- dna_sem_OT_male %>%
  dplyr::sample_n(size = 12000, replace = FALSE)
dna_sem_OT_fem_trt <- dna_sem_OT_fem %>%
  dplyr::sample_n(size = 12000, replace = FALSE)

dna_sem_OT_trt <- bind_rows(dna_sem_OT_male_trt, dna_sem_OT_fem_trt)

OT_coeff_cort_dna_cold <- dna_sem_OT_trt$b_meandnadamage_cortCORT
OT_coeff_cort_dna_hot <- dna_sem_OT_trt$b_meandnadamage_Intercept + dna_sem_OT_trt$b_meandnadamage_cortCORT + dna_sem_OT_trt$b_meandnadamage_tempHot + dna_sem_OT_trt$`b_meandnadamage_cortCORT:tempHot` - (dna_sem_OT_trt$b_meandnadamage_Intercept + dna_sem_OT_trt$b_meandnadamage_tempHot)
# Getting ros coefficient controlling for each level of the cort-temp interaction and controlling for each sex
dna_sem_OT_male_controlcold <- dna_sem_OT_male %>%
  dplyr::sample_n(size = 3000, replace = FALSE)
dna_sem_OT_male_controlhot <- dna_sem_OT_male %>%
  dplyr::mutate(across(everything(), ~.x + b_meandnadamage_tempHot)) %>%
  dplyr::sample_n(size = 3000, replace = FALSE)
dna_sem_OT_male_cortcold <- dna_sem_OT_male %>%
  dplyr::mutate(across(everything(), ~.x + b_meandnadamage_cortCORT)) %>%
  dplyr::sample_n(size = 3000, replace = FALSE)
dna_sem_OT_male_corthot <- dna_sem_OT_male %>%
  dplyr::mutate(across(everything(), ~.x + b_meandnadamage_cortCORT + b_meandnadamage_tempHot +
                `b_meandnadamage_cortCORT:tempHot`)) %>%
  dplyr::sample_n(size = 3000, replace = FALSE)
 
dna_sem_OT_fem_controlcold <- dna_sem_OT_fem %>%
  dplyr::sample_n(size = 3000, replace = FALSE)
dna_sem_OT_fem_controlhot <- dna_sem_OT_fem %>%
  dplyr::mutate(across(everything(), ~.x + b_meandnadamage_tempHot)) %>%
  dplyr::sample_n(size = 3000, replace = FALSE)
dna_sem_OT_fem_cortcold <- dna_sem_OT_fem %>%
  dplyr::mutate(across(everything(), ~.x + b_meandnadamage_cortCORT)) %>%
  dplyr::sample_n(size = 3000, replace = FALSE)
dna_sem_OT_fem_corthot <- dna_sem_OT_fem %>%
  dplyr::mutate(across(everything(), ~.x + b_meandnadamage_cortCORT + b_meandnadamage_tempHot +
                `b_meandnadamage_cortCORT:tempHot`)) %>%
  dplyr::sample_n(size = 3000, replace = FALSE)
 
dna_sem_OT_controlled <- bind_rows(dna_sem_OT_male_cortcold,
                                  dna_sem_OT_male_corthot,
                                  dna_sem_OT_male_controlcold,
                                  dna_sem_OT_male_controlhot,
                                  dna_sem_OT_fem_cortcold,
                                  dna_sem_OT_fem_corthot,
                                  dna_sem_OT_fem_controlcold,
                                  dna_sem_OT_fem_controlhot)

OT_coeff_ros_dna <- dna_sem_OT_controlled$b_meandnadamage_mean_ros
#
# Getting sex coefficient controlling for each level of the cort-temp interaction
dna_sem_OT_controlcold <- post_sem_OT %>%
  dplyr::sample_n(size = 6000, replace = FALSE)
dna_sem_OT_cortcold <- post_sem_OT %>%
  dplyr::mutate(across(everything(), ~.x + b_meandnadamage_cortCORT)) %>%
  dplyr::sample_n(size = 6000, replace = FALSE)
dna_sem_OT_controlhot <- post_sem_OT %>%
  dplyr::mutate(across(everything(), ~.x + b_meandnadamage_tempHot)) %>%
  dplyr::sample_n(size = 6000, replace = FALSE)
dna_sem_OT_corthot <- post_sem_OT %>%
  dplyr::mutate(across(everything(), ~.x + b_meandnadamage_cortCORT + b_meandnadamage_tempHot +
                `b_meandnadamage_cortCORT:tempHot`)) %>%
  dplyr::sample_n(size = 6000, replace = FALSE)

dna_sem_OT_sex <- bind_rows(dna_sem_OT_cortcold,
                            dna_sem_OT_controlcold,
                            dna_sem_OT_corthot,
                            dna_sem_OT_controlhot)

OT_coeff_sex_dna <- dna_sem_OT_sex$b_meandnadamage_sexFemale
#
# A.3) Lipid peroxidation
OT_coeff_cort_perox_cold <- post_sem_OT$b_meanperoxidation_cortCORT
OT_coeff_cort_perox_hot <- post_sem_OT$b_meanperoxidation_Intercept + post_sem_OT$b_meanperoxidation_cortCORT + post_sem_OT$b_meanperoxidation_tempHot + post_sem_OT$`b_meanperoxidation_cortCORT:tempHot` - (post_sem_OT$b_meanperoxidation_Intercept + post_sem_OT$b_meanperoxidation_tempHot)

# Getting the coefficient of age and ros controlling for each level of the cort-temp interaction
perox_sem_OT_controlcold <- post_sem_OT %>%
  dplyr::sample_n(size = 6000, replace = FALSE)
perox_sem_OT_cortcold <- post_sem_OT %>%
  dplyr::mutate(across(everything(), ~.x + b_meanperoxidation_cortCORT)) %>%
  dplyr::sample_n(size = 6000, replace = FALSE)
perox_sem_OT_controlhot <- post_sem_OT %>%
  dplyr::mutate(across(everything(), ~.x + b_meanperoxidation_tempHot)) %>%
  dplyr::sample_n(size = 6000, replace = FALSE)
perox_sem_OT_corthot <- post_sem_OT %>%
  dplyr::mutate(across(everything(), ~.x + b_meanperoxidation_cortCORT + b_meanperoxidation_tempHot +
                `b_meanperoxidation_cortCORT:tempHot`)) %>%
  dplyr::sample_n(size = 6000, replace = FALSE)

perox_sem_OT_controlled <- bind_rows(perox_sem_OT_cortcold,
                            perox_sem_OT_controlcold,
                            perox_sem_OT_corthot,
                            perox_sem_OT_controlhot)

OT_coeff_ros_perox <- perox_sem_OT_controlled$b_meanperoxidation_mean_ros
OT_coeff_age_perox <- perox_sem_OT_controlled$b_meanperoxidation_age_euthanasia
#
# A.4) ROS
OT_coeff_mitodensity_ros <- post_sem_OT$b_meanros_mean_mitodensity
OT_coeff_potential_ros <- post_sem_OT$b_meanros_mean_potential
#
#
#### B) Get the indirect paths for each variable
#
# B.1) Detection
OT_undir_cort_det_COLD <- OT_coeff_cort_dna_cold * OT_coeff_dna_det + OT_coeff_cort_perox_cold * OT_coeff_perox_det
OT_undir_cort_det_HOT <- OT_coeff_cort_dna_hot * OT_coeff_dna_det + OT_coeff_cort_perox_hot * OT_coeff_perox_det
OT_undir_age_det <- OT_coeff_age_perox * OT_coeff_perox_det
OT_undir_sex_det <- OT_coeff_sex_dna * OT_coeff_dna_det
OT_undir_ros_det <- OT_coeff_ros_dna * OT_coeff_dna_det + OT_coeff_ros_perox * OT_coeff_perox_det
OT_undir_mitodensity_det <- OT_coeff_mitodensity_ros * OT_coeff_ros_dna * OT_coeff_dna_det + OT_coeff_mitodensity_ros * OT_coeff_ros_perox * OT_coeff_perox_det
OT_undir_potential_det <- OT_coeff_potential_ros * OT_coeff_ros_dna * OT_coeff_dna_det + OT_coeff_potential_ros * OT_coeff_ros_perox * OT_coeff_perox_det
#
# B.2) DNA damage
OT_undir_mitodensity_dna <- OT_coeff_mitodensity_ros * OT_coeff_ros_dna
OT_undir_potential_dna <- OT_coeff_potential_ros * OT_coeff_ros_dna
#
# B.3) Lipid peroxidation
OT_undir_mitodensity_perox <- OT_coeff_mitodensity_ros * OT_coeff_ros_perox
OT_undir_potential_perox <- OT_coeff_potential_ros * OT_coeff_ros_perox
#
#
#### C) Get the total effects for each variable
#
# C.1) Detection
OT_total_cort_det_COLD <- OT_undir_cort_det_COLD
OT_total_cort_det_HOT <- OT_undir_cort_det_HOT
OT_total_age_det <- OT_undir_age_det
OT_total_sex_det <- OT_undir_sex_det
OT_total_mitodensity_det <- OT_undir_mitodensity_det
OT_total_potential_det <- OT_undir_potential_det
OT_total_ros_det <- OT_undir_ros_det 
OT_total_dna_det <- OT_coeff_dna_det 
OT_total_perox_det <- OT_coeff_perox_det 
#
# C.2) DNA damage
OT_total_cort_dna_COLD <- OT_coeff_cort_dna_cold
OT_total_cort_dna_HOT <- OT_coeff_cort_dna_hot
OT_total_sex_dna <- OT_coeff_sex_dna
OT_total_ros_dna <- OT_coeff_ros_dna 
OT_total_mitodensity_dna <- OT_undir_mitodensity_dna
OT_total_potential_dna <- OT_undir_potential_dna
#
# C.3) Lipid peroxidation
OT_total_cort_perox_COLD <- OT_coeff_cort_perox_cold
OT_total_cort_perox_HOT <- OT_coeff_cort_perox_hot
OT_total_age_perox <- OT_coeff_age_perox
OT_total_ros_perox <- OT_coeff_ros_perox 
OT_total_mitodensity_perox <- OT_undir_mitodensity_perox
OT_total_potential_perox <- OT_undir_potential_perox
#
# C.4) ROS
OT_total_mitodensity_ros <- OT_coeff_mitodensity_ros
OT_total_potential_ros <- OT_coeff_potential_ros
#
#
# D) Create a df with the values for each variable
#
# D.1) Detection
det_results_semOT <- data.frame(
  reference_variable = rep("t_D", 9),
  predictor_modulator = c("cort_cold",
                          "cort_hot",
                          "age",
                          "sex",
                          "mean_mitodensity",
                          "mean_potential",
                          "ROS",
                          "mean_dnadamage",
                          "mean_peroxidation"),
  direct_effects = I(list(NA,
                          NA,
                          NA,
                          NA,
                          OT_coeff_mitodensity_det,
                          OT_coeff_potential_det,
                          NA,
                          OT_coeff_dna_det,
                          OT_coeff_perox_det)),
  indirect_effects = I(list(OT_undir_cort_det_COLD,
                          OT_undir_cort_det_HOT,
                          OT_undir_age_det,
                          OT_undir_sex_det,
                          OT_undir_mitodensity_det,
                          OT_undir_potential_det,
                          OT_undir_ros_det,
                          NA,
                          NA)),
  total_effects = I(list(OT_total_cort_det_COLD,
                        OT_total_cort_det_HOT,
                        OT_total_age_det,
                        OT_total_sex_det,
                        OT_total_mitodensity_det,
                        OT_total_potential_det,
                        OT_total_ros_det,
                        OT_total_dna_det,
                        OT_total_perox_det))
  ) %>% 
  group_by(predictor_modulator) %>%
  summarize(
    # Summarizing each list column (direct_effects, indirect_effects, etc.)
    mean_direct_effects = format_dec(mean(unlist(direct_effects), na.rm = TRUE), 3),
    mean_indirect_effects = format_dec(mean(unlist(indirect_effects), na.rm = TRUE), 3),
    mean_total_effects = format_dec(mean(unlist(total_effects), na.rm = TRUE), 3),
    q5_direct = format_dec(quantile(unlist(direct_effects), 0.05, na.rm = TRUE), 3),
    q95_direct = format_dec(quantile(unlist(direct_effects), 0.95, na.rm = TRUE), 3),
    q5_indirect = format_dec(quantile(unlist(indirect_effects), 0.05, na.rm = TRUE), 3),
    q95_indirect = format_dec(quantile(unlist(indirect_effects), 0.95, na.rm = TRUE), 3),
    q5_total = format_dec(quantile(unlist(total_effects), 0.05, na.rm = TRUE), 3),
    q95_total = format_dec(quantile(unlist(total_effects), 0.95, na.rm = TRUE), 3)
  )  %>%
  mutate(source = "det_results_semOT")
#
# D.2) DNA damage
dna_results_semOT <- data.frame(
  reference_variable = rep("DNA damage", 6),
  predictor_modulator = c("cort_cold",
                          "cort_hot",
                          "sex",
                          "mean_mitodensity",
                          "mean_potential",
                          "ROS"),
  direct_effects = I(list(OT_coeff_cort_dna_cold,
                          OT_coeff_cort_dna_hot,
                          OT_coeff_sex_dna,
                          NA,
                          NA,
                          OT_coeff_ros_dna)),
  indirect_effects = I(list(NA,
                          NA,
                          NA,
                          OT_undir_mitodensity_dna,
                          OT_undir_potential_dna,
                          NA)),
  total_effects = I(list(OT_total_cort_dna_COLD,
                        OT_total_cort_dna_HOT,
                        OT_total_sex_dna,
                        OT_total_mitodensity_dna,
                        OT_total_potential_dna,
                        OT_total_ros_dna))
  ) %>% 
  group_by(predictor_modulator) %>%
  summarize(
    # Summarizing each list column (direct_effects, indirect_effects, etc.)
    mean_direct_effects = format_dec(mean(unlist(direct_effects), na.rm = TRUE), 3),
    mean_indirect_effects = format_dec(mean(unlist(indirect_effects), na.rm = TRUE), 3),
    mean_total_effects = format_dec(mean(unlist(total_effects), na.rm = TRUE), 3),
    q5_direct = format_dec(quantile(unlist(direct_effects), 0.05, na.rm = TRUE), 3),
    q95_direct = format_dec(quantile(unlist(direct_effects), 0.95, na.rm = TRUE), 3),
    q5_indirect = format_dec(quantile(unlist(indirect_effects), 0.05, na.rm = TRUE), 3),
    q95_indirect = format_dec(quantile(unlist(indirect_effects), 0.95, na.rm = TRUE), 3),
    q5_total = format_dec(quantile(unlist(total_effects), 0.05, na.rm = TRUE), 3),
    q95_total = format_dec(quantile(unlist(total_effects), 0.95, na.rm = TRUE), 3)
  )  %>%
  mutate(source = "dna_results_semOT")
#
# D.3) Lipid peroxidation
perox_results_semOT <- data.frame(
  reference_variable = rep("Lipid peroxidation", 6),
  predictor_modulator = c("cort_cold",
                          "cort_hot",
                          "age",
                          "mean_mitodensity",
                          "mean_potential",
                          "ROS"),
  direct_effects = I(list(OT_coeff_cort_perox_cold,
                          OT_coeff_cort_perox_hot,
                          OT_coeff_age_perox,
                          NA,
                          NA,
                          OT_coeff_ros_perox)),
  indirect_effects = I(list(NA,
                          NA,
                          NA,
                          OT_undir_mitodensity_perox,
                          OT_undir_potential_perox,
                          NA)),
  total_effects = I(list(OT_total_cort_perox_COLD,
                        OT_total_cort_perox_HOT,
                        OT_total_age_perox,
                        OT_total_mitodensity_perox,
                        OT_total_potential_perox,
                        OT_total_ros_perox))
  ) %>% 
  group_by(predictor_modulator) %>%
  summarize(
    # Summarizing each list column (direct_effects, indirect_effects, etc.)
    mean_direct_effects = format_dec(mean(unlist(direct_effects), na.rm = TRUE), 3),
    mean_indirect_effects = format_dec(mean(unlist(indirect_effects), na.rm = TRUE), 3),
    mean_total_effects = format_dec(mean(unlist(total_effects), na.rm = TRUE), 3),
    q5_direct = format_dec(quantile(unlist(direct_effects), 0.05, na.rm = TRUE), 3),
    q95_direct = format_dec(quantile(unlist(direct_effects), 0.95, na.rm = TRUE), 3),
    q5_indirect = format_dec(quantile(unlist(indirect_effects), 0.05, na.rm = TRUE), 3),
    q95_indirect = format_dec(quantile(unlist(indirect_effects), 0.95, na.rm = TRUE), 3),
    q5_total = format_dec(quantile(unlist(total_effects), 0.05, na.rm = TRUE), 3),
    q95_total = format_dec(quantile(unlist(total_effects), 0.95, na.rm = TRUE), 3)
  ) %>%
  mutate(source = "perox_results_semOT")
#
# D.4) ROS
ros_results_semOT <- data.frame(
  reference_variable = rep("ROS", 2),
  predictor_modulator = c("mean_mitodensity",
                          "mean_potential"),
  direct_effects = I(list(OT_coeff_mitodensity_ros,
                          OT_coeff_potential_ros)),
  indirect_effects = I(list(NA,
                          NA)),
  total_effects = I(list(OT_total_mitodensity_ros,
                        OT_total_potential_ros))
  ) %>% 
  group_by(predictor_modulator) %>%
  summarize(
    # Summarizing each list column (direct_effects, indirect_effects, etc.)
    mean_direct_effects = format_dec(mean(unlist(direct_effects), na.rm = TRUE), 3),
    mean_indirect_effects = format_dec(mean(unlist(indirect_effects), na.rm = TRUE), 3),
    mean_total_effects = format_dec(mean(unlist(total_effects), na.rm = TRUE), 3),
    q5_direct = format_dec(quantile(unlist(direct_effects), 0.05, na.rm = TRUE), 3),
    q95_direct = format_dec(quantile(unlist(direct_effects), 0.95, na.rm = TRUE), 3),
    q5_indirect = format_dec(quantile(unlist(indirect_effects), 0.05, na.rm = TRUE), 3),
    q95_indirect = format_dec(quantile(unlist(indirect_effects), 0.95, na.rm = TRUE), 3),
    q5_total = format_dec(quantile(unlist(total_effects), 0.05, na.rm = TRUE), 3),
    q95_total = format_dec(quantile(unlist(total_effects), 0.95, na.rm = TRUE), 3)
  )  %>%
  mutate(source = "ros_results_semOT")
#
# E) Merge everything into a single df
#
sem_results_OT <- bind_rows(det_results_semOT, dna_results_semOT, perox_results_semOT, ros_results_semOT)
```

_Detection of visual stimulus and its relation with mitochondrial physiology in Optic tecta_: mitochondrial density had big significant effects on ROS production (β~D~ = `r format_dec(mean(OT_coeff_mitodensity_ros), 3)`, pMCMC `r format_p(pmcmc(OT_coeff_mitodensity_det), 3, equal = TRUE)`). However, we did not find any significant direct or indirect effects of ROS on detection latency, DNA damage, or lipid peroxidation (see @fig-sem_results_OT and Table S18 in Supplementary Material). Mitochondrial potential did not affect ROS or any other variable in the model (see @fig-sem_results_OT and Table S18 in Supplementary Material). We also did not see any effects of ROS production on DNA damage or lipid peroxidation, neither of DNA damage or lipid peroxidation on detection latency. In addition, we found weak non significant effects of sex and CORT on DNA damage, neither age and CORT on lipid peroxidation (see @fig-sem_results_OT and Table S18 in Supplementary Material).

```{r, fig-sem_results_OT}
#| label: fig-sem_results_OT
#| fig-cap: "Structural Equation Models for OT/Visual stimulus"
#| fig-name: "fig-sem_results_OT"
#
# A) Getting all the direct coefficients
OT_density_det <- paste0(format_dec(mean(OT_coeff_mitodensity_det), 3),
                  " [", format_dec(quantile(OT_coeff_mitodensity_det, 0.05), 3),
                  ", ", format_dec(quantile(OT_coeff_mitodensity_det, 0.95), 3), "]")
OT_potential_det <- paste0(format_dec(mean(OT_coeff_potential_det), 3),
                  " [", format_dec(quantile(OT_coeff_potential_det, 0.05), 3),
                  ", ", format_dec(quantile(OT_coeff_potential_det, 0.95), 3), "]")
OT_dna_det <- paste0(format_dec(mean(OT_coeff_dna_det), 3),
                  " [", format_dec(quantile(OT_coeff_dna_det, 0.05), 3),
                  ", ", format_dec(quantile(OT_coeff_dna_det, 0.95), 3), "]")
OT_perox_det <- paste0(format_dec(mean(OT_coeff_perox_det), 3),
                  " [", format_dec(quantile(OT_coeff_perox_det, 0.05), 3),
                  ", ", format_dec(quantile(OT_coeff_perox_det, 0.95), 3), "]")
#
OT_cort_dna_cold <- paste0(format_dec(mean(OT_coeff_cort_dna_cold), 3),
                      " [", format_dec(quantile(OT_coeff_cort_dna_cold, 0.05), 3),
                      ", ", format_dec(quantile(OT_coeff_cort_dna_cold, 0.95), 3), "]")
OT_cort_dna_hot <- paste0(format_dec(mean(OT_coeff_cort_dna_hot), 3),
                      " [", format_dec(quantile(OT_coeff_cort_dna_hot, 0.05), 3),
                     ", ", format_dec(quantile(OT_coeff_cort_dna_hot, 0.95), 3), "]")
OT_sex_dna <- paste0(format_dec(mean(OT_coeff_sex_dna), 3),
                  " [", format_dec(quantile(OT_coeff_sex_dna, 0.05), 3),
                  ", ", format_dec(quantile(OT_coeff_sex_dna, 0.95), 3), "]")
OT_ros_dna <- paste0(format_dec(mean(OT_coeff_ros_dna), 3),
                  " [", format_dec(quantile(OT_coeff_ros_dna, 0.05), 3),
                  ", ", format_dec(quantile(OT_coeff_ros_dna, 0.95), 3), "]")
#
OT_cort_perox_cold <- paste0(format_dec(mean(OT_coeff_cort_perox_cold), 3),
                          " [", format_dec(quantile(OT_coeff_cort_perox_cold, 0.05), 3),
                          ", ", format_dec(quantile(OT_coeff_cort_perox_cold, 0.95), 3), "]")
OT_cort_perox_hot <- paste0(format_dec(mean(OT_coeff_cort_perox_hot), 3),
                      " [", format_dec(quantile(OT_coeff_cort_perox_hot, 0.05), 3),
                     ", ", format_dec(quantile(OT_coeff_cort_perox_hot, 0.95), 3), "]")
OT_age_perox <- paste0(format_dec(mean(OT_coeff_age_perox), 3),
                  " [", format_dec(quantile(OT_coeff_age_perox, 0.05), 3),
                  ", ", format_dec(quantile(OT_coeff_age_perox, 0.95), 3), "]")
OT_ros_perox <- paste0(format_dec(mean(OT_coeff_ros_perox), 3),
                  " [", format_dec(quantile(OT_coeff_ros_perox, 0.05), 3),
                  ", ", format_dec(quantile(OT_coeff_ros_perox, 0.95), 3), "]")
#
OT_density_ros <- paste0(format_dec(mean(OT_coeff_mitodensity_ros), 3),
                  " [", format_dec(quantile(OT_coeff_mitodensity_ros, 0.05), 3),
                  ", ", format_dec(quantile(OT_coeff_mitodensity_ros, 0.95), 3), "]")
OT_potential_ros <- paste0(format_dec(mean(OT_coeff_potential_ros), 3),
                  " [", format_dec(quantile(OT_coeff_potential_ros, 0.05), 3),
                  ", ", format_dec(quantile(OT_coeff_potential_ros, 0.95), 3), "]")
#
#
imgOT <- readPNG(here("Others", "SEM_OT.png"))
plot_SEM_OT <- rasterGrob(imgOT, interpolate = TRUE)
#
fig_SEM_OT <- ggdraw(plot_SEM_OT) +
  annotate("text", x = 0.35, y = 0.26, label = OT_density_det, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.35, y = 0.918, label = OT_potential_det, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.83, y = 0.745, label = OT_dna_det, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.83, y = 0.455, label = OT_perox_det, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.58, y = 0.533, label = OT_sex_dna, hjust = 1, vjust = 1, size = 2.8, family = "Times", color = "darkgreen") +
  annotate("text", x = 0.525, y = 0.813, label = OT_ros_dna, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.79, y = 0.533, label = OT_cort_dna_cold, hjust = 1, vjust = 1, size = 2.8, family = "Times", color = "darkgreen", fontface = "italic") +
  annotate("text", x = 0.79, y = 0.567, label = OT_cort_dna_hot, hjust = 1, vjust = 1, size = 2.8, family = "Times", color = "darkgreen") +
  annotate("text", x = 0.57, y = 0.115, label = OT_age_perox, hjust = 1, vjust = 1, size = 2.8, family = "Times", color = "darkgreen") +
  annotate("text", x = 0.525, y = 0.365, label = OT_ros_perox, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.78, y = 0.27, label = OT_cort_perox_cold, hjust = 1, vjust = 1, size = 2.8, family = "Times", color = "darkgreen", fontface = "italic") +
  annotate("text", x = 0.78, y = 0.305, label = OT_cort_perox_hot, hjust = 1, vjust = 1, size = 2.8, family = "Times", color = "darkgreen") +
  annotate("text", x = 0.285, y = 0.355, label = OT_density_ros, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.285, y = 0.825, label = OT_potential_ros, hjust = 1, vjust = 1, size = 2.8, family = "Times")
ggsave(here("./output/figures/text/SEM_OT.png"), plot = fig_SEM_OT, width = 21, height = 10, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/text/SEM_OT.png")
```

## Discussion

- Early environmental conditions did not have significant effects on mitochondrial density, potential, nor ROS production in neither of the brain regions studied.

- Mitocondrial density was a good predictor of ROS production in both regions, but mitochondrial potential was only a good predictor in Olfactory bulbs. We might be missing interactions with other variables that could explain the differences between regions.

- Early conditions did not affect DNA damage on Olfactory bulbs, but had a significant effect on DNA damage in Optic tecta. CORT reduced DNA damage in cold incubated lizards but had no effects at high incubation temperatures. This effect was not mediated by ROS production or any other mitochondrial-related measurement. It could be because of the way CORT can redistribute resources to cope with stressors, and in this case, it could be reducing DNA damage in the brain.

- Early conditions had a weak effect on lipid peroxidation in both regions. The effect of CORT seems to increase lipid peroxidation at low temperatures, and increase it at higher. This patern is similar in both Olfactory bulbs and Optic tecta. It could be related to the way lipids are organised at different temperatures, and how CORT can affect the way they are metabolised.

- Age has significant effects on DNA damage and lipid peroxidation in Olfactory bulbs (as expected), but a weak effect on lipid peroxidation in Optic tecta. Females had lower DNA damage in Olfactory bulbs (marginally significant) and slightly higher in the Optic tecta. Aging increases accumulative damage. Males could be investing more in repairing or avoiding damage in chemosensory areas because they could be more important for sexual-related behaviours.

- Oxidative damage was not influence by ROS production or any other mitochondrial-related measurement in either of the brain regions studied. It could be that measuring only H2O2 is too reductionist, or the action of antioxidants, which, at the same time, could potentially explained the patterns mentioned before.

- Detection latency decreased with CORT exposure when animals were presented chemical stimulus, but not with visual. It could be related to the fact that motivation was not totally controlled. Motivation tests presented both types of stimulus, but it could be that stressed animals were more motivated to search for food and, therefore, interacted faster with the vessel in chemical tests.

- Performance in the behavioral tests was not affected by mitochondrial physiology. It could be that the brain regions studied are not directly related to the behaviors tested, that other parameters are more relevant, or that the oxidatie damage is not high enought for detecting an effect.

# References
<div id="refs"></div>

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

# Supplementary Material

#### Results of preliminary models 

```{r, models_preliminary}
#| label: models_preliminary
# Fitting intial models to see if sex and age are relevant for our models
source(here("R", "func.R"))
#
#
# Run models mitochondrial physiology (each region separately)
#
var_m <- c("mean_mitodensity", "mean_potential", "mean_ros", "mean_dnadamage", "mean_peroxidation")
regions <- c("OB", "OT")
formula_list_ <- list()
for (p in var_m){
  formula_list_[[p]] <- paste0(p, "~ cort*temp + age_euthanasia + sex + (1|clutch)")
  for (h in regions){
    if (h == "OB"){
      df <- clean_df %>% filter(region == "OB")
      l <- "OB"
    } else {
      df <- clean_df %>% filter(region == "OT")
      l <- "OT"
    }
  
  pmodel_name <- paste0("m_prel_", p, "_", h)
  assign(pmodel_name, fit_m(df = df,
                             cat = "prel",
                             var = p,
                             formula = formula_list_[[p]],
                             fam = gaussian(),
                             label = l,
                             refit = FALSE),
          envir = .GlobalEnv)  # Assign to the global environment
  }
}
#
#
# Run model behaviour (stimuli separated)
beh_df <- clean_df
stimulus <- c("Chemical", "Visual")
formula_t_D <- t_D ~ motivation + motivation:cort + cort*temp + age_trial + sex + prey +(1|clutch) + (1|lizard_id) 
for (k in stimulus){
  df <- beh_df %>% filter(stimulus == k)
  pmodel_name <- paste0("m_prel_t_D_", k)
  assign(pmodel_name, fit_m(df = df,
                            cat = "prel",
                            var = "t_D",
                            formula = formula_t_D,
                            fam = gaussian(),
                            label = k,
                            refit = FALSE),
        envir = .GlobalEnv)  # Assign to the global environment
}
```

Table S1. Preliminary results of the models testing for Mitochondrial Density in Olfactory Bulbs.

```{r, results_preliminary_mitdensity_OB}
#| tbl-cap: "Preliminary results of the models testing for Mitochondrial Density in OB"
#| label: results_preliminary_mitdensity
#
sum_m_mitdensity_OB_prel <- m_prel_mean_mitodensity_OB %>%
  dplyr::select(-starts_with("r_")) %>%  # Removes random effect terms
  summarise_draws()  %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_mitdensity_OB_prel)
```

Model formula: mean_mitodensity ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of sex or age, so they were discarded from the final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S2. Preliminary results of the models testing for Mitochondrial Density in Optic Tecta.
```{r, results_preliminary_mitdensity_OT}
#| tbl-cap: "Preliminary results of the models testing for Mitochondrial Density in OT"
#| label: results_preliminary_mitdensity_OT
#
sum_m_mitdensity_OT_prel <- m_prel_mean_mitodensity_OT %>%
  dplyr::select(-starts_with("r_")) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_mitdensity_OT_prel)
```

Model formula: mean_mitodensity ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of sex or age, so they were discarded from the final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S3. Preliminary results of the models testing for Mitochondrial Potential in Olfactory Bulbs.
```{r, results_preliminary_potential_OB}
#| tbl-cap: "Preliminary results of the models testing for Mitochondrial Potential in OB"
#| label: results_preliminary_potential_OB
#
sum_m_potential_OB_prel <- m_prel_mean_potential_OB %>%
  dplyr::select(-starts_with("r_")) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_potential_OB_prel)
```

Model formula: mean_potential ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of sex or age, so they were discarded from the final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S4. Preliminary results of the models testing for Mitochondrial Potential in Optic Tecta.
```{r, results_preliminary_potential_OT}
#| tbl-cap: "Preliminary results of the models testing for Mitochondrial Potential in OT"
#| label: results_preliminary_potential_OT
#
sum_m_potential_OT_prel <- m_prel_mean_potential_OT %>%
  dplyr::select(-starts_with("r_")) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_potential_OT_prel)
```

Model formula: mean_potential ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of sex or age, so they were discarded from the final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S5. Preliminary results of the models testing for ROS Production in Olfactory Bulbs.
```{r, results_preliminary_ros_OB}
#| tbl-cap: "Preliminary results of the models testing for ROS Production in OB"
#| label: results_preliminary_ros_OB
#
sum_m_ros_OB_prel <- m_prel_mean_ros_OB %>%
  dplyr::select(-starts_with("r_")) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_ros_OB_prel)
```

Model formula: mean_ros ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of sex or age, so they were discarded from the final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S6. Preliminary results of the models testing for ROS Production in Optic Tecta.
```{r, results_preliminary_ros_OT}
#| tbl-cap: "Preliminary results of the models testing for ROS Production in OT"
#| label: results_preliminary_ros_OT
#
sum_m_ros_OT_prel <- m_prel_mean_ros_OT %>%
  dplyr::select(-starts_with("r_")) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_ros_OT_prel)
```

Model formula: mean_ros ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of sex or age, so they were discarded from the final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S7. Preliminary results of the models testing for DNA Damage in Olfactory Bulbs.
```{r, results_preliminary_dnadamage_OB}
#| tbl-cap: "Preliminary results of the models testing for DNA Damage in OB"
#| label: results_preliminary_dnadamage_OB
#
sum_m_dnadamage_OB_prel <- m_prel_mean_dnadamage_OB %>%
  dplyr::select(-starts_with("r_")) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_dnadamage_OB_prel)
```

Model formula: mean_dnadamage ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates an effect of sex and age, so they were included in the final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S8. Preliminary results of the models testing for DNA Damage in Optic Tecta.
```{r, results_preliminary_dnadamage_OT}
#| tbl-cap: "Preliminary results of the models testing for DNA Damage in OT"
#| label: results_preliminary_dnadamage_OT
#
sum_m_dnadamage_OT_prel <- m_prel_mean_dnadamage_OT %>%
  dplyr::select(-starts_with("r_")) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_dnadamage_OT_prel)
```

Model formula: mean_dnadamage ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of age, so it was discarded from the final models. However, we saw an effect of sex and we included it in our final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S9. Preliminary results of the models testing for Lipid Peroxidation in Olfactory Bulbs.
```{r, results_preliminary_peroxidation_OB}
#| tbl-cap: "Preliminary results of the models testing for Lipid Peroxidation in OB"
#| label: results_preliminary_peroxidation_OB
#
sum_m_peroxidation_OB_prel <- m_prel_mean_peroxidation_OB %>%
  dplyr::select(-starts_with("r_")) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_peroxidation_OB_prel)
```

Model formula: mean_peroxidation ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of sex, so it was discarded from the final models. However, we saw an effect of age and we included it in our final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S10. Preliminary results of the models testing for Lipid Peroxidation in Optic Tecta.
```{r, results_preliminary_peroxidation_OT}
#| tbl-cap: "Preliminary results of the models testing for Lipid Peroxidation in OT"
#| label: results_preliminary_peroxidation_OT
#
sum_m_peroxidation_OT_prel <- m_prel_mean_peroxidation_OT %>%
  dplyr::select(-starts_with("r_")) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_peroxidation_OT_prel)
```

Model formula: mean_peroxidation ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of sex, so it was discarded from the final models. However, we saw an effect of age and we included it in our final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S11. Preliminary results of the models testing for Detection Latency (t_D) of Chemical stimuli. 
```{r, results_preliminary_t_D_Chemical}
#| tbl-cap: "Preliminary results of the models testing for Detection Latency (t_D) of Chemical stimuli"
#| label: results_preliminary_t_D_Chemical
# 
sum_m_t_D_prel_Chem <- m_prel_t_D_Chemical %>%
  dplyr::select(-starts_with("r_")) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_t_D_prel_Chem)
```

Model formula: t_D~ motivation + cort:motivation + cort * temp + age_trial + sex + prey + (1|clutch) + (1|lizard_id).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of age, sex, familiarity with prey (prey), motivation, or the cort-motivation interaction, so they were discarded from the final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S12. Preliminary results of the models testing for Detection Latency (t_D) of Visual stimuli.
```{r, results_preliminary_t_D_Visual}
#| tbl-cap: "Preliminary results of the models testing for Detection Latency (t_D) of Visual stimuli"
#| label: results_preliminary_t_D_Visual
#
sum_m_t_D_prel_Vis <- m_prel_t_D_Visual %>%
  dplyr::select(-starts_with("r_")) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_t_D_prel_Vis)
```

Model formula: t_D~ motivation + cort:motivation + cort * temp + age_trial + sex + prey + (1|clutch) + (1|lizard_id).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of age, sex, familiarity with prey (prey), motivation, or the cort-motivation interaction, so they were discarded from the final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```





#### Results of the main models

Table S13. R^2 values of the definite models for both regions and stimuli.
```{r, table_bayesR2}
#| label: table_bayesR2
#| tbl-cap: "BayesR2 values of the definite models for both regions and stimuli."
#
data_bayes <- data.frame(
  Model = character(0),
  Mean = numeric(0),
  Error = numeric(0),
  Q2_5 = numeric(0),
  Q97_5 = numeric(0)
)
models <- c("mean_mitodensity_def_OB",
            "mean_potential_def_OB",
            "mean_ros_def_OB",
            "mean_dnadamage_def_OB",
            "mean_peroxidation_def_OB",
            "t_D_def_Chemical",
            "mean_mitodensity_def_OT",
            "mean_potential_def_OT",
            "mean_ros_def_OT",
            "mean_dnadamage_def_OT",
            "mean_peroxidation_def_OT",
            "t_D_def_Visual")
#
for (m in models){
  mod <- readRDS(here("output/models/", paste0(m, ".rds")))
  bayes <- bayes_R2(mod)
  data_bayes <- rbind(data_bayes, data.frame(
    Model = m,
    Mean = format_dec(bayes[1], 3),
    Error = format_dec(bayes[2], 3),
    Q2_5 = format_dec(bayes[3], 3),
    Q97_5 = format_dec(bayes[4], 3)
  ))
}
#
bayes_table_df <- data_bayes %>%
  mutate(Region = gsub(".*_", "", Model)    # Extract everything after the last "_"
  ) %>%
  mutate(Model = factor(Model,
                        levels = c("mean_mitodensity_def_OB",
                                  "mean_potential_def_OB",
                                  "mean_ros_def_OB",
                                  "mean_dnadamage_def_OB",
                                  "mean_peroxidation_def_OB",
                                  "t_D_def_Chemical",
                                  "mean_mitodensity_def_OT",
                                  "mean_potential_def_OT",
                                  "mean_ros_def_OT",
                                  "mean_dnadamage_def_OT",
                                  "mean_peroxidation_def_OT",
                                  "t_D_def_Visual"),
                        labels = c("m_def_mean_mitodensity_OB" = "Mit density",
                                  "m_def_mean_potential_OB" = "Mit potential",
                                  "m_def_mean_ros_OB" = "ROS",
                                  "m_def_mean_dnadamage_OB" = "DNA damage",
                                  "m_def_mean_peroxidation_OB" = "Peroxidation",
                                  "m_def_t_D_Chemical" = "Detection lat",
                                  "m_def_mean_mitodensity_OT" = "Mit density",
                                  "m_def_mean_potential_OT" = "Mit potential",
                                  "m_def_mean_ros_OT" = "ROS",
                                  "m_def_mean_dnadamage_OT" = "DNA damage",
                                  "m_def_mean_peroxidation_OT" = "Peroxidation",
                                  "m_def_t_D_Visual" = "Detection lat")),
      Region = factor(Region, levels = c("OB", "Chemical", "OT", "Visual"),
                      labels = c("OB" = "Olfactory bulbs",
                                "Chemical" = "Chemical",
                                "OT" = "Optic tecta",
                                "Visual" = "Visual"))) %>%
  dplyr::select(Region, Model, Mean, Error, Q2_5, Q97_5) %>%
  arrange(Region, Model)
#
#
# Create the table
#
## Table format
set_flextable_defaults(
 font.family = "Times New Roman",
 font.size = 10)
#
bayes_table <- flextable(bayes_table_df) %>%
  set_header_labels(
    Region = "Region/Stimulus",
    Mean = "Mean",
    Error = "Error",
    Q2_5 = "2.5%",
    Q97_5 = "97.5%") %>%
  align(align = "center", j = c(3:5), part = "body") %>%
  align(align = "center", j = c(1:5), part = "header") %>%
  flextable::compose(i = c(2:5,8:11), j = 1, value = as_paragraph(""), part = "body") %>% # To remove some of the values in the first column
  flextable::hline(i = 6, part = "body") %>% 
  autofit()
#
bayes_table
```

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S14. Results of the definitive models for Olfactory Bulbs/Chemical stimulus.
```{r, tbl-results_OB_table}
#| label: results_OB_table
#| tbl-cap: "Results of the models testing for Olfactory Bulbs."
#| tbl-name: "results_OB"
#| tbl-label: "results_OB"
source(here("R", "func.R"))
# 
# A) Refining the df summarizing the posteriors for OB/Chemical stimulus (post_OB)
post_OB_refined <- refine_post(post_OB) %>%
  arrange(Variable, Predictors)
#
# B) Create table
## Table format
set_flextable_defaults(
 font.family = "Times New Roman",
 font.size = 10)
#
OB_table <- flextable(post_OB_refined) %>%
  align(align = "center", j = c(3:5), part = "body") %>%
  align(align = "center", j = c(1:5), part = "header") %>%
  bold(~`PMCMC` < 0.05, j = c("PMCMC", "Estimate Mean", "95% CI", "Predictors"),
       bold = TRUE) %>%  # Bold when PMCMC is "<0.05"
  bold(~`PMCMC` <0.001, j = c("PMCMC", "Estimate Mean", "95% CI", "Predictors")) %>%  # Bold when PMCMC is "<0.001"
  flextable::compose(i = c(2:4,6:8,10:12,14:18,20:23,25:27), j = 1, value = as_paragraph(""), part = "body") %>% # To remove some of the values in the first column
  autofit()
#
OB_table
```

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S15. Results of the definitive models for Optic Tecta/Visual stimulus.
```{r, tbl-results_OT_table}
#| label: results_OT_table
#| tbl-cap: "Results of the models testing for Olfactory Bulbs."
#| tbl-name: "results_OT"
#| tbl-label: "results_OT"
source(here("R", "func.R"))
# 
# A) Refining the df summarizing the posteriors for OT/Visual stimulus (post_OT)
post_OT_refined <- refine_post(post_OT) %>%
  arrange(Variable, Predictors)
#
# B) Create table
## Table format
set_flextable_defaults(
 font.family = "Times New Roman",
 font.size = 10)
#
OT_table <- flextable(post_OT_refined) %>%
  align(align = "center", j = c(3:5), part = "body") %>%
  align(align = "center", j = c(1:5), part = "header") %>%
  bold(~`PMCMC` < 0.05, j = c("PMCMC", "Estimate Mean", "95% CI", "Predictors"),
       bold = TRUE) %>%  # Bold when PMCMC is "<0.05"
  bold(~`PMCMC` <0.001, j = c("PMCMC", "Estimate Mean", "95% CI", "Predictors")) %>%  # Bold when PMCMC is "<0.001"
  flextable::compose(i = c(2:4,6:8,10:12,14:17,19:22,24:26), j = 1, value = as_paragraph(""), part = "body") %>% # To remove some of the values in the first column
  autofit()
#
OT_table
```

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```






#### Main models diagnostics (plots)

```{r , plotmod_mitdensity_OB, out.width="70%", fig.align="center"}
#| label: plotmod_mitdensity_OB
#| caption: "Posterior predictive checks for the model of Mitochondrial Density in Olfactory Bulbs."
#
mod <- readRDS(here("output/models/mean_mitodensity_def_OB.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX3.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX3.png")
```

Fig S1. Posterior predictive checks for the model of Mitochondrial Density in Olfactory Bulbs.
Formula: mean_mitodensity ~ cort * temp + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_mitdensity_OT, out.width="70%", fig.align="center"}
#| label: plotmod_mitdensity_OT
#| caption: "Posterior predictive checks for the model of Mitochondrial Density in Optic Tecta."
#
mod <- readRDS(here("output/models/mean_mitodensity_def_OT.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX4.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX4.png")
```

Fig S2. Posterior predictive checks for the model of Mitochondrial Density in Optic Tecta.
Formula: mean_mitodensity ~ cort * temp + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_potential_OB, out.width="70%", fig.align="center"}
#| label: plotmod_potential_OB
#| caption: "Posterior predictive checks for the model of Mitochondrial Potential in Olfactory Bulbs."
#
mod <- readRDS(here("output/models/mean_potential_def_OB.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX5.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX5.png")
```

Fig S3. Posterior predictive checks for the model of Mitochondrial Potential in Olfactory Bulbs.
Formula: mean_potential ~ cort * temp + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_potential_OT, out.width="70%", fig.align="center"}
#| label: plotmod_potential_OT
#| caption: "Posterior predictive checks for the model of Mitochondrial Potential in Optic Tecta."
#
mod <- readRDS(here("output/models/mean_potential_def_OT.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX6.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX6.png")
```

Fig S4. Posterior predictive checks for the model of Mitochondrial Potential in Optic Tecta.
Formula: mean_potential ~ cort * temp + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_ros_OB, out.width="70%", fig.align="center"}
#| label: plotmod_ros_OB
#| caption: "Posterior predictive checks for the model of ROS Production in Olfactory Bulbs."
#
mod <- readRDS(here("output/models/mean_ros_def_OB.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX7.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX7.png")
```

Fig S5. Posterior predictive checks for the model of ROS Production in Olfactory Bulbs.
Formula: mean_ros ~ cort * temp + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_ros_OT, out.width="70%", fig.align="center"}
#| label: plotmod_ros_OT
#| caption: "Posterior predictive checks for the model of ROS Production in Optic Tecta."
#
mod <- readRDS(here("output/models/mean_ros_def_OT.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX8.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX8.png")
```

Fig S6. Posterior predictive checks for the model of ROS Production in Optic Tecta.
Formula: mean_ros ~ cort * temp + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_dnadamage_OB, out.width="70%", fig.align="center"}
#| label: plotmod_dnadamage_OB
#| caption: "Posterior predictive checks for the model of DNA Damage in Olfactory Bulbs."
#
mod <- readRDS(here("output/models/mean_dnadamage_def_OB.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX9.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX9.png")
```

Fig S7. Posterior predictive checks for the model of DNA Damage in Olfactory Bulbs.
Formula: mean_dnadamage ~ cort * temp + age_euthanasia + sex + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_dnadamage_OT, out.width="70%", fig.align="center"}
#| label: plotmod_dnadamage_OT
#| caption: "Posterior predictive checks for the model of DNA Damage in Optic Tecta."
#
mod <- readRDS(here("output/models/mean_dnadamage_def_OT.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX10.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX10.png")
```

Fig S8. Posterior predictive checks for the model of DNA Damage in Optic Tecta.
Formula: mean_dnadamage ~ cort * temp + sex + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_peroxidation_OB, out.width="70%", fig.align="center"}
#| label: plotmod_peroxidation_OB
#| caption: "Posterior predictive checks for the model of Lipid Peroxidation in Olfactory Bulbs."
#
mod <- readRDS(here("output/models/mean_peroxidation_def_OB.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX11.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX11.png")
```

Fig S9. Posterior predictive checks for the model of Lipid Peroxidation in Olfactory Bulbs.
Formula: mean_peroxidation ~ cort * temp + age_euthanasia + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_peroxidation_OT, out.width="70%", fig.align="center"}
#| label: plotmod_peroxidation_OT
#| caption: "Posterior predictive checks for the model of Lipid Peroxidation in Optic Tecta."
#
mod <- readRDS(here("output/models/mean_peroxidation_def_OT.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX12.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX12.png")
```

Fig S10. Posterior predictive checks for the model of Lipid Peroxidation in Optic Tecta.
Formula: mean_peroxidation ~ cort * temp + age_euthanasia + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_tD_Chemical, out.width="70%", fig.align="center"}
#| label: plotmod_tD_Chemical
#| caption: "Posterior predictive checks for the model of Detection Latency (t_D) in Chemical trials."
#
mod <- readRDS(here("output/models/t_D_def_Chemical.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX1.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX1.png")
```

Fig S11. Posterior predictive checks for the model of Detection Latency (t_D) in Chemical trials.
Formula: t_D~ cort * temp + motivation + cort:motivation + (1|clutch) + (1|lizard_id)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_tD_Visual, out.width="70%", fig.align="center"}
#| label: plotmod_tD_Visual
#| caption: "Posterior predictive checks for the model of Detection Latency (t_D) in Visual trials."
#
mod <- readRDS(here("output/models/t_D_def_Visual.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX2.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX2.png")
```

Fig S12. Posterior predictive checks for the model of Detection Latency (t_D) in Visual trials.
Formula: t_D~ cort * temp + (1|clutch) + (1|lizard_id)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```







#### Results of the multivariate models


Table S16. R^2 values of the multivariate models.
```{r, table_bayesR2_SEM}
#| label: table_bayesR2_SEM
#| tbl-cap: "BayesR2 values of the multivariate models"
#
data_bayes_SEM <- data.frame(
  Model = character(0),
  Response = character(0),
  Mean = numeric(0),
  Error = numeric(0),
  Q2_5 = numeric(0),
  Q97_5 = numeric(0)
)
#
models <- c("m_OB", "m_OT")  
for (m in models) {
  mod <- readRDS(here("output/m_SEM/", paste0(m, ".rds")))
  
  # Extract bayes_R2() for each response variable in the multivariate model
  bayes_df_SEM <- as.data.frame(bayes_R2(mod))
  bayes_df_SEM$Response <- rownames(bayes_df_SEM)  # Keep track of response variable names
  
  # Add model identifier and format values
  bayes_df_SEM <- bayes_df_SEM %>%
    mutate(
      Model = m,
      Mean = format_dec(Estimate, 3),
      Error = format_dec(`Est.Error`, 3),
      Q2_5 = format_dec(`Q2.5`, 3),
      Q97_5 = format_dec(`Q97.5`, 3)
    ) %>%
    dplyr::select(Model, Response, Mean, Error, Q2_5, Q97_5)
  
  # Append to the main data frame
  data_bayes_SEM <- rbind(data_bayes_SEM, bayes_df_SEM)
}
#
bayes_table_SEM_df <- data_bayes_SEM %>%
  mutate(Response = gsub("^R2", "", Response)) %>%
  mutate(Response = factor(Response,
                        levels = c("tD",
                                  "meandnadamage",
                                  "meanperoxidation",
                                  "meanros"),
                        labels = c("tD" = "Detection lat",
                                  "meandnadamage" = "DNA damage",
                                  "meanperoxidation" = "Peroxidation",
                                  "meanros" = "ROS")),
      Model = factor(Model, levels = c("m_OB", "m_OT"),
                      labels = c("OB" = "Olfactory bulbs / Chemical stimulus",
                                "OT" = "Optic tecta / Visual stimulus"))) %>%
  dplyr::select(Model, Response, Mean, Error, Q2_5, Q97_5) %>%
  arrange(Model, Response)
#
#
# 
## Table format
set_flextable_defaults(
 font.family = "Times New Roman",
 font.size = 10)
#
bayes_table_SEM <- flextable(bayes_table_SEM_df) %>%
  set_header_labels(
    Region = "Region/Stimulus",
    Mean = "Mean",
    Error = "Error",
    Q2_5 = "2.5%",
    Q97_5 = "97.5%") %>%
  align(align = "center", j = c(3:6), part = "body") %>%
  align(align = "center", part = "header") %>%
  flextable::compose(i = c(2:4,6:8), j = 1, value = as_paragraph(""), part = "body") %>% # To remove some of the values in the first column
  flextable::hline(i = 4, part = "body") %>% 
  autofit()
#
bayes_table_SEM
```

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```


Table S17. Results of multivariate models for OB/Chemical stimulus
```{r, table_sem_results_OB}
#| label: table_sem_results_OB
#| fig-cap: "Structural Equation Models for OB/Chemical stimulus"
#
# Table created from the df sem_results_OB (see above)
source(here("R", "func.R"))
#
# Modify database
table_semOB_df <- sem_results_OB %>%
  mutate(`Direct effects` = paste0(mean_direct_effects, " [", q5_direct, ", ", q95_direct, "]"),
         `Indirect effects` = paste0(mean_indirect_effects, " [", q5_indirect, ", ", q95_indirect, "]"),
         `Total effects` = paste0(mean_total_effects, " [", q5_total, ", ", q95_total, "]")) %>%
  dplyr::select(source, predictor_modulator, `Direct effects`, `Indirect effects`, `Total effects`) %>%
  mutate(
      predictor_modulator = case_when(
        predictor_modulator == "mean_mitodensity" ~ "Mitochondrial density",
        predictor_modulator == "mean_potential" ~ "Mitochondrial potential",
        predictor_modulator == "mean_dnadamage" ~ "DNA damage",
        predictor_modulator == "mean_peroxidation" ~ "Lipid peroxidation",
        predictor_modulator == "ROS" ~ "ROS",
        predictor_modulator == "cort" ~ "CORT",
        predictor_modulator == "age" ~ "Age",
        TRUE ~ predictor_modulator
      ),
      source = case_when(
        source == "det_results_semOB" ~ "Detection latency",
        source == "dna_results_semOB" ~ "DNA damage",
        source == "perox_results_semOB" ~ "Lipid peroxidation",
        source == "ros_results_semOB" ~ "ROS",
        TRUE ~ source
      ),
      `Direct effects` = case_when(`Direct effects` == "NaN [NA, NA]" ~ " - ", TRUE ~ `Direct effects`),
      `Indirect effects` = case_when(`Indirect effects` == "NaN [NA, NA]" ~ " - ", TRUE ~ `Indirect effects`),
      `Total effects` = case_when(`Total effects` == "NaN [NA, NA]" ~ " - ", TRUE ~ `Total effects`)) %>%
  rename(Predictor = predictor_modulator, Response = source) %>%
  mutate(Response = factor(Response, levels = c("Detection latency", "DNA damage", "Lipid peroxidation", "ROS")),
         Predictor = factor(Predictor, levels = c("CORT",
                                                "Age",
                                                "Mitochondrial density",
                                                "Mitochondrial potential",
                                                "ROS",
                                                "DNA damage",
                                                "Lipid peroxidation"))) %>%
  arrange(Response, Predictor)
#
# Table format
set_flextable_defaults(
 font.family = "Times New Roman",
 font.size = 10)
#
table_semOB <- flextable(table_semOB_df) %>%
  align(align = "center", part = "header") %>%
  flextable::compose(i = c(2:7, 9:11, 13:15, 17), j = 1, value = as_paragraph(""), part = "body") %>% # To remove some of the values in the first column
  flextable::hline(i = c(7, 11, 15), part = "body") %>% 
  autofit()
#
table_semOB
```

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```


Table S18. Results of multivariate models for OT/Visual stimulus
```{r, table_sem_results_OT}
#| label: table_sem_results_OT
#| fig-cap: "Structural Equation Models for OT/Visual stimulus"
#
# Table created from the df sem_results_OT (see above)
source(here("R", "func.R"))
#
# Modify database
table_semOT_df <- sem_results_OT %>%
  mutate(`Direct effects` = paste0(mean_direct_effects, " [", q5_direct, ", ", q95_direct, "]"),
         `Indirect effects` = paste0(mean_indirect_effects, " [", q5_indirect, ", ", q95_indirect, "]"),
         `Total effects` = paste0(mean_total_effects, " [", q5_total, ", ", q95_total, "]")) %>%
  dplyr::select(source, predictor_modulator, `Direct effects`, `Indirect effects`, `Total effects`) %>%
  mutate(
      predictor_modulator = case_when(
        predictor_modulator == "mean_mitodensity" ~ "Mitochondrial density",
        predictor_modulator == "mean_potential" ~ "Mitochondrial potential",
        predictor_modulator == "mean_dnadamage" ~ "DNA damage",
        predictor_modulator == "mean_peroxidation" ~ "Lipid peroxidation",
        predictor_modulator == "ROS" ~ "ROS",
        predictor_modulator == "cort" ~ "CORT",
        predictor_modulator == "age" ~ "Age",
        predictor_modulator == "sex" ~ "Sex",
        predictor_modulator == "cort_cold" ~ "CORT when Cold",
        predictor_modulator == "cort_hot" ~ "CORT when Hot",
        TRUE ~ predictor_modulator
      ),
      source = case_when(
        source == "det_results_semOT" ~ "Detection latency",
        source == "dna_results_semOT" ~ "DNA damage",
        source == "perox_results_semOT" ~ "Lipid peroxidation",
        source == "ros_results_semOT" ~ "ROS",
        TRUE ~ source
      ),
      `Direct effects` = case_when(`Direct effects` == "NaN [NA, NA]" ~ " - ", TRUE ~ `Direct effects`),
      `Indirect effects` = case_when(`Indirect effects` == "NaN [NA, NA]" ~ " - ", TRUE ~ `Indirect effects`),
      `Total effects` = case_when(`Total effects` == "NaN [NA, NA]" ~ " - ", TRUE ~ `Total effects`)) %>%
  rename(Predictor = predictor_modulator, Response = source) %>%
  mutate(Response = factor(Response, levels = c("Detection latency", "DNA damage", "Lipid peroxidation", "ROS")),
         Predictor = factor(Predictor, levels = c("CORT when Cold",
                                                "CORT when Hot",
                                                "Age",
                                                "Sex",
                                                "Mitochondrial density",
                                                "Mitochondrial potential",
                                                "ROS",
                                                "DNA damage",
                                                "Lipid peroxidation"))) %>%
  arrange(Response, Predictor)
#
# Table format
set_flextable_defaults(
 font.family = "Times New Roman",
 font.size = 10)
#
table_semOT <- flextable(table_semOT_df) %>%
  align(align = "center", part = "header") %>%
  flextable::compose(i = c(2:9, 11:15, 17:21, 23), j = 1, value = as_paragraph(""), part = "body") %>% # To remove some of the values in the first column
  flextable::hline(i = c(9, 15, 21), part = "body") %>% 
  autofit()
#
table_semOT
```


