---
title: "The effect of prenatal environment on brain metabolic function and perception in a lizard"
docx: 
csl: "./bib/proceedings-of-the-royal-society-b.csl"
bibliography: "./bib/refs.bib"
reference-doc: "./bib/tmpl.docx"
execute:
  echo: false
  error: false
  cache: false
  warning: false
link-citations: true
crossref:  
  fig-title: Fig    # (default is "Figure")
  title-delim: —     # (default is ":")
  fig-prefix: Fig.   # (default is "Figure")
  tbl-prefix: Tab.   # (default is "Table")
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
pacman::p_load(tidyverse, flextable, emmeans, DHARMa, brms, here, ggplot2, lme4, zoo, lmerTest, broom, tidybayes, ggh4x, cowplot, fitdistrplus, MASS, goftest, forcats, nortest, fitdistrplus, ggh4x, PupillometryR, png, grid, remotes, ggthemes, bayestestR, HDInterval, DiagrammeR, magick)
```

```{r, cleandata}
#| label: cleandata
# Obtain the main df using "./R/1_data_process.R"
source(here("R", "data_process.R"))
```

```{r, sampleSize}
#| label: sampleSize
# List with the sample sizes from the main database.
source(here("R", "func.R"))
#
hormone <- c("CORT", "Control")
temperature <- c("Cold", "Hot")
#
n_list <- list()
#
for(k in 1:length(hormone)){
  for(l in 1:length(temperature)){
    list_name <- paste0(hormone[k], "_", temperature[l])
    n_list[[list_name]] <- sample(df = clean_df, corti = hormone[k], therm = temperature[l])
  }
}
#
```

```{r, countclutches}
#| label: countclutches
# Count the number of clutches per species
#
clutches <- clean_df %>% 
  distinct(clutch) %>% 
  nrow()
```

Pablo Recio^1^,$\ddagger$ , Dalton C. Leibold^1^, Ondi L. Crino^1,2^, Christopher R. Friesen^3,4^, Daniel W.A. Noble^1^

^1^ Division of Ecology and Evolution, Research School of Biology, The Australian National University, Canberra, ACT 2601, Australia  
^2^ Flinders University, College of Science and Engineering, Bedford Park, SA 5042, Australia  
^3^ University of Wollongong, Wollongong, NSW 2500, Australia   
^4^ Environmental Futures University of Wollongong, Wollongong, NSW 2500, Australia
$\ddagger$ Corresponding author: pablo.reciosantiago@anu.edu.au  

ORCID: 

Pablo Recio ORCID: 0000-0002-5890-0218  
Dalton C. Leibold ORCID: 0000-0001-9645-2033  
Ondi L. Crino ORCID: 0000-0001-5700-1387  
Christopher R. Friesen ORCID: 0000-0001-5338-7454  
Daniel W.A. Noble ORCID: 0000-0001-9460-8743  

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

## Abstract
Cognitive processes such as the ability to perceive prey, are crucial for survival and reproduction. However, early-life conditions like stress-related hormones or thermal environments, can shape cognitive abilities by influencing brain structure and function. Mitochondrial physiology is thought to be a central mechanism underlying these effects. Here, we investigated the combined influence of prenatal corticosterone (CORT) — a key stress hormone in reptiles — and incubation temperature on mitochondrial function and prey detection in the delicate skink (_Lampropholis delicata_). We manipulated egg CORT levels and incubation temperature, then assessed the ability of lizards to detect chemical and visual prey stimuli. Using flow cytometry, we measured metabolic function, reactive oxygen species (ROS) production, and oxidative stress in the olfactory bulbs and optic tecta — two brain regions involved in sensory processing. We predicted that CORT exposure and high temperatures would interact to shape perception of prey via changes in mitochondrial respiration and oxidative damage. While metabolic function remained robust to early life conditions, CORT and temperature interacted to influence oxidative stress in the optic tecta but not the olfactory bulbs. Additionally, CORT-treated lizards responded faster when presented with chemical cues but not visual stimuli. Our findings suggest that prenatal conditions can have lasting effects on brain physiology and cognition, though the role of mitochondrial function in these processes remains unclear. Future research should explore alternative mechanisms linking early-life stress, cell metabolism, and cognitive performance.  

## Introduction

Cognition encompasses the ways in which animals acquire, process, and store information, enabling perception, learning, memory, and decision-making [@shettleworth]. It is essential for survival and reproduction, allowing individuals to adapt to changing environments [@dukas_evolutionary_2004]. However, cognitive abilities can vary considerably between individuals, with differences arising from genetic factors, environmental conditions, or a combination of both [@sakata_neural_2000; @dukas_evolutionary_2004]. The prenatal environment, in particular, plays a critical role in shaping brain development and cognition across a wide range of species [@sakata_neural_2000; @zhu_prenatal_2004; @crino_corticosterone_2014-learn; @amiel_effects_2017]. However, the impact of early-life environments has primarily been studied in the context of learning and memory [@zhu_prenatal_2004; @crino_corticosterone_2014-learn; @bebus_associative_2016; @abayarathna_effects_2020], neglecting how other equally important cognitive domains might be affected [but see @burger_antipredator_1998; @vila_pouca_quantity_2019]. In particular, perception is an often overlooked, but fundamental skill [@shettleworth]. Perceiving different stimuli is essential for locating food, avoiding predators, or interacting with conspecifics [@burger_antipredator_1998; @desfilis2003stimulus; @recio2023conspecific]. Variations in the ability to detect or recognize relevant stimuli can have significant consequences for an individual’s fitness [@pyke1984optimal]. For example, visual acuity in the bluegill sunfish (_Lepomis macrochirus_) allow animals to detect prey at large distances, which can increase their foraging efficiency and energy intake [@hairston1982fish]. Therefore, understanding how prenatal conditions affect the ability to detect prey can be important to understanding the broader consequences of early-life environments on fitness.   

Prenatal environments influence cognitive abilities because the brain is particularly sensitive to environmental inputs during early stages of development [@zhu_prenatal_2004]. Early-life conditions can shape cognition by altering gene expression [@zhou2020effects], neurotransmitter production [@amani2021perinatal], or brain structure and function [@amiel_effects_2017]. Long-lasting effects on energy production and oxidative stress in the brain may be a key mechanism by which cognitive function is impacted by developmental environments [@siegel1994basic; @du_dynamic_2009; @picard_mitochondria_2014; @picard_energetic_2018]. Given the high energetic demands of cognitive processes [@mcnay_decreases_2000; @mann_coupling_2021; @alexandrov_neuronal_2022], cognitive performance is expected to depend on efficient mitochondrial respiration. Additionally, high cognitive abilities are typically associated with increased neuron density and functionality [@lefebvre_taxonomic_2011; @amiel_effects_2017], both of which can be impaired by excessive reactive oxygen species (ROS) production and oxidative stress [@finkel_oxidants_2000; @zhu_prenatal_2004; @du_dynamic_2009; @gong_chronic_2011; @hoffmann_mitochondrion_2018]. For instance, Hara et al. (2014) found that performance in visuospatial working-memory tasks correlate negatively with the number of round-shaped mitochondria — associated with higher oxidative stress — per presynaptic terminal. In conclusion, findings from different studies suggest that mitocondrial activity can be essential in shaping cognitive abilities. Thus, understanding how early-life conditions affect mitochondrial physiology may provide insights into the mechanisms underlying cognitive performance.   

Mitochondria are highly responsive to environmental conditions during early development, with potential short-term and long-lasting consequences [reviewed in @gyllenhammer2020developmental]. For example, environmental cues such as external conditions or hormone exposure can cause immediate disruptions to metabolic function, triggering cascading effects on oxidative stress that may persist leter in life [reviewed in @gyllenhammer2020developmental]. Among the range of environmental factors that can shape mitochondrial physiology, some exert particularly strong and consistent effects. Stress-related hormones and temperature are particularly relevant for mitochondrial function due to their strong effects on metabolic processes [@sapolsky_how_2000; @stier2022experimental; @crino2024eggs]. Under stressful situations, animals instigate adaptive physiological and behavioural adjustments that involve increases in glucocorticoids (GCs), which are also important metabolic regulators [@sapolsky_how_2000]. Similarly, temperature plays a prominent role in regulating metabolic activity in ectotherms [@stier2022experimental; @crino2024eggs]. In fact, GC elevations or changes in the thermal environment during early development have profound and sustained effects on mitochondrial respiration efficiency or oxidative stress [@zhu_prenatal_2004; @song2009prenatal; @costantini2011meta; @haussmann_embryonic_2012; @treidel2016temperature; @stier2022experimental; @crino2024eggs]. However, how the early environment influences mitochondrial physiology and its associated cognitive consequences remains largely unknown outside of mammals [see @chaudhari2022early for a review]. In particular, whether and how these interactions affect perceptual abilities, such as prey detection, is still largely unexplored.     

Here, we investigated the combined effects of prenatal temperature and corticosterone (CORT) - the main GC in reptiles - on mitochondrial physiology and prey detection in a lizard (_Lampropholis delicata_). We manipulated egg CORT levels and incubation in a fully factorial design. We then assessed hatchling prey detection ability and quantified metabolic function in brain regions related to processing chemical and visual cues. We hypothesized that prenatal CORT exposure and the incubation thermal environment would influence metabolic function and oxidative stress in the brain [@zhu_prenatal_2004; @song2009prenatal; @costantini2011meta; @haussmann_embryonic_2012; @treidel2016temperature; @stier2022experimental; @crino2024eggs], with significant repercussions on cognition [@zhu_prenatal_2004; @hara_presynaptic_2014]. We predicted that metabolic deficiencies or increases in oxidative stress and damage would result in lower cognitive abilities (i.e. longer time to detect prey) [@picard_energetic_2018; @alexandrov_neuronal_2022]. Furthermore, we predicted prenatal conditions to have region-dependent effects on mitochondrial function [@coomber_independent_1997] that would lead to stimulus-specific differences in prey detection.   

## Methods

#### Animal husbandry  
*Breeding colony* -- The lizards tested came from a breeding colony established in the laboratory in 2019. The colony consisted of 270 adults of *L. delicata* housed in plastic containers (41.5 L x 30.5 W x 21 H cm) with six lizards (two males and four females) per enclosure. Enclosures were provided with non-stick matting, shelter, and several small water dishes. Water was given daily, and lizards were fed approx. 40 mid-size crickets (_Acheta domestica_) per enclosure three days a week. Crickets were dusted with calcium weekly and multivitamin and calcium biweekly. Room temperatures were set to 22-24 ºC, but to ensure a temperature gradient, we provided the enclosures with a heat chord and a heat lamp following a 12 h light:12 h dark cycle keeping warm side of enclosures is usually at 34 ºC.

*Egg collection and incubation* -- Between mid-October 2022 and the end of February 2023, we provide females with a place to lay the eggs by placing a small box (12.5 L x 8.3 W x 5 H cm) with moist vermiculite in one side of the communal enclosures. These boxes were checked three days a week for eggs. After collection, we measured the length and width of eggs with a digital caliper to the nearest 0.1 mm and weighed them with a digital scale (± 0.001 g). Eggs were treated with either CORT or a vehicle control (see CORT and temperature manipulation below) and placed in individual cups (80 mL) with moist vermiculite (12 parts water to 4 parts vermiculite). Cups were covered with cling wrap to retain moisture and left at one of two different incubation temperatures (see CORT and temperature manipulation below) until hatching.

*Hatchlings* -- Incubators were checked three times a week for hatchlings. We measured and weighted lizards immediately after hatching. We used a ruler to measure snout-vent length (SVL) and tail length (TL) to the nearest mm, and a digital scale to measure mass (± 0.001 g). We then placed hatchlings in individual enclosures (18.7L x 13.2W x 6.3H cm) and provided them with nonstick matting and a small water dish until the beginning of the experiment. During this period, lizards were given water daily and received 3-6 small *A. domestica* crickets three times a week. All care otherwise follows similar protocols to adults (see above).  
 
#### CORT and Temperature manipulation

To test the interactive effects of CORT and incubation temperature, we manipulated CORT concentrations in eggs and incubated them under one of two temperature regimes (see @fig-Methods A). We used a partial split clutch design where eggs from a given clutch were distributed equally across the four treatments when clutch sizes were larger than four and randomly across treatments when less than four. Eggs were topically supplied with either: a) 5 µL of crystalline corticosterone (Sigma, Cat. No. C2505) dissolved in 100% ethanol at a final 10 pg CORT/mL concentration (CORT treatment), or b) an equal volume of 100% Ethanol (Control treatment). We selected doses based on our previous study where CORT treatment increased mean yolk CORT levels by approximately 2 standard deviations above the mean natural concentration [@crino2024eggs]. Eggs were then incubated at either cold  (23 ± 3 ºC) or hot (28 ± 3 ºC) incubation temperatures in a 2x2 factorial design (Fig. 1 A). These temperatures are within the natural limits in _L. delicata_ [@cheetham2011embryonic].  

#### Prey discrimination tests
Two weeks before we started the tests (see below), lizards were moved to the experimental arena (see Fig. 1) for acclimatization. The arenas were individual medium size (41 L x 29.7 W x 22 H cm) plastic containers with a shelter (9 L x 6 W x 1.5 H cm) on one of the extremes and a water dish in the middle of the arena. Arenas were placed in two rooms on six racks, each with its own CCTV system (device model DVR-HP210475) that allowed us to record lizard behaviour during the experiment (see details below). The number of lizards per treatment in each rack was counterbalanced to control for any effect of the room or the position of the lizard on the rack. During acclimatization, lizards were fed with only one cricket per day dusted with calcium and multivitamin, and water was supplied _ad libitum_. We provided a temperature gradient by means of a heat cord and heat lamps in a 12 h light: 12 h dark cycle. The room temperature was set to between 22-24 Celsius. After the tests, animals were euthanized and metabolic function was analyzed in various brain regions (see Brain mitochondrial activity protocol below).

The experiment involved presenting lizards with chemical and visual stimuli from different familiar and unfamiliar prey, then recording and analyzing their behaviour towards each stimulus (@fig-Methods C). We used crickets (_A. domestica_) as the familiar prey and mealworm larvae (_Tenebrio molitor_) as the unfamiliar prey. We expected to see differences between known and unknown prey because previous experience may influence stimuli perception through habituation or sensitisation [@burger_effects_1990; @burger_effects_1991; @desfilis2003stimulus], and we included familiarity with the prey as a factor in our analyses (see below).  

Each stimulus was presented inside a transparent plastic vessel containing a white, two-chambered device (see @fig-Methods B) made of polylactic acid (PLA). In chemical trials, the prey was placed in the closed chamber at the back of the device, making it invisible to the lizard, while in visual trials, the prey was placed in the front chamber. Holes in both the device and the front sides of the transparent vessel (see @fig-Methods B, C) allowed chemical cues to be released; however, these holes were sealed with silicone in the visual trials. To increase the availability of chemical cues, we glued a piece of filter paper (left for at least 8 hours in one of the prey's enclosures: _A. domestica_ or _T. molitor_) to the device during chemical trials. In visual trials, the filter paper was placed in an empty box for the same duration under identical conditions. In both chemical and visual trials, the prey remained inside the vessel to control for potential acoustic cues. The order of stimulus presentation was counterbalanced across treatments.  

Each trial began by placing the experimental device at the side of the arena opposite to the shelter (see arena in @fig-Methods A), and then removing the shelter. The water cup had already been removed. We recorded the lizard's behaviour for approximately one hour. We assessed lizards' ability to detect each stimulus ('Detection latency') by recording the time from when the lizard resumed normal activity (i.e., walking for at least 5 consecutive seconds; T~0~ in @fig-Methods D) until the first interaction with the stimulus (T~D~ in @fig-Methods D). Lizards were considered to have interacted with the object when the lizard touched the front of the vessel or the filter paper with its snout for more than five consecutive seconds.   

To control for potential differences in hunger levels, all lizards were fasted for two days before the experiment, a period considered harmless for this species [@young2022physiological]. After each trial, the lizards were also given a cricket to assess their motivation to forage. The cricket was left in the enclosure for one hour, and we recorded whether the lizard ate it (recorded as 1) or not (recorded as 0). In `r sum(is.na(clean_df$motivation))` videos, the camera stopped recording before the end of the motivation test (T~f~ in @fig-Methods D), so motivation was recorded as NA. We used their performance in the motivation test as a covariate in the analyses (see below).   

All trials were conducted between 1100 and 1300 h, when the lizards were most active. To control for potential effects of neophobia, we simulated test conditions for two days prior to the experiment by removing the shelter and water cup, and exposing the subjects to the vessel without a stimulus. This simulation lasted for 1 hour at the same time of day as the tests, but no behavior was recorded.  

```{r, fig-Methods}
#| label: fig-Methods
#| fig-cap: "Scheme of our experimental design. In panel A, we show the different stages of our experiment and the main manipulations. In panel B, we show the experimental device used to present the stimuli in the behavioural tests. Here, F indicates the front of the device, and Bk the back. In panel C, we show the experimental setup for the prey discrimination tests. In panel D, we show the relevant times from our behavioural tests."
#
knitr::include_graphics("./Others/Methods.png")
```


#### Brain metabolic function

_Brain dissection and homogenization_: Two months after the completion of the tests, we euthanized lizards using an injectable anaesthetic followed by decapitation. We injected intraperitoneally 10 mg/kg of a 10 mg/mL alfaxan solution and then, after several minutes, we evaluated the lizard’s righting response and pinching reflex in one of the front limbs. Lizards without responses were decapitated with surgical scissors. This protocol was approved by the Animal Ethics Committee of the Australian National University (Protocol number: A2022/33). After decapitation, the head was opened and the brain was dissected. We extracted two main regions of the brain, the olfactory bulbs and the optic tecta, as they are associated with chemical and visual perception in lizards [@wyneken2007reptilian]. Both regions were transferred immediately to 1.5mL centrifuge tubes containing 100µL of 1X phosphate buffered saline (PBS).

Tissue suspented in PBS was then homogenized. For the olfactory bulbs, the tissue was mechanically homogenized by placing the tissue in the well of a 100 µm mesh filter (pluriStrainer) affixed atop a 1.5 mL centrifuge tube, then mashed with the rubber end of an insulin syringe stopper. The resulting olfactory bulb homogenate was then rinsed through the filter with 1 mL of cold 1XPBS. Optic tecta were mechanically homogenized the same way as olfactory bulbs, but were first enzymatically digested by incubating the tissue in 100µL of 125 U/mL collagenase (type II).

Homogenates were split among two aliquots: one was used fresh to measure mitochondrial density, membrane potential - a metric of metabolic capacity [@martinez2016tca] - and ROS, while the other one was cryopreserved for later measurements of DNA damage and lipid peroxidation. Cryopreservation was made by suspending the homogenates in 1 mL solution of 1% Neutral-Buffered Formalin, 1X Tris-EDTA, and 10% DMSO, then stored at -20 °C until oxidative damage assays.

_Metabolism and ROS_: Fresh homogenate suspensions were stained with 5 µL of a fluorescent probe mix containing equal parts 5 µM MitoTracker Deep Red FM, 2.5 µM MitoTracker Orange CMTMRos, and 50 µM MitoSOX Red. We used these fluorescent probes as indicators of mitochondrial density, metabolic capacity, and superoxide (ROS) production, respectively. We also added 10 µg/mL Hoechst 33342 Nuclear Viability Dye to each sample, which we used to distinguish live, viable, intact cells from cellular debris. Within two hours after dissection, these samples were analyzed by flow cytometry (Becton Dickson LSRFortessa X-20).

_Oxidative Damage_: Assays of oxidative damage from cryopreserved samples were performed 61 weeks after the initial processing and analysis of fresh samples. On the day of oxidative damage assays, we rapidly thawed frozen samples, removed the cryopreservation solution (see above), and resuspended samples in 1 mL warm 1X Tris-EDTA. Afterward, the Tris-EDTA was removed, and samples were resuspended in 200 µL of warm 1X PBS containing 10 µg/mL Hoechst 33342 Nuclear Viability Dye (for cell viability) and 100 µM BODIPY 665/676 Lipid Peroxidation Sensor (to measure lipid peroxidation). Following staining, we permeabilized the cell membranes incubating the samples in 200 µL warm 1X PBS containing 20 µM digitonin. Following permeabilization, we stained the samples with 20 µL of 70 µM 8-OHdG Polyclonal Antibody to measure oxidative damage on DNA. We left the homogenate overnight (~12 hours) at 4 ºC. The following day we counterstained the cells with 20 µL of 100 µg/mL H+G Goat Anti-Rabbit Conjugate Antibody with Alexa-Fluor 488 and analyze the samples in the flow cytometer.

_Flow Cytometry_: Flow cytometry assays were performed using a Becton Dickson LSRFortessa X-20 flow cytometer with the default wavelength filters on detectors. The detectors and voltage settings used in data acquisition for each were determined during pilot trials and kept consistent throughout the experiment. Data was imported into FlowJo (v. 10.1) for processing. We obtained the mean fluorescent intensity for mitochondrial density, metabolic capacity, ROS production, DNA damage, and lipid peroxidation. For further details on the homogenization, staining, or flow cytometry assays, see Methods: flow cytometry in Supplementary Material. We validated that our homogenates contained neurons in a pilot study using dyes specifically targeting neuronal nuclei (See _Brain validation in Supplementary Material_). This pilot study also ensured that our gating strategy identified these neurons using Flow cytometry.    

#### Statistical analyses
We performed the analyses for each brain region/stimulus and each variable (mitochondrial density, metabolic capacity, ROS, DNA damage, lipid peroxidation, and detection latency) separately. We first fit a set of preliminary models for all the interest variables (detection latency, mitochondrial density, metabolic capacity, ROS, DNA damage, and lipid peroxidation) where we included the main effects of hormone (CORT versus Control), temperature (Cold versus Hot), and their interaction. Models also included the sex and age of the lizards at the time where the trials started (for detection latency) or when the lizards were euthanized (for all mitochondrial-related variables). For detection latency, we also included previous experience with the prey (familiar versus unknown), their performance on the motivation test [if they ate the cricket (1), or not (0)], and the interaction between CORT and motivation as fixed effects. We included the interaction between CORT and motivation because CORT can impact appetite [@conde2018stress]. All models included clutch identity as a random factor to account for clutch effects. For models of detection latency we also included a random effect of lizard identity because of our repeated measures design. The structure and results of these models are provided on Tables S1-S12 of the Supplementary Material. After the preliminary models, we simplified models by re-fitting to exclude factors that were not significant. However, our models always included the main interest factors: CORT, temperature and their interaction. Random factors remain the same for the final models. All the response variables were mean centered and standardized by dividing by two times the standard deviation [@gelman2008scaling]. Before standardization, mitochondrial density, DNA damage, lipid peroxidation, and detection latency were log-transformed.

All models were fit using using the package _brm_ which insterfaces with Stan [@stan] in R (version 4.4. 0) [@R]. The error structure was modelled assuming a Gaussian distribution for all variables. We ran four parallel MCMC chains of 8000 iterations for each model, with a warmup period of 2000 iterations. To test for differences between treatments, we made contrasts between treatments using the posterior distribution of relevant parameters. Significance was assessed by using the posterior distributions of parameter estimates and contrasts to test whether were they different from zero [@endo2019introduction]. We considered an effect statistically significant if pMCMC < 0.05.  

To further explore the relationships between mitochondrial physiology and detection latency, we used a Structural Equation Modelling (SEM) approach. We fit a multivariate brm from stan [@stan] in R (version 4.4.0) [@R] for each brain region/stimulus separately. We included in the model all the variables of interest and their interactions structured following a specific set of hypotheses (see @fig-sem_results_OB and @fig-sem_results_OT). Because experience with prey did not affect lizards’ behaviour (see Tables S11, S12), to reduce the complexity of the models, we averaged lizards detection latency across both types of prey and excluded lizard identity from the random factors. Clutch identity was included as a random factor for all variables. For our SEM model, the error structure was modelled assuming a Gaussian distribution and we estimated residual correlations among all variables. 

We obtained direct, indirect, and total effects from posterior distributions of parameters estimated in the multivariate models. Direct effects represent the posterior estimates of a predictor’s effect on the response variable, while indirect effects were computed as the product of the direct effects along the path [@kline2005principles]. Total effects are the sum of direct and indirect effects.    

## Results
Our final sample size for mitochondrial assays was 80 lizards from a total of `r clutches` clutches (n = 20 per treatment). Each lizard was subjected to 4 tests for a total of n = 320 behavioural observations (n = `r sum(is.na(clean_df$t_D))` with missing data). 

```{r, models_mitochondrial}
#| label: models_mitochondrial
#
# Run models mitochondrial physiology (each region separately)
#
var_m <- c("mean_mitodensity", "mean_potential", "mean_conpotential", "mean_ros", "mean_conros", "mean_dnadamage", "mean_peroxidation")
regions <- c("OB", "OT")
for (p in var_m){
  for (h in regions){
    if (h == "OB"){
      df <- clean_df %>% filter(region == "OB")
      l <- "OB"
      if (p %in% c("mean_mitodensity", "mean_potential", "mean_ros")){
        formula <- paste0(p, "~ cort*temp + (1|clutch)")
      } else if (p == "mean_dnadamage"){
        formula <- paste0(p, "~ cort*temp + age_euthanasia + sex + (1|clutch)")
      } else {
        formula <- paste0(p, "~ cort*temp + age_euthanasia + (1|clutch)")
      }
    } else {
      df <- clean_df %>% filter(region == "OT")
      l <- "OT"
      if (p %in% c("mean_mitodensity", "mean_potential", "mean_ros")){
        formula <- paste0(p, "~ cort*temp + (1|clutch)")
      } else if (p == "mean_dnadamage"){
        formula <- paste0(p, "~ cort*temp + sex + (1|clutch)")
      } else {
        formula <- paste0(p, "~ cort*temp + age_euthanasia + (1|clutch)")
      }
    }

    pmodel_name <- paste0("m_def_", p, "_", h)
    assign(pmodel_name, fit_m(df = df,
                              cat = "def",
                              var = p,
                              formula = formula,
                              fam = gaussian(),
                              label = l,
                              refit = FALSE),
          envir = .GlobalEnv)  # Assign to the global environment
  }
} 
```

```{r, models_behaviour}
#| label: models_behaviour
# Fitting the model and extraction of posteriors for Detection Latency (log-normal).
source(here("R", "func.R"))
#
#
## Run model behaviour for both stimuli separately
#
beh_df <- clean_df
stimuli <- c("Chemical", "Visual")
for (s in stimuli){
  df_b <- beh_df %>% filter(stimulus == s)
  formula_t_D <- t_D ~ cort*temp + (1|clutch) + (1|lizard_id)

  pmodel_name <- paste0("m_def_t_D_", s)
  assign(pmodel_name, fit_m(df = df_b,
                             cat = "def",
                             var = "t_D",
                             formula = formula_t_D,
                             fam = gaussian(),
                             label = s,
                             refit = FALSE),
          envir = .GlobalEnv)  # Assign to the global environment
}
```


**____________________FROM HERE____________________**
```{r, organise_posteriors}
#| label: organise_posteriors
#
# Organising the posteriors of the previous models to fit the tables below
#
source(here("R", "func.R"))
#
# Databases for each region/stimulus
post_OB <- data.frame()
post_OT <- data.frame()
# Names posteriors:
region <- c("OB", "OT")
names_OB <- c("m_def_mean_mitodensity_OB", "m_def_mean_potential_OB", "m_def_mean_ros_OB", "m_def_mean_dnadamage_OB", "m_def_mean_peroxidation_OB", "m_def_t_D_Chemical")
names_OT <- c("m_def_mean_mitodensity_OT", "m_def_mean_potential_OT", "m_def_mean_ros_OT", "m_def_mean_dnadamage_OT", "m_def_mean_peroxidation_OT", "m_def_t_D_Visual")
#
# Organising the results
for (r in region) {
  model_select <- get(paste0("names_", r))   
  for (pos in model_select) {
    model <- get(pos)      # Get the model from the global environment
    post_result <- tidy_post(model)        # Apply tidy_post to each model
    # Add a new column to identify the region and model
    post_result$Region <- r
    post_result$Model <- pos
    # Append to the appropriate data frame
    if (r == "OB") {
      post_OB <- bind_rows(post_OB, post_result)
    } else {
      post_OT <- bind_rows(post_OT, post_result)
    }
  }
}
```

```{r, values_posteriors}
#| label: values_posteriors
#
# Extracting the posteriors for the models and the values of interest. Here, I am creating dfs for each of the variables with the values for all the prenatal conditions to make contrasts easier to write.
#
source(here("R", "func.R"))
#
# A) Olfactory bulbs/Chemical stimulus
#
MD_OB <- post_values(m_def_mean_mitodensity_OB, "none")
MP_OB <- post_values(m_def_mean_potential_OB, "none")
ROS_OB <- post_values(m_def_mean_ros_OB, "none")
DNA_OB <- post_values(m_def_mean_dnadamage_OB, "none")
LP_OB <- post_values(m_def_mean_peroxidation_OB, "none")
DET_OB <- post_values(m_def_t_D_Chemical, "none")
#
# B) Optic tecta/Visual stimulus
MD_OT <- post_values(m_def_mean_mitodensity_OT, "none")
MP_OT <- post_values(m_def_mean_potential_OT, "none")
ROS_OT <- post_values(m_def_mean_ros_OT, "none")
DNA_OT <- post_values(m_def_mean_dnadamage_OT, "sex")
LP_OT <- post_values(m_def_mean_peroxidation_OT, "none")
DET_OT <- post_values(m_def_t_D_Visual, "none")
```

#### Does prenatal CORT and temperature affect mitochondrial function and oxidative stress in the brain?
Models explained between 37.8 to 50.4 % of the variation in mitochondrial function and 39.9 to 59 % for oxidative stress (see Table S1).

_Olfactory bulbs_: age significantly increased DNA damage and lipid peroxidation (Table S3). However, we did not find any significant effects of CORT, temperature, or their interaction on mitochondrial function nor oxidative stress in the olfactory bulbs (see @fig-results_energy, @fig-results_oxidative, and Table S2).  

```{r, fig-results_energy}
#| label: fig-results_energy
#| fig-cap: "Estimates of mitochondrial density (A, C) and metabolic capacity (B, D) in the olfactory bulbs (A, B) and optic tecta (C, D) of L. delicata hatchlings as a function of the different prenatal conditions. Black dots indicate the posterior mean, and the bars represent the SD of the estimates. The y-axis represents the posterior estimates of the variable of interest, and the x-axis represents the different prenatal conditions. Lines with asterisks represent significant differences between groups based on pMCMC values (pMCMC < 0.05), no lines indicate no significant differences."
#| fig-name: "fig-results_energy"
#
source(here("R", "func.R"))
#
# A) Plotting the results for OB/Chemical stimulus using the df from before
plot_density_OB <- plotting(MD_OB, "Mit density")
plot_potential_OB <- plotting(MP_OB, "Mit potential")
#
fig_OB_energy <- plot_grid(plot_density_OB, NULL, plot_potential_OB, NULL,
                    nrow = 1, rel_widths = c(0.9, 0.1, 0.9, 0.3))
#
# B) Plotting the results for OT/Visual stimulus
plot_density_OT <- plotting(MD_OT, "Mit density")
plot_potential_OT <- plotting(MP_OT, "Mit potential")
#
fig_OT_energy <- plot_grid(plot_density_OT, NULL, plot_potential_OT, NULL,
                    nrow = 1, rel_widths = c(0.9, 0.1, 0.9, 0.3))
#
# Getting the legend (get_legend() does not work if the legend is on the top or bottom)
plot_legend_bottom <- plotting(MP_OB, "Mit potential") + theme(legend.position = "bottom", legend.title = element_blank())
gtable <- ggplot_gtable(ggplot_build(plot_legend_bottom))
legend_plot <- gtable$grobs[[which(sapply(gtable$grobs, function(x) x$name) == "guide-box")]]
# C) Merging plots
#
# Create the figure grid with extra space for images
fig_results_energy <- plot_grid(
  fig_OB_energy, fig_OT_energy, NULL,
  nrow = 3, rel_heights = c(0.9, 0.9, 0.15))
# Final composition: Merge everything, adding images and legend
final_plot_energy <- ggdraw(fig_results_energy) +
  # Insert OB image in the top right
  draw_image("./Others/OB.png", x = 0.87, y = 0.79, width = 0.12, height = 0.2) +
  # Insert OT image in the middle right
  draw_image("./Others/OT.png", x = 0.87, y = 0.34, width = 0.11, height = 0.18) +
  # Insert legend at the bottom-right
  draw_grob(legend_plot, x = 0.45, y = 0.05, width = 0.0001, height = 0.0001) +
  # Insert title for each plot
  annotate("text", x = 0.032, y = 0.97, label = "A", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("text", x = 0.487, y = 0.97, label = "B", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("text", x = 0.032, y = 0.515, label = "C", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("text", x = 0.49, y = 0.515, label = "D", hjust = 1, vjust = 1, size = 7, fontface = "bold")
#
# Print final plot
ggsave(here("./output/figures/text/results_energy.png"), plot = final_plot_energy, width = 21, height = 14, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/text/results_energy.png")
```

_Optic tecta_: we did not find significant effects of CORT, temperature, or their interaction on mitochondrial density, metabolic capacity, or ROS production in the optic tecta, neither of CORT or incubation temperature on DNA damage or lipid peroxidation (see @fig-results_energy, @fig-results_oxidative, and Table S2). However, the interaction of CORT and temperature have significant effects on DNA damage in the optic tecta (see @fig-results_oxidative). For DNA damage, CORT elevations had no effect on hot-incubated lizards (β~Control-Hot~ - β~CORT-Hot~: mean = `r format_dec(mean(DNA_OT$Control_Hot) - mean(DNA_OT$CORT_Hot),3)`, pMCMC `r format_p(pmcmc(DNA_OT$Control_Hot - DNA_OT$CORT_Hot), 3, equal = TRUE)`), but it decreased total DNA damage in cold-incubated animals (β~Control-Cold~ - β~CORT-Cold~: mean = `r format_dec(mean(DNA_OT$Control_Cold) - mean(DNA_OT$CORT_Cold),3)`, pMCMC `r format_p(pmcmc(DNA_OT$Control_Cold - DNA_OT$CORT_Cold), 3, equal = TRUE)`) (see @fig-results_oxidative C, E). Prenatal CORT had opposite effects on eggs incubated at high temperatures (β~Control-Hot~ - β~CORT-Hot~: mean = `r format_dec(mean(LP_OT$Control_Hot) - mean(LP_OT$CORT_Hot),3)`, pMCMC `r format_p(pmcmc(LP_OT$Control_Hot - LP_OT$CORT_Hot), 3, equal = TRUE)`) than at low temperatures (β~Control-Cold~ - β~CORT-Cold~: mean = `r format_dec(mean(LP_OT$Control_Cold) - mean(LP_OT$CORT_Cold),3)`, pMCMC `r format_p(pmcmc(LP_OT$Control_Cold - LP_OT$CORT_Cold), 3, equal = TRUE)`), but differences between groups were not significant (see @fig-results_oxidative C). In addition, we found that females had higher DNA damage levels, and lipid peroxidation increased with age (see Table S4).  
  
```{r, fig-results_oxidative}
#| label: fig-results_oxidative
#| fig-cap: "Estimates of ROS (A, D), DNA damage (B, E), and lipid peroxidation (C, F) in the olfactory bulbs (A - C) and optic tecta (D - F) of L. delicata hatchlings as a function of the different prenatal conditions. Black dots indicate the posterior mean, and the bars represent the SD of the estimates. The y-axis represents the posterior estimates of the variable of interest, and the x-axis represents the different prenatal conditions. Lines with asterisks represent significant differences between groups based on pMCMC values (pMCMC < 0.05), no lines indicate no significant differences."
#| fig-name: "fig-results_oxidative"
#
source(here("R", "func.R"))
#
# A) Plotting the results for OB/Chemical stimulus
plot_ros_OB <- plotting(ROS_OB, "ROS")
plot_dnadamage_OB <- plotting(DNA_OB, "DNA damage")
plot_peroxidation_OB <- plotting(LP_OB, "Lipid peroxidation")
#
fig_OB_oxidative_top <- plot_grid(plot_ros_OB, NULL, NULL,
                    nrow = 1, rel_widths = c(0.8, 0.1, 0.8))
fig_OB_oxidative_bottom <- plot_grid(plot_dnadamage_OB, NULL, plot_peroxidation_OB,
                    nrow = 1, rel_widths = c(0.8, 0.1, 0.8))
fig_OB_oxidative <- plot_grid(fig_OB_oxidative_top, fig_OB_oxidative_bottom,
                    nrow = 2)
#
# B) Plotting the results for OT/Visual stimulus
plot_ros_OT <- plotting(ROS_OT, "ROS")
plot_dnadamage_OT <- plotting(DNA_OT, "DNA damage")
plot_peroxidation_OT <- plotting(LP_OT, "Lipid peroxidation")
#
fig_OT_oxidative_top <- plot_grid(plot_ros_OT, NULL, NULL,
                    nrow = 1, rel_widths = c(0.8, 0.1, 0.8))
fig_OT_oxidative_bottom <- plot_grid(plot_dnadamage_OT, NULL, plot_peroxidation_OT,
                    nrow = 1, rel_widths = c(0.8, 0.1, 0.8))
fig_OT_oxidative <- plot_grid(fig_OT_oxidative_top, fig_OT_oxidative_bottom,
                    nrow = 2)
#
# Getting the legend (get_legend() does not work if the legend is on the top or bottom)
plot_legend_bottom <- plotting(ROS_OB, "ROS") + theme(legend.position = "bottom", legend.title = element_blank())
gtable <- ggplot_gtable(ggplot_build(plot_legend_bottom))
legend_plot <- gtable$grobs[[which(sapply(gtable$grobs, function(x) x$name) == "guide-box")]]
# C) Merging plots
#
# Create the figure grid with extra space for images
fig_results_oxidative <- plot_grid(
  fig_OB_oxidative, NULL, fig_OT_oxidative, NULL,
  nrow = 4, rel_heights = c(1, 0.05, 1, 0.1))
# Final composition: Merge everything, adding images and legend
final_plot_oxidative <- ggdraw(fig_results_oxidative) +
  # Insert OB image in the top right
  draw_image("./Others/OB.png", x = 0.56, y = 0.755, width = 0.2, height = 0.3) +
  # Insert OT image in the middle right
  draw_image("./Others/OT.png", x = 0.56, y = 0.28, width = 0.19, height = 0.28) +
  # Insert legend at the bottom-right
  draw_grob(legend_plot, x = 0.5, y = 0.025, width = 0.0001, height = 0.0001) +
  # Insert title for each plot
  annotate("text", x = 0.0365, y = 0.986, label = "A", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("text", x = 0.0365, y = 0.755, label = "B", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("text", x = 0.567, y = 0.755, label = "C", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("text", x = 0.0365, y = 0.5, label = "D", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("text", x = 0.0365, y = 0.268, label = "E", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("text", x = 0.567, y = 0.268, label = "F", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("segment", x = 0.46, xend= 0.46, y = 0.21, yend = 0.26, size = 0.5, colour = "black") +
  annotate("segment", x = 0.45, xend= 0.46, y = 0.21, yend = 0.21, size = 0.5, colour = "black") +
  annotate("segment", x = 0.45, xend= 0.46, y = 0.26, yend = 0.26, size = 0.5, colour = "black") +
  annotate("text", x = 0.47, y = 0.228, label = "*", hjust = 0.5, vjust = 0.5, size = 7)
#
# Print final plot
ggsave(here("./output/figures/text/results_oxidative.png"), plot = final_plot_oxidative, width = 18, height = 24, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/text/results_oxidative.png")
```

#### Does prenatal CORT and incubation temperature affect prey detection?
Models explained between 26 to 29.3 % of the variation in prey detection (see Table S1).  

_Chemical stimulus_: lizards detected chemical stimulus faster when exposed to prenatal CORT (β~Control~ - β~CORT~: mean = `r format_dec(mean(c(DET_OB$Control_Cold, DET_OB$Control_Hot)) - mean(c(DET_OB$CORT_Cold, DET_OB$CORT_Hot)), 3)`, pMCMC `r format_p(pmcmc(c(DET_OB$Control_Cold, DET_OB$Control_Hot) - c(DET_OB$CORT_Cold, DET_OB$CORT_Hot)), 3, equal = TRUE)`), but there was no effect of temperature or the interaction between CORT and temperature (@fig-results_behaviour A and Table S2).  

```{r, fig-results_behaviour}
#| label: fig-results_behaviour
#| fig-cap: "Estimates of detection latency of chemical (A) and visual (B) stimulus by L. delicata hatchlings as a function of the different prenatal conditions. Black dots indicate the posterior mean, and the bars represent the SD of the estimates. The y-axis represents the posterior estimates of the variable of interest, and the x-axis represents the different prenatal conditions. Lines with asterisks represent significant differences between groups based on pMCMC values (pMCMC < 0.05), no lines indicate no significant differences."
#| fig-name: "fig-results"
#
source(here("R", "func.R"))
# A) Plotting the results for OB/Chemical stimulus
plot_t_D_Chemical <- plotting(DET_OB, "Detection latency")
#
# B) Plotting the results for OT/Visual stimulus
plot_t_D_Visual <- plotting(DET_OT, "Detection latency")
#
# Getting the legend (get_legend() does not work if the legend is on the top or bottom)
plot_legend_bottom <- plotting(DET_OB, "Detection latency") + theme(legend.position = "bottom", legend.title = element_blank())
gtable <- ggplot_gtable(ggplot_build(plot_legend_bottom))
legend_plot <- gtable$grobs[[which(sapply(gtable$grobs, function(x) x$name) == "guide-box")]]
# C) Merging plots
#
# Create the figure grid with extra space for images
fig_results_det <- plot_grid(plot_t_D_Chemical, NULL, plot_t_D_Visual, NULL,
                    nrow = 1, rel_widths = c(1, 0.4, 1, 0.35))
fig_results_behaviour <- plot_grid(fig_results_det, NULL,
  nrow = 2, rel_heights = c(1, 0.15))
# Final composition: Merge everything, adding images and legend
final_plot_behaviour <- ggdraw(fig_results_behaviour) +
  # Insert CS image in the top middle
  draw_image("./Others/CS.png", x = 0.19, y = 0.36, width = 0.48, height = 0.6) +
  # Insert VS image in the top right
  draw_image("./Others/VS.png", x = 0.6, y = 0.35, width = 0.65, height = 0.6) +
  # Insert legend at the bottom-right
  draw_grob(legend_plot, x = 0.45, y = 0.07, width = 0.0001, height = 0.0001) +
  # Insert title for each plot
  annotate("text", x = 0.035, y = 0.96, label = "A", hjust = 1, vjust = 1, size = 7, fontface = "bold") +
  annotate("text", x = 0.542, y = 0.96, label = "B", hjust = 1, vjust = 1, size = 7, fontface = "bold") +  
  annotate("segment", x = 0.34, xend= 0.34, y = 0.73, yend = 0.91, size = 0.5, colour = "black") +
  annotate("segment", x = 0.335, xend= 0.34, y = 0.73, yend = 0.73, size = 0.5, colour = "black") +
  annotate("segment", x = 0.335, xend= 0.34, y = 0.91, yend = 0.91, size = 0.5, colour = "black") +
  annotate("text", x = 0.35, y = 0.795, label = "*", hjust = 0.5, vjust = 0.5, size = 7) +
  annotate("segment", x = 0.292, xend= 0.292, y = 0.418, yend = 0.598, size = 0.5, colour = "black") +
  annotate("segment", x = 0.287, xend= 0.292, y = 0.418, yend = 0.418, size = 0.5, colour = "black") +
  annotate("segment", x = 0.287, xend= 0.292, y = 0.598, yend = 0.598, size = 0.5, colour = "black") +
  annotate("text", x = 0.302, y = 0.471, label = "*", hjust = 0.5, vjust = 0.5, size = 7)
#
# Print final plot
ggsave(here("./output/figures/text/results_behaviour.png"), plot = final_plot_behaviour, width = 21, height = 7, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/text/results_behaviour.png")
```

_Visual stimulus_: there were no significant effects of CORT, temperature, or their interaction on the detection latency of visual stimuli (@fig-results_behaviour B and Table S2).  

#### Do metabolic function and oxidative stress compromise prey detection?
```{r, model_sem_OB}
#| label: model_sem_OB
# Making the SEM model by using a multivariate brms. The aim is to test the relationships between mitochondrial physiology and detection latency.
# To simplify the random factors, and since there is no effect of experience with the prey in prey detection, latency was averaged across the two preys. Every other predictor added to the model was based on previous brms for each variable separated.
# All continue variables were standardized (var/2SD) before running the models (see data_process.R). 
#
source(here("R", "func.R"))
#
SEM_df <- clean_df %>%
  group_by(lizard_id, prey) %>%
  mutate(t_D = mean(t_D, na.rm = TRUE)) %>%
  ungroup() %>%
  filter(prey == "Unknown")
#
#
data_sem_OB <- SEM_df %>%
  filter(region == "OB") %>%
  mutate(obs = as.integer(c(1:80))) %>%
  mutate(vec = rep(1, length(obs)))
# Create the models
#
refit <- FALSE
#
#
if(refit){
  m_OB <- brm(
    bf(t_D | se(vec, sigma = FALSE) ~ mean_mitodensity + mean_potential + mean_dnadamage + mean_peroxidation + (1|clutch) + (1|q|obs)) +
    bf(mean_dnadamage | se(vec, sigma = FALSE) ~ mean_ros + (1|clutch) + (1|p|obs)) +
    bf(mean_peroxidation | se(vec, sigma = FALSE) ~ mean_ros + (1|clutch)+ (1|p|obs)) +
    bf(mean_ros | se(vec, sigma = FALSE) ~ mean_mitodensity + mean_potential + (1|clutch) + (1|t|obs)) +
  set_rescor(FALSE),
  family = gaussian(),
  data = data_sem_OB,
  chains = 4, cores = 4, iter = 8000, warmup = 2000,
  control = list(adapt_delta = 0.99, max_treedepth = 11))
  # Save the model
  saveRDS(m_OB, file = here("output/m_SEM/m_OB.rds"))
} else {
  m_OB <- readRDS(here("output/m_SEM/m_OB.rds"))
}
```

```{r, sem_tidy_OB}
#| label: sem_tidy_OB
source(here("R", "func.R"))
#
# I am extracting here all the values for getting the total effects of each of the variables in the model. I am using the posterior values for each of the variables to get the total effects assuming that:
## total effect = direct effect + indirect effect + residual correlation
# In other words:
## total effect = 
# Extract the posteriors for the SEM model
post_sem_OB <- as_draws_df(m_OB) 
#
#### A) Get the direct paths per each variable
# 
# A.1) Detection
OB_coeff_mitodensity_det <- post_sem_OB$b_tD_mean_mitodensity
OB_coeff_potential_det <- post_sem_OB$b_tD_mean_potential
OB_coeff_dna_det <- post_sem_OB$b_tD_mean_dnadamage
OB_coeff_perox_det <- post_sem_OB$b_tD_mean_peroxidation
# 
# A.2) DNA damage
OB_coeff_ros_dna <- post_sem_OB$b_meandnadamage_mean_ros
#
# A.3) Lipid peroxidation
OB_coeff_ros_perox <- post_sem_OB$b_meanperoxidation_mean_ros
#
# A.4) ROS
OB_coeff_mitodensity_ros <- post_sem_OB$b_meanros_mean_mitodensity
OB_coeff_potential_ros <- post_sem_OB$b_meanros_mean_potential
#
#
#### B) Get the indirect paths for each variable
#
# B.1) Detection
OB_undir_ros_det <- OB_coeff_ros_dna * OB_coeff_dna_det + OB_coeff_ros_perox * OB_coeff_perox_det
OB_undir_mitodensity_det <- OB_coeff_mitodensity_ros * OB_coeff_ros_dna * OB_coeff_dna_det + OB_coeff_mitodensity_ros * OB_coeff_ros_perox * OB_coeff_perox_det
OB_undir_potential_det <- OB_coeff_potential_ros * OB_coeff_ros_dna * OB_coeff_dna_det + OB_coeff_potential_ros * OB_coeff_ros_perox * OB_coeff_perox_det
#
# B.2) DNA damage
OB_undir_mitodensity_dna <- OB_coeff_mitodensity_ros * OB_coeff_ros_dna
OB_undir_potential_dna <- OB_coeff_potential_ros * OB_coeff_ros_dna
#
# B.3) Lipid peroxidation
OB_undir_mitodensity_perox <- OB_coeff_mitodensity_ros * OB_coeff_ros_perox
OB_undir_potential_perox <- OB_coeff_potential_ros * OB_coeff_ros_perox
#
#
#### C) Get the total effects for each variable
#
# C.1) Detection
OB_total_mitodensity_det <- OB_undir_mitodensity_det
OB_total_potential_det <- OB_undir_potential_det
OB_total_ros_det <- OB_undir_ros_det
OB_total_dna_det <- OB_coeff_dna_det
OB_total_perox_det <- OB_coeff_perox_det
#
# C.2) DNA damage
OB_total_ros_dna <- OB_coeff_ros_dna
OB_total_mitodensity_dna <- OB_undir_mitodensity_dna
OB_total_potential_dna <- OB_undir_potential_dna
#
# C.3) Lipid peroxidation
OB_total_ros_perox <- OB_coeff_ros_perox
OB_total_mitodensity_perox <- OB_undir_mitodensity_perox
OB_total_potential_perox <- OB_undir_potential_perox
#
# C.4) ROS
OB_total_mitodensity_ros <- OB_coeff_mitodensity_ros
OB_total_potential_ros <- OB_coeff_potential_ros
#
#
# D) Create a df with the values for each variable
#
# D.1) Detection (for example)
det_results_semOB <- data.frame(
  reference_variable = rep("t_D", 5),
  predictor_modulator = c("mean_mitodensity",
                          "mean_potential",
                          "ROS",
                          "mean_dnadamage",
                          "mean_peroxidation"),
  direct_effects = I(list(OB_coeff_mitodensity_det,
                          OB_coeff_potential_det,
                          NA,
                          OB_coeff_dna_det,
                          OB_coeff_perox_det)),
  indirect_effects = I(list(OB_undir_mitodensity_det,
                          OB_undir_potential_det,
                          OB_undir_ros_det,
                          NA,
                          NA)),
  total_effects = I(list(OB_total_mitodensity_det,
                        OB_total_potential_det,
                        OB_total_ros_det,
                        OB_total_dna_det,
                        OB_total_perox_det))
  ) %>% 
  group_by(predictor_modulator) %>%
  summarize(
    # Summarizing each list column (direct_effects, indirect_effects, etc.)
    mean_direct_effects = format_dec(mean(unlist(direct_effects), na.rm = TRUE), 3),
    mean_indirect_effects = format_dec(mean(unlist(indirect_effects), na.rm = TRUE), 3),
    mean_total_effects = format_dec(mean(unlist(total_effects), na.rm = TRUE), 3),
    q5_direct = format_dec(quantile(unlist(direct_effects), 0.05, na.rm = TRUE), 3),
    q95_direct = format_dec(quantile(unlist(direct_effects), 0.95, na.rm = TRUE), 3),
    q5_indirect = format_dec(quantile(unlist(indirect_effects), 0.05, na.rm = TRUE), 3),
    q95_indirect = format_dec(quantile(unlist(indirect_effects), 0.95, na.rm = TRUE), 3),
    q5_total = format_dec(quantile(unlist(total_effects), 0.05, na.rm = TRUE), 3),
    q95_total = format_dec(quantile(unlist(total_effects), 0.95, na.rm = TRUE), 3)) %>%
  mutate(source = "det_results_semOB")
#
# D.2) DNA damage
dna_results_semOB <- data.frame(
  reference_variable = rep("DNA damage", 3),
  predictor_modulator = c("mean_mitodensity",
                          "mean_potential",
                          "ROS"),
  direct_effects = I(list(NA,
                          NA,
                          OB_coeff_ros_dna)),
  indirect_effects = I(list(OB_undir_mitodensity_dna,
                          OB_undir_potential_dna,
                          NA)),
  total_effects = I(list(OB_total_mitodensity_dna,
                        OB_total_potential_dna,
                        OB_total_ros_dna))) %>% 
  group_by(predictor_modulator) %>%
  summarize(
    # Summarizing each list column (direct_effects, indirect_effects, etc.)
    mean_direct_effects = format_dec(mean(unlist(direct_effects), na.rm = TRUE), 3),
    mean_indirect_effects = format_dec(mean(unlist(indirect_effects), na.rm = TRUE), 3),
    mean_total_effects = format_dec(mean(unlist(total_effects), na.rm = TRUE), 3),
    q5_direct = format_dec(quantile(unlist(direct_effects), 0.05, na.rm = TRUE), 3),
    q95_direct = format_dec(quantile(unlist(direct_effects), 0.95, na.rm = TRUE), 3),
    q5_indirect = format_dec(quantile(unlist(indirect_effects), 0.05, na.rm = TRUE), 3),
    q95_indirect = format_dec(quantile(unlist(indirect_effects), 0.95, na.rm = TRUE), 3),
    q5_total = format_dec(quantile(unlist(total_effects), 0.05, na.rm = TRUE), 3),
    q95_total = format_dec(quantile(unlist(total_effects), 0.95, na.rm = TRUE), 3)) %>%
  mutate(source = "dna_results_semOB")
#
# D.3) Lipid peroxidation
perox_results_semOB <- data.frame(
  reference_variable = rep("lipid peroxidation", 3),
  predictor_modulator = c("mean_mitodensity",
                          "mean_potential",
                          "ROS"),
  direct_effects = I(list(NA,
                          NA,
                          OB_coeff_ros_perox)),
  indirect_effects = I(list(OB_undir_mitodensity_perox,
                          OB_undir_potential_perox,
                          NA)),
  total_effects = I(list(OB_total_mitodensity_perox,
                        OB_total_potential_perox,
                        OB_total_ros_perox))) %>% 
  group_by(predictor_modulator) %>%
  summarize(
    # Summarizing each list column (direct_effects, indirect_effects, etc.)
    mean_direct_effects = format_dec(mean(unlist(direct_effects), na.rm = TRUE), 3),
    mean_indirect_effects = format_dec(mean(unlist(indirect_effects), na.rm = TRUE), 3),
    mean_total_effects = format_dec(mean(unlist(total_effects), na.rm = TRUE), 3),
    q5_direct = format_dec(quantile(unlist(direct_effects), 0.05, na.rm = TRUE), 3),
    q95_direct = format_dec(quantile(unlist(direct_effects), 0.95, na.rm = TRUE), 3),
    q5_indirect = format_dec(quantile(unlist(indirect_effects), 0.05, na.rm = TRUE), 3),
    q95_indirect = format_dec(quantile(unlist(indirect_effects), 0.95, na.rm = TRUE), 3),
    q5_total = format_dec(quantile(unlist(total_effects), 0.05, na.rm = TRUE), 3),
    q95_total = format_dec(quantile(unlist(total_effects), 0.95, na.rm = TRUE), 3)) %>%
  mutate(source = "perox_results_semOB")
#
# D.4) ROS
ros_results_semOB <- data.frame(
  reference_variable = rep("ROS", 2),
  predictor_modulator = c("mean_mitodensity",
                          "mean_potential"),
  direct_effects = I(list(OB_coeff_mitodensity_ros,
                          OB_coeff_potential_ros)),
  indirect_effects = I(list(NA,
                          NA)),
  total_effects = I(list(OB_total_mitodensity_ros,
                        OB_total_potential_ros))) %>% 
  group_by(predictor_modulator) %>%
  summarize(
    # Summarizing each list column (direct_effects, indirect_effects, etc.)
    mean_direct_effects = format_dec(mean(unlist(direct_effects), na.rm = TRUE), 3),
    mean_indirect_effects = format_dec(mean(unlist(indirect_effects), na.rm = TRUE), 3),
    mean_total_effects = format_dec(mean(unlist(total_effects), na.rm = TRUE), 3),
    q5_direct = format_dec(quantile(unlist(direct_effects), 0.05, na.rm = TRUE), 3),
    q95_direct = format_dec(quantile(unlist(direct_effects), 0.95, na.rm = TRUE), 3),
    q5_indirect = format_dec(quantile(unlist(indirect_effects), 0.05, na.rm = TRUE), 3),
    q95_indirect = format_dec(quantile(unlist(indirect_effects), 0.95, na.rm = TRUE), 3),
    q5_total = format_dec(quantile(unlist(total_effects), 0.05, na.rm = TRUE), 3),
    q95_total = format_dec(quantile(unlist(total_effects), 0.95, na.rm = TRUE), 3)) %>%
  mutate(source = "ros_results_semOB")
#
#
# E) Merge everything into a single df
#
sem_results_OB <- bind_rows(det_results_semOB, dna_results_semOB, perox_results_semOB, ros_results_semOB)
```

_Chemical perception (Olfactory bulbs)_: we found a significant effect of mitochondrial density on ROS production (mean β~Mit density - ROS~ = `r format_dec(mean(OB_coeff_mitodensity_ros), 3)`, pMCMC `r format_p(pmcmc(OB_coeff_mitodensity_ros), 3, equal = TRUE)`). However, there were no significant relationships between mitochondrial function or oxidative stress on prey detection, nor between other any other variables (see @fig-sem_results_OB and Table S5).    

```{r, fig-sem_results_OB}
#| label: fig-sem_results_OB
#| fig-cap: "Structural Equation Models for OB/Chemical stimulus"
#| fig-name: "fig-sem_results_OB"
#
# A) Getting all the direct coefficients
OB_density_det <- paste0(format_dec(mean(OB_coeff_mitodensity_det), 3),
                  " [", format_dec(quantile(OB_coeff_mitodensity_det, 0.05), 3),
                  ", ", format_dec(quantile(OB_coeff_mitodensity_det, 0.95), 3), "]")
OB_potential_det <- paste0(format_dec(mean(OB_coeff_potential_det), 3),
                  " [", format_dec(quantile(OB_coeff_potential_det, 0.05), 3),
                  ", ", format_dec(quantile(OB_coeff_potential_det, 0.95), 3), "]")
OB_dna_det <- paste0(format_dec(mean(OB_coeff_dna_det), 3),
                  " [", format_dec(quantile(OB_coeff_dna_det, 0.05), 3),
                  ", ", format_dec(quantile(OB_coeff_dna_det, 0.95), 3), "]")
OB_perox_det <- paste0(format_dec(mean(OB_coeff_perox_det), 3),
                  " [", format_dec(quantile(OB_coeff_perox_det, 0.05), 3),
                  ", ", format_dec(quantile(OB_coeff_perox_det, 0.95), 3), "]")
#
OB_ros_dna <- paste0(format_dec(mean(OB_coeff_ros_dna), 3),
                  " [", format_dec(quantile(OB_coeff_ros_dna, 0.05), 3),
                  ", ", format_dec(quantile(OB_coeff_ros_dna, 0.95), 3), "]")
#
OB_ros_perox <- paste0(format_dec(mean(OB_coeff_ros_perox), 3),
                  " [", format_dec(quantile(OB_coeff_ros_perox, 0.05), 3),
                  ", ", format_dec(quantile(OB_coeff_ros_perox, 0.95), 3), "]")
#
OB_density_ros <- paste0(format_dec(mean(OB_coeff_mitodensity_ros), 3),
                  " [", format_dec(quantile(OB_coeff_mitodensity_ros, 0.05), 3),
                  ", ", format_dec(quantile(OB_coeff_mitodensity_ros, 0.95), 3), "]")
OB_potential_ros <- paste0(format_dec(mean(OB_coeff_potential_ros), 3),
                  " [", format_dec(quantile(OB_coeff_potential_ros, 0.05), 3),
                  ", ", format_dec(quantile(OB_coeff_potential_ros, 0.95), 3), "]")
#
imgOB <- readPNG(here("Others", "SEM.png"))
plot_SEM_OB <- rasterGrob(imgOB, interpolate = TRUE)
#
fig_SEM_OB <- ggdraw(plot_SEM_OB) +
  draw_image("./Others/OB.png", x = 0.855, y = 0.67, width = 0.18, height = 0.3) +
  annotate("text", x = 0.52, y = 0.075, label = OB_density_det, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.52, y = 0.94, label = OB_potential_det, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.83, y = 0.715, label = OB_dna_det, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.83, y = 0.335, label = OB_perox_det, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.525, y = 0.805, label = OB_ros_dna, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.515, y = 0.215, label = OB_ros_perox, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.282, y = 0.2, label = OB_density_ros, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.282, y = 0.82, label = OB_potential_ros, hjust = 1, vjust = 1, size = 2.8, family = "Times")
ggsave(here("./output/figures/text/SEM_OB.png"), plot = fig_SEM_OB, width = 21, height = 7.5, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/text/SEM_OB.png")
```

```{r, models_sem_OT}
#| label: models_sem_OT
# Making the same models above but for OT/Visual stimulus
#
source(here("R", "func.R"))
#
#
data_sem_OT <- SEM_df %>%
  filter(region == "OT") %>%
  mutate(obs = as.integer(c(1:80))) %>%
  mutate(vec = rep(1, length(obs)))
#
# Create the models
#
refit <- FALSE
#
if(refit){
  m_OT <- brm(
    bf(t_D | se(vec, sigma = FALSE) ~ mean_mitodensity + mean_potential + mean_dnadamage + mean_peroxidation + (1|clutch) + (1|p|obs)) +
    bf(mean_dnadamage | se(vec, sigma = FALSE) ~ mean_ros + (1|clutch) + (1|q|obs)) +
    bf(mean_peroxidation | se(vec, sigma = FALSE) ~ mean_ros + (1|clutch) + (1|q|obs)) +
    bf(mean_ros | se(vec, sigma = FALSE) ~ mean_mitodensity + mean_potential + (1|clutch) + (1|t|obs)) +
  set_rescor(FALSE),
  family = gaussian(),
  data = data_sem_OT, 
  chains = 4, cores = 4, iter = 8000, warmup = 2000,
  control = list(adapt_delta = 0.99, max_treedepth = 11))
  # Save the model
  saveRDS(m_OT, file = here("output/m_SEM/m_OT.rds"))
} else {
  m_OT <- readRDS(here("output/m_SEM/m_OT.rds"))
}
```

```{r, sem_tidy_OT}
#| label: sem_tidy_OT
source(here("R", "func.R"))
#
# I am extracting here all the values for getting the total effects of each of the variables in the model. I am using the posterior values for each of the variables to get the total effects assuming that:
## total effect = direct effect + indirect effect + residual correlation
# In other words:
## total effect = 
# Extract the posteriors for the SEM model
post_sem_OT <- as_draws_df(m_OT) 
#
#### A) Get the direct paths per each variable
# 
# A.1) Detection
OT_coeff_mitodensity_det <- post_sem_OT$b_tD_mean_mitodensity
OT_coeff_potential_det <- post_sem_OT$b_tD_mean_potential
OT_coeff_dna_det <- post_sem_OT$b_tD_mean_dnadamage
OT_coeff_perox_det <- post_sem_OT$b_tD_mean_peroxidation
#
# A.2) DNA damage
OT_coeff_ros_dna <- post_sem_OT$b_meandnadamage_mean_ros
#
# A.3) Lipid peroxidation
OT_coeff_ros_perox <- post_sem_OT$b_meanperoxidation_mean_ros
#
# A.4) ROS
OT_coeff_mitodensity_ros <- post_sem_OT$b_meanros_mean_mitodensity
OT_coeff_potential_ros <- post_sem_OT$b_meanros_mean_potential
#
#
#### B) Get the indirect paths for each variable
#
# B.1) Detection
OT_undir_ros_det <- OT_coeff_ros_dna * OT_coeff_dna_det + OT_coeff_ros_perox * OT_coeff_perox_det
OT_undir_mitodensity_det <- OT_coeff_mitodensity_ros * OT_coeff_ros_dna * OT_coeff_dna_det + OT_coeff_mitodensity_ros * OT_coeff_ros_perox * OT_coeff_perox_det
OT_undir_potential_det <- OT_coeff_potential_ros * OT_coeff_ros_dna * OT_coeff_dna_det + OT_coeff_potential_ros * OT_coeff_ros_perox * OT_coeff_perox_det
#
# B.2) DNA damage
OT_undir_mitodensity_dna <- OT_coeff_mitodensity_ros * OT_coeff_ros_dna
OT_undir_potential_dna <- OT_coeff_potential_ros * OT_coeff_ros_dna
#
# B.3) Lipid peroxidation
OT_undir_mitodensity_perox <- OT_coeff_mitodensity_ros * OT_coeff_ros_perox
OT_undir_potential_perox <- OT_coeff_potential_ros * OT_coeff_ros_perox
#
#
#### C) Get the total effects for each variable
#
# C.1) Detection
OT_total_mitodensity_det <- OT_undir_mitodensity_det
OT_total_potential_det <- OT_undir_potential_det
OT_total_ros_det <- OT_undir_ros_det 
OT_total_dna_det <- OT_coeff_dna_det 
OT_total_perox_det <- OT_coeff_perox_det 
#
# C.2) DNA damage
OT_total_ros_dna <- OT_coeff_ros_dna 
OT_total_mitodensity_dna <- OT_undir_mitodensity_dna
OT_total_potential_dna <- OT_undir_potential_dna
#
# C.3) Lipid peroxidation
OT_total_ros_perox <- OT_coeff_ros_perox 
OT_total_mitodensity_perox <- OT_undir_mitodensity_perox
OT_total_potential_perox <- OT_undir_potential_perox
#
# C.4) ROS
OT_total_mitodensity_ros <- OT_coeff_mitodensity_ros
OT_total_potential_ros <- OT_coeff_potential_ros
#
#
# D) Create a df with the values for each variable
#
# D.1) Detection
det_results_semOT <- data.frame(
  reference_variable = rep("t_D", 5),
  predictor_modulator = c("mean_mitodensity",
                          "mean_potential",
                          "ROS",
                          "mean_dnadamage",
                          "mean_peroxidation"),
  direct_effects = I(list(OT_coeff_mitodensity_det,
                          OT_coeff_potential_det,
                          NA,
                          OT_coeff_dna_det,
                          OT_coeff_perox_det)),
  indirect_effects = I(list(OT_undir_mitodensity_det,
                          OT_undir_potential_det,
                          OT_undir_ros_det,
                          NA,
                          NA)),
  total_effects = I(list(OT_total_mitodensity_det,
                        OT_total_potential_det,
                        OT_total_ros_det,
                        OT_total_dna_det,
                        OT_total_perox_det))
  ) %>% 
  group_by(predictor_modulator) %>%
  summarize(
    # Summarizing each list column (direct_effects, indirect_effects, etc.)
    mean_direct_effects = format_dec(mean(unlist(direct_effects), na.rm = TRUE), 3),
    mean_indirect_effects = format_dec(mean(unlist(indirect_effects), na.rm = TRUE), 3),
    mean_total_effects = format_dec(mean(unlist(total_effects), na.rm = TRUE), 3),
    q5_direct = format_dec(quantile(unlist(direct_effects), 0.05, na.rm = TRUE), 3),
    q95_direct = format_dec(quantile(unlist(direct_effects), 0.95, na.rm = TRUE), 3),
    q5_indirect = format_dec(quantile(unlist(indirect_effects), 0.05, na.rm = TRUE), 3),
    q95_indirect = format_dec(quantile(unlist(indirect_effects), 0.95, na.rm = TRUE), 3),
    q5_total = format_dec(quantile(unlist(total_effects), 0.05, na.rm = TRUE), 3),
    q95_total = format_dec(quantile(unlist(total_effects), 0.95, na.rm = TRUE), 3)
  )  %>%
  mutate(source = "det_results_semOT")
#
# D.2) DNA damage
dna_results_semOT <- data.frame(
  reference_variable = rep("DNA damage", 3),
  predictor_modulator = c("mean_mitodensity",
                          "mean_potential",
                          "ROS"),
  direct_effects = I(list(NA,
                          NA,
                          OT_coeff_ros_dna)),
  indirect_effects = I(list(OT_undir_mitodensity_dna,
                          OT_undir_potential_dna,
                          NA)),
  total_effects = I(list(OT_total_mitodensity_dna,
                        OT_total_potential_dna,
                        OT_total_ros_dna))
  ) %>% 
  group_by(predictor_modulator) %>%
  summarize(
    # Summarizing each list column (direct_effects, indirect_effects, etc.)
    mean_direct_effects = format_dec(mean(unlist(direct_effects), na.rm = TRUE), 3),
    mean_indirect_effects = format_dec(mean(unlist(indirect_effects), na.rm = TRUE), 3),
    mean_total_effects = format_dec(mean(unlist(total_effects), na.rm = TRUE), 3),
    q5_direct = format_dec(quantile(unlist(direct_effects), 0.05, na.rm = TRUE), 3),
    q95_direct = format_dec(quantile(unlist(direct_effects), 0.95, na.rm = TRUE), 3),
    q5_indirect = format_dec(quantile(unlist(indirect_effects), 0.05, na.rm = TRUE), 3),
    q95_indirect = format_dec(quantile(unlist(indirect_effects), 0.95, na.rm = TRUE), 3),
    q5_total = format_dec(quantile(unlist(total_effects), 0.05, na.rm = TRUE), 3),
    q95_total = format_dec(quantile(unlist(total_effects), 0.95, na.rm = TRUE), 3)
  )  %>%
  mutate(source = "dna_results_semOT")
#
# D.3) Lipid peroxidation
perox_results_semOT <- data.frame(
  reference_variable = rep("Lipid peroxidation", 3),
  predictor_modulator = c("mean_mitodensity",
                          "mean_potential",
                          "ROS"),
  direct_effects = I(list(NA,
                          NA,
                          OT_coeff_ros_perox)),
  indirect_effects = I(list(OT_undir_mitodensity_perox,
                          OT_undir_potential_perox,
                          NA)),
  total_effects = I(list(OT_total_mitodensity_perox,
                        OT_total_potential_perox,
                        OT_total_ros_perox))
  ) %>% 
  group_by(predictor_modulator) %>%
  summarize(
    # Summarizing each list column (direct_effects, indirect_effects, etc.)
    mean_direct_effects = format_dec(mean(unlist(direct_effects), na.rm = TRUE), 3),
    mean_indirect_effects = format_dec(mean(unlist(indirect_effects), na.rm = TRUE), 3),
    mean_total_effects = format_dec(mean(unlist(total_effects), na.rm = TRUE), 3),
    q5_direct = format_dec(quantile(unlist(direct_effects), 0.05, na.rm = TRUE), 3),
    q95_direct = format_dec(quantile(unlist(direct_effects), 0.95, na.rm = TRUE), 3),
    q5_indirect = format_dec(quantile(unlist(indirect_effects), 0.05, na.rm = TRUE), 3),
    q95_indirect = format_dec(quantile(unlist(indirect_effects), 0.95, na.rm = TRUE), 3),
    q5_total = format_dec(quantile(unlist(total_effects), 0.05, na.rm = TRUE), 3),
    q95_total = format_dec(quantile(unlist(total_effects), 0.95, na.rm = TRUE), 3)
  ) %>%
  mutate(source = "perox_results_semOT")
#
# D.4) ROS
ros_results_semOT <- data.frame(
  reference_variable = rep("ROS", 2),
  predictor_modulator = c("mean_mitodensity",
                          "mean_potential"),
  direct_effects = I(list(OT_coeff_mitodensity_ros,
                          OT_coeff_potential_ros)),
  indirect_effects = I(list(NA,
                          NA)),
  total_effects = I(list(OT_total_mitodensity_ros,
                        OT_total_potential_ros))
  ) %>% 
  group_by(predictor_modulator) %>%
  summarize(
    # Summarizing each list column (direct_effects, indirect_effects, etc.)
    mean_direct_effects = format_dec(mean(unlist(direct_effects), na.rm = TRUE), 3),
    mean_indirect_effects = format_dec(mean(unlist(indirect_effects), na.rm = TRUE), 3),
    mean_total_effects = format_dec(mean(unlist(total_effects), na.rm = TRUE), 3),
    q5_direct = format_dec(quantile(unlist(direct_effects), 0.05, na.rm = TRUE), 3),
    q95_direct = format_dec(quantile(unlist(direct_effects), 0.95, na.rm = TRUE), 3),
    q5_indirect = format_dec(quantile(unlist(indirect_effects), 0.05, na.rm = TRUE), 3),
    q95_indirect = format_dec(quantile(unlist(indirect_effects), 0.95, na.rm = TRUE), 3),
    q5_total = format_dec(quantile(unlist(total_effects), 0.05, na.rm = TRUE), 3),
    q95_total = format_dec(quantile(unlist(total_effects), 0.95, na.rm = TRUE), 3)
  )  %>%
  mutate(source = "ros_results_semOT")
#
# E) Merge everything into a single df
#
sem_results_OT <- bind_rows(det_results_semOT, dna_results_semOT, perox_results_semOT, ros_results_semOT)
```

_Visual perception (Optic tecta)_: we found no significant relationships within mitochondrial variables or between mitochondrial physiology and cognitive performance (see @fig-sem_results_OT and Table S6).   

```{r, fig-sem_results_OT}
#| label: fig-sem_results_OT
#| fig-cap: "Structural Equation Models for OT/Visual stimulus"
#| fig-name: "fig-sem_results_OT"
#
# A) Getting all the direct coefficients
OT_density_det <- paste0(format_dec(mean(OT_coeff_mitodensity_det), 3),
                  " [", format_dec(quantile(OT_coeff_mitodensity_det, 0.05), 3),
                  ", ", format_dec(quantile(OT_coeff_mitodensity_det, 0.95), 3), "]")
OT_potential_det <- paste0(format_dec(mean(OT_coeff_potential_det), 3),
                  " [", format_dec(quantile(OT_coeff_potential_det, 0.05), 3),
                  ", ", format_dec(quantile(OT_coeff_potential_det, 0.95), 3), "]")
OT_dna_det <- paste0(format_dec(mean(OT_coeff_dna_det), 3),
                  " [", format_dec(quantile(OT_coeff_dna_det, 0.05), 3),
                  ", ", format_dec(quantile(OT_coeff_dna_det, 0.95), 3), "]")
OT_perox_det <- paste0(format_dec(mean(OT_coeff_perox_det), 3),
                  " [", format_dec(quantile(OT_coeff_perox_det, 0.05), 3),
                  ", ", format_dec(quantile(OT_coeff_perox_det, 0.95), 3), "]")
#
OT_ros_dna <- paste0(format_dec(mean(OT_coeff_ros_dna), 3),
                  " [", format_dec(quantile(OT_coeff_ros_dna, 0.05), 3),
                  ", ", format_dec(quantile(OT_coeff_ros_dna, 0.95), 3), "]")
#
OT_ros_perox <- paste0(format_dec(mean(OT_coeff_ros_perox), 3),
                  " [", format_dec(quantile(OT_coeff_ros_perox, 0.05), 3),
                  ", ", format_dec(quantile(OT_coeff_ros_perox, 0.95), 3), "]")
#
OT_density_ros <- paste0(format_dec(mean(OT_coeff_mitodensity_ros), 3),
                  " [", format_dec(quantile(OT_coeff_mitodensity_ros, 0.05), 3),
                  ", ", format_dec(quantile(OT_coeff_mitodensity_ros, 0.95), 3), "]")
OT_potential_ros <- paste0(format_dec(mean(OT_coeff_potential_ros), 3),
                  " [", format_dec(quantile(OT_coeff_potential_ros, 0.05), 3),
                  ", ", format_dec(quantile(OT_coeff_potential_ros, 0.95), 3), "]")
#
#
imgOT <- readPNG(here("Others", "SEM.png"))
plot_SEM_OT <- rasterGrob(imgOT, interpolate = TRUE)
#
fig_SEM_OT <- ggdraw(plot_SEM_OT) +
  draw_image("./Others/OT.png", x = 0.86, y = 0.67, width = 0.16, height = 0.3) +
  annotate("text", x = 0.52, y = 0.075, label = OT_density_det, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.52, y = 0.94, label = OT_potential_det, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.83, y = 0.715, label = OT_dna_det, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.83, y = 0.335, label = OT_perox_det, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.525, y = 0.805, label = OT_ros_dna, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.515, y = 0.215, label = OT_ros_perox, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.285, y = 0.2, label = OT_density_ros, hjust = 1, vjust = 1, size = 2.8, family = "Times") +
  annotate("text", x = 0.285, y = 0.82, label = OT_potential_ros, hjust = 1, vjust = 1, size = 2.8, family = "Times")
ggsave(here("./output/figures/text/SEM_OT.png"), plot = fig_SEM_OT, width = 21, height = 7.5, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/text/SEM_OT.png")
```

## Discussion
We examined the impact of prenatal temperature and CORT on visual and chemical perception and determined whether metabolic function was the underlying reason for any perceptual differences we observed as has been shown in mammals [@hara_presynaptic_2014; @chaudhari2022early]. Our findings suggest that metabolic processes remained largely resilient to early environmental conditions. However, early-life conditions have region- and context-dependent effects on oxidative damage and prey detection. We observed interactive effects of prenatal CORT and incubation temperature on oxidative damage in the Optic Tecta, but no effects on perception of visual stimuli. In contrast, CORT decreased the time to perceive chemical stimuli despite the resilience of the Olfactory bulbs to prenatal conditions. Below, we discuss these findings in relation to mitochondrial metabolic function, oxidative stress, and behavioural performance.  

#### Metabolic processes in multiple brain regions are robust to early life conditions
Contrary to our predictions, we found no significant effects of early environmental conditions on mitochondrial density, metabolic capacity, or ROS production in either of the brain regions studied. In the leopard gecko (_Eublepharis macularius_), incubation temperature is an important determinant of metabolic capacity in some, but not all, brain nuclei [@coomber_independent_1997], while prenatal stress decreases mitochondrial respiration efficiency in the cortex, hippocampus, and hypotalamus of rats (_Rattus norvegicus_) [@gong_chronic_2011]. In contrast, metabolic processes in the optic tecta and olfactory bulbs of _L. delicata_ appear to be robust to early-life conditions, potentially to ensure that these brain regions can perform their essential functions. However, since the effects of early environment can be region-dependent [@coomber_independent_1997], it is possible that other brain regions not examined here may be more sensitive to prenatal CORT and temperature.  

Alternatively, the effects of early environmental conditions on metabolic function and ROS production may be immediate rather than long-lasting. Mitochondria are known to be highly responsive to environmental changes and energetic demands [@gyllenhammer2020developmental]. It is possible that the metabolic effect of the early-life conditions dissipated once all animals were exposed to the same environment after hatching. Nonetheless, alterations in metabolic function during earlier stages would still be expected to affect oxidative damage, as these processes are cumulative and can lead to long-term consequences [@rice2002brain; @terman2006oxidative].   

#### Oxidative stress brought about by experiencing early life CORT are region- and temperature- dependent
We found that DNA damage and lipid peroxidation were affected in region-specific ways. Early conditions did not significantly influence oxidative stress in the olfactory bulbs, but had a pronounced effect on DNA damage and lipid peroxidation in the optic tecta.  

CORT exposure reduced DNA damage in optic tecta from cold-incubated lizards but had no effect at higher incubation temperatures. This pattern suggests that CORT might play a protective role under specific thermal conditions. Since CORT helps mobilize energy resources to facilitate physiological adjustments to stress [@sapolsky_how_2000], it is possible that under colder incubation conditions — where metabolic rates are expected to be lower — energy mobilised by CORT may be allocated towards antioxidant activity or DNA repairing mechanisms [@kawamura1991glucocorticoid; but see @mcintosh1998glucocorticoids]. In contrast, at higher temperatures, the increased metabolic demands may limit the availability of resources for such protective mechanisms [see @kim2019carry].  

In comparison, increased prenatal CORT resulted in higher lipid peroxidation in cold incubated lizards but reduced it in those incubated at warm temperatures. Although the two hormonal treatments did not significantly differ within each incubation temperature, the direction of the CORT effect was the opposite between temperatures. These contrasting CORT–temperature effects on DNA damage and lipid peroxidation suggest that the pathways protecting or repairing each molecule may vary in their thermal sensitivity. For instance, antioxidant enzymes differ in their response to hibernation in the soft-shelled turtle (_Pelodiscus sinensis_), indicating that thermal sensitivity varies among antioxidant system components [@tang2021antioxidant]. An alternative mechanism might involve temperature-dependent changes in membrane lipid composition or fluidity, which may affect how lipids respond to oxidative stress [@zeis2019temperature]. For example, lipid peroxidation levels increased in cold-acclimated _Daphnia magna_ likely because of higher concentration of polyunsaturated fatty acids [@zeis2019temperature]. Therefore, temperature-induced structural differences may influence the vulnerability of different molecules to oxidative stress.    

#### Prenatal CORT exposure enhances chemical but not visual prey detection   
Detection latency decreased with CORT exposure when animals were presented with chemical, but not visual, stimuli. This effect was not related to alterations in mitochondrial physiology in the olfactory bulbs. Instead, prenatal CORT may influence other mechanisms involved in chemoreception. For instance, in rats (_R. norvegicus_), GCs like dexamethasone can enchance the ability to detect chemical stimuli by upregulating gene expression in the olfactory mucosa [@meunier2020olfactory]. Such molecular changes could alter chemosensory sensitivity in lizards, independent of mitochondrial function.

Alternatively, the observed differences in chemical perception may be driven by motivation. Prenatal CORT is expected to increase hunger through resource mobilization [@spencer2008post; @cossin-sevrin_effect_2022; but see @crino_corticosterone_2014-learn]. This could have led to increased motivation in CORT-treated lizards, stimulating a switch to a more active foraging mode, affecting the way they respond to chemical stimuli. For example, species of European lizards (family Lacertidae) that spend more time actively looking for food tend to rely more on chemoreception [@verwaijen2007relationships]. Although we fasted lizards and controlled for motivation in our analyses, it is possible that we did not fully capture factors related to the ecological relevance of the cues, the animals' internal state, or the interaction between the two. Further studies need to be conducted to understand how CORT can change foraging strategies in lizards and how this can affect their perception abilities.    

#### Mitochondrial function and oxidative stress do not affect detection abilities
Mitochondria are predicted to impact cognitive performance by providing energy for neural activity or by regulating oxidative stress [@siegel1994basic; @mcnay_decreases_2000; @du_dynamic_2009; @picard_mitochondria_2014; @picard_energetic_2018; @mann_coupling_2021; @alexandrov_neuronal_2022]. For example, reduced cytochrome c oxidase (COX) activity in dopaminergic neurons of the olfactory bulb of mice (_Mus musculus_) is associated with impaired olfactory capacities [@pass2020impact], and links between brain metabolic function and visual acuity have also been reported in other species [reviewed in @wong2010energy]. However, metabolic function did not explain variation in prey detection in _L. delicata_. In contrast, our results suggests that metabolic function is not a limiting factor for prey detection in _L. delicata_, or that _L. delicata_ can sustain this cognitive function despite fluctuations in energy availability.   

Similarly, oxidative stress did not influence _L. delicata_ ability to detect visual or chemical stimuli from prey. In this regard, oxidative damage is expected to decrease cognitive abilities through neuron death or senescense [@finkel_oxidants_2000; @zhu_prenatal_2004; @du_dynamic_2009; @gong_chronic_2011; @hoffmann_mitochondrion_2018]. Possibly, the levels of oxidative damage observed in our study were not sufficient to impair prey detection either because of compensatory mechanisms - such as antioxidant activity - that counteracted the negative effects of oxidative stress, or because the studied brain regions had a high neural density that provided functional resilience [@rice2002brain; @amiel_smart_2011]. Alternatively, the cognitive effects of oxidative stress may not yet be detectable at this stage. Oxidative damage accumulates over time, and its effects on cognition can pronounce with age [@terman2006oxidative; @hara_presynaptic_2014]. As such, we could find a strong relationship if older individuals were employed, but not in lizards this age. In fact, we saw a significant effect of age on DNA damage in olfactory bulbs, and on lipid peroxidation in both regions. Cross-sectional studies across life stages may help reveal how oxidative damage shapes cognitive function over time.  

#### Conclusions
Prenatal incubation and CORT exposure had region-specific effects in the brain of _L. delicata_. While mitochondrial function remained resilient to early environmental conditions, oxidative damage and behavioural responses exhibited context-dependent variations. Our findings suggest that the brain regions studied are not directly related to the behaviours tested, or that other factors, like motivation, are more relevant for detecting prey stimuli. Future studies should explore how the environment influences mitochondrial function accross tissues, as well as the mechanisms underlying the brain’s resilience to early-life conditions.    


### Ethics
Both the breeding animals and the experimental lizards were provided humane laboratory housing, with thermoregulatory opportunities, light (UV and heat) and moderate levels of humidity. Euthanasia was performed by intraperitoneal injection of a 10 mg/kg of a 10 mg/mL alfaxan solution (a potent anesthetic) followed by decapitation. We monitored the animals to ensure there was no irritation from the agent as indicated by distressed animals. Before disposing of the lizard, we confirmed the absence of righting response and pinching reflex in one of the front limbs. All the protocols complied with Australian law and were approved by the Australian National University Animal Experimentation Ethics Committee (A2022/33).

### Data accessibility  
All data, data description, and R code are available in public repository [https://github.com/Pablo-Recio/CORT-Temp_PreyD](https://github.com/Pablo-Recio/CORT_Temp_PreyD).  

### Declaration of AI use
We declare Chat GPT was used mainly for questions related to coding and data analyses. All other parts of the manuscript were written by the authors and those parts where AI was used were checked and modified accordingly by the authors.  

### Authors' contributions
P.R.: conceptualization, methodology, data collection, data curation, formal analysis, writing—original draft, writing—review and editing; D.C.L.: conceptualization, methodology, data collection, data curation, writing—review and editing; O.C.: conceptualization, methodology, writing—review and editing; C.F.: conceptualization, methodology, funding acquisition, writing—review and editing; D.N.: conceptualization, methodology, funding acquisition, project administration, resources, supervision, writing—review and editing.  
All authors gave final approval for publication and agreed to be held accountable for the work performed therein.  

### Conflict of interest declaration  
We declare we have no competing interests.  

### Funding
This work was supported by a National Australian University fellowship (to P.R. and D.C.L.), and the Australian Research Council (grant no. DP210101152) to D.N. and C.R.F.

### Acknowledgements
We thank Mick Devoy and the Cytometry, Histology and Spatial Multiomics team for their advice and help througout the flow cytometry protocols. We thank the help and assistance of our lab technicians Benjamin Durant and Michelle Stephens for taking care of the lizards. We also thank ANU MakerSpace, where we designed and built the prototypes of the 3D printed feeders. The authors acknowledge Microscopy Australia (ROR: 042mm0k03) at the Centre for Advanced Microscopy, The Australian National University, a facility enabled by NCRIS and university support. We specifically thank Dr Angus Rae and Dr Daryl Webb for their help with microscopy protocols. Finally, we wish to acknowledge the anonymous reviewers for their valuable feedback on the manuscript. 


# References
<div id="refs"></div>

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

# Supplementary Material

#### Methods: Flow cytometry
**Brain extraction**: Two months after the completion of the tests, we euthanized lizards using an injectable anaesthetic followed by decapitation. We injected intraperitoneally 10 mg/kg of a 10 mg/mL alfaxan solution and then, after several minutes, we evaluated the lizard’s righting response and pinching reflex in one of the front limbs. Lizards without responses were decapitated with surgical scissors. This protocol was approved by the Animal Ethics Committee of the Australian National University (Protocol number: A2022/33). After decapitation, the head was opened and the brain was dissected. We extracted manually two main regions of the brain, the olfactory bulbs and the optic tecta, as they are associated with chemical and visual perception in lizards [@wyneken2007reptilian]. Both regions were transferred immediately to 1.5mL centrifuge tubes containing 100µL of 1X phosphate buffered saline (PBS).

**Homogenates**: Tissue suspended in PBS was then homogenized. For the olfactory bulbs, the tissue was mechanically homogenized by placing the tissue in the well of a 100 µm mesh filter (pluriStrainer) affixed atop a 1.5 mL centrifuge tube, then mashed with the rubber end of an insulin syringe stopper. The resulting olfactory bulb homogenate was then rinsed through the filter with 1 mL of cold 1X PBS to prepare a homogenate suspension. Optic tecta were mechanically homogenized the same way as olfactory bulbs, but were first enzymatically digested by incubating the tissue in 100µL of 125 U/mL collagenase (type II) for 30-min at 32°C. We enzymatically digested optic tecta but not olfactory bulbs because in a pilot study, enzymatic digestion prior to mechanical digestion improved the yield of viable cells in optic tecta homogenate, but did not noticeably affect the yield of viable cells in olfactory bulbs homogenate (unpublished data). Following homogenization, we centrifuged each sample at 1000 RCF for 10 minutes to pellet cells, then removed the supernatant (hereafter, this process referred to as ‘washing’) and resuspended the cells in 500 µL 1x PBS. This step was performed to remove cellular debris from homogenates. From each 500 µL suspension of homogenate collected on a given trial day, we first added 100 µL of homogenate to a pooled sample of each tissue type to use for single-color controls, and the remaining 40 0µL of homogenate was split among two 200 µL aliquots. One aliquot was used fresh to measure mitochondrial function (mitochondrial density, membrane potential, ROS), one aliquot was cryopreserved for later measurements of oxidative damage (8-OHdG, lipid peroxidation), and the third aliquot was cryopreserved for a different experiment. Aliquots were cryopreserved in 1 mL solution of 1% Neutral-Buffered Formalin (as a fixative agent), 1X Tris-EDTA (chelates metals that can damage DNA during freezing) and 10% DMSO (a cryoprotectant), then stored at -20 °C until oxidative damage assays. 

**Staining fresh samples**: From fresh homogenate suspensions, we loaded the wells of a 96-well flat-bottom plate (Nunclon) with 50 µL of homogenate in duplicates (2 wells per homogenate). To each replicate well, we added 5 µL of a fluorescent probe mix containing equal parts 5 µM MitoTracker Deep Red FM, 2.5 µM MitoTracker Orange CMTMRos, and 50 µM MitoSOX Red. We used these fluorescent probes as indicators of mitochondrial density, mitochondrial membrane potential, and superoxide (ROS) production, respectively. We then added 5 µL of #µM Hoechst 33342 Nuclear Viability Dye to each sample, which we used to distinguish live, viable, intact cells from cellular debris. We then loaded 6 wells with 50 µL of homogenate taken from each pooled homogenate suspension (12 wells total), which were to be negative and single-color controls. One well was left unstained as a negative control, one was stained with all the probes to be a positive control, and the remaining four wells were treated with 5 µL of one of 5 µM MitoTracker Deep Red FM, 2.5 µM MitoTracker Orange CMTMRos, 50 µM MitoSOX Red, or #µM Hoechst 33342 Nuclear Viability Dye. Any remaining pooled homogenate was fixed and frozen as previously described. We incubated the loaded plate at 32 °C for 30 minutes to stain and then diluted the samples with 50 µL cold 1x PBS to halt the staining process. Upon the completion of staining, samples were immediately transferred to flow cytometry facilities for data collection and were sampled within 2 hours. Samples prepared this way remained viable for flow cytometry for approximately 5 hours post-staining at room temperature (~19°C) before cells began rapidly degrading (DCL personal observation).

**Staining cryopreserved samples**: Assays of oxidative damage from cryopreserved samples were performed 61 weeks after the initial processing and analysis of fresh samples. On the day of oxidative damage assays, we rapidly thawed frozen samples by briefly (1-2 minutes) submerging them in warm water. We washed each thawed sample twice, the first time resuspending the pelleted cells in 1 mL warm 1X Tris-EDTA, and the second time in 200 µL warm 1X PBS. Pooled homogenate was divided into 100 µL aliquots to serve as single-color controls. Thawed, resuspended samples were first stained with 20 µL (10 µL for controls) of #µM Hoechst 33342 Nuclear Viability Dye and 20 µL of 100 µM BODIPY 665/676 Lipid Peroxidation Sensor and incubated at 32 °C for 20 minutes. Following staining, we washed cells to prevent further binding of unbound fluorescent probes, then resuspended the pellet in 200 µL warm 1X PBS containing 20 µM digitonin. We incubated the samples at 32 °C for 20 minutes to permeabilize the cell membrane, after which we washed the homogenate and resuspended the pelleted cells in 200 µL 1X PBS. We added 20 µL of 70 µM 8-OHdG Polyclonal Antibody to each sample, after which we left the homogenate overnight (~12 hours) for the antibody to bind to 8-OHdG, a marker of oxidative damage on DNA. The following day we counterstained the cells with 20 µL of #µM (100 µg/mL) H+G Goat Anti-Rabbit Conjugate Antibody with Alexa-Fluor 488 at 32 °C for 20 minutes. After the cells had been tagged with 8-OHdG antibodies and counterstained, we washed the cells once more and resuspended the pellet in 400 µL of 1X PBS. Unstained and single-color controls were treated identically to samples, but stained with only up to one of BODIPY 665/676, Hoechst 33342, 8-OHdG antibody, or Alexa-Fluor 488 conjugate. Additionally, one control was stained with both 8-OHdG antibody and the Alexa-Fluor 488 conjugate. We then loaded a 96-well plate with 100 µL of each single-color control and 100 µL in duplicate of each sample. We performed all flow cytometry assays on samples within 48-hours of thawing the samples.

**Flow cytometry**: All flow cytometry assays were performed using a flow cytometer with 5-lasers (blue, red, yellow-green, violet, and ultraviolet), 20 detectors, and a high-throughput plate reader (Becton Dickson LSRFortessa X-20) using the default wavelength filters on detectors. Immediately prior to all assays, we performed a quality-control check and laser alignment using the CS&T function of BD FACSDiva (v. 8.0.1) and BD CS&T fluorescent beads (Lot No. 30664) diluted at 1 drop of 150 µL 1X PBS. During data collection, data for single-color controls was filtered using a liberal threshold of 200 on the FSC (roughly, cell size) detector, while data from samples was filtered using a threshold of 200 on the BUV-496 (Hoechst 33342) detector. These thresholds were chosen to filter small debris or inviable or non-intact cells from our observations. The detectors and voltage settings used in data acquisition for each assay type (mitochondrial function, oxidative damage) were determined during pilot trials prior to assays and were not changed during assays to allow for comparison among different plates and samples throughout the experiment. Voltages were chosen to center the distribution of observations in each channel at 10^3^ fluorescent intensity and reduce observations of off-scale (<10^1^ or >10^5^) events. For the mitochondrial function assay, we recorded data from the following channels (in brackets: voltage; parameter): FSC (44; forward scatter), SSC (180; side scatter), Alexa-Fluor 488 (544; autofluorescence), BUV-496 (450; Hoechst 33342), APC (647; MitoTracker Deep Red FM), PE (522; MitoTracker Orange CMTMRos), and PerCP-Cy5-5 (592; MitoSOX Red) channels. For the oxidative damage assay, we recorded data from the following channels: FSC (425; forward scatter), SSC (300; side scatter), Alexa-Fluor 488 (275; 8-OHdG Antibody + Alexa-Fluor 488 conjugate), BUV-496 (525; Hoechst 33342), and PE-Cy5 (850; BODIPY 665/676). Fluorescent intensity data was collected via the BD FACSDiva (v. 8.0.1) software, with no compensation applied during data collection, and all on a linear scale (detectable range of 0-252166). We recorded data for both the area and height of the fluorescent signal, but only used the area in downstream analyses, with height being recorded for the sake of quality control. Data was exported from BD FACSDiva as individual *.fcs (“flow cytometry standard”) files for each sample, then imported into FlowJo (v. 10.1) for processing.

**Data processing**: In FlowJo v. 10.1 we first transformed all fluorescent data to a logarithmic base 10 scale, then applied a basic gating process across all channels by filtering to observations within the detectable range (10^1^-10^5^) to remove any off-scale events. We then used a backgating process wherein we aimed to identify the approximate FSC (cell size) and SSC (cell complexity) range of viable cells that were positive for all stains. We primarily used the BUV-496 channel (Hoechst 33342) in the backgating process to identify intact, nucleated cells (BUV-496 > 10^3^). For the mitochondrial function assay, we aimed to identify populations of viable cells containing mitochondria (APC > 10^3^) and actively respiring (PE and PerCP-Cy5-5 > 10^3^). For the oxidative damage assay, we aimed to identify populations of cells exhibiting both DNA damage (Alexa-Fluor 488 > 10^3^) and lipid peroxidation (PerCP > 10^3^). When backgating was done, we filtered the data to the FSC by SSC range that captured the ideal population. We used the backgated population for compensation of fluorescent spillover between different fluorescent probes. To account for fluorescent spillover, we used a traditional compensation matrix using the compensation function of FlowJo v.10.1. We identified the “positive” population for each channel as the brightest ~2.5% of the distribution of observations in the respective single-color control for that channel and used unstained controls as a universal negative. We visually inspected the compensation matrix and its effects on population distributions for under- and over-compensation, whereupon we changed the compensation matrix manually until data was properly compensated. We applied the compensation matrix to all samples for downstream processing. Following compensation, we again gated the data following the same process as for backgating but using the compensated parameters for each channel. Following gating, we exported the geometric mean (mean fluorescent intensity; MFI) and robust confidence-values for each channel for each sample. For analysis, we exported summary statistics of only the area of the fluorescent signal. Although we exported robust confidence values for checking repeatability between replicate samples, we used the mean and standard deviation of geometric means among replicates for each individual as our main response variables in analyses.  

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```


#### Results of the final models

Table S1. R^2^ values of the definite models for both regions and stimuli.
```{r, table_bayesR2}
#| label: table_bayesR2
#| tbl-cap: "BayesR2 values of the definite models for both regions and stimuli."
#
data_bayes <- data.frame(
  Model = character(0),
  Mean = numeric(0),
  Error = numeric(0),
  Q2_5 = numeric(0),
  Q97_5 = numeric(0)
)
models <- c("mean_mitodensity_def_OB",
            "mean_potential_def_OB",
            "mean_ros_def_OB",
            "mean_dnadamage_def_OB",
            "mean_peroxidation_def_OB",
            "t_D_def_Chemical",
            "mean_mitodensity_def_OT",
            "mean_potential_def_OT",
            "mean_ros_def_OT",
            "mean_dnadamage_def_OT",
            "mean_peroxidation_def_OT",
            "t_D_def_Visual")
#
for (m in models){
  mod <- readRDS(here("output/models/", paste0(m, ".rds")))
  bayes <- bayes_R2(mod)
  data_bayes <- rbind(data_bayes, data.frame(
    Model = m,
    Mean = format_dec(bayes[1], 3),
    Error = format_dec(bayes[2], 3),
    Q2_5 = format_dec(bayes[3], 3),
    Q97_5 = format_dec(bayes[4], 3)
  ))
}
#
bayes_table_df <- data_bayes %>%
  mutate(Region = gsub(".*_", "", Model)    # Extract everything after the last "_"
  ) %>%
  mutate(Model = factor(Model,
                        levels = c("mean_mitodensity_def_OB",
                                  "mean_potential_def_OB",
                                  "mean_ros_def_OB",
                                  "mean_dnadamage_def_OB",
                                  "mean_peroxidation_def_OB",
                                  "t_D_def_Chemical",
                                  "mean_mitodensity_def_OT",
                                  "mean_potential_def_OT",
                                  "mean_ros_def_OT",
                                  "mean_dnadamage_def_OT",
                                  "mean_peroxidation_def_OT",
                                  "t_D_def_Visual"),
                        labels = c("m_def_mean_mitodensity_OB" = "Mit density",
                                  "m_def_mean_potential_OB" = "Mit potential",
                                  "m_def_mean_ros_OB" = "ROS",
                                  "m_def_mean_dnadamage_OB" = "DNA damage",
                                  "m_def_mean_peroxidation_OB" = "Peroxidation",
                                  "m_def_t_D_Chemical" = "Detection lat",
                                  "m_def_mean_mitodensity_OT" = "Mit density",
                                  "m_def_mean_potential_OT" = "Mit potential",
                                  "m_def_mean_ros_OT" = "ROS",
                                  "m_def_mean_dnadamage_OT" = "DNA damage",
                                  "m_def_mean_peroxidation_OT" = "Peroxidation",
                                  "m_def_t_D_Visual" = "Detection lat")),
      Region = factor(Region, levels = c("OB", "Chemical", "OT", "Visual"),
                      labels = c("OB" = "Olfactory bulbs",
                                "Chemical" = "Chemical",
                                "OT" = "Optic tecta",
                                "Visual" = "Visual"))) %>%
  dplyr::select(Region, Model, Mean, Error, Q2_5, Q97_5) %>%
  arrange(Region, Model)
#
#
# Create the table
#
## Table format
set_flextable_defaults(
 font.family = "Times New Roman",
 font.size = 10)
#
bayes_table <- flextable(bayes_table_df) %>%
  set_header_labels(
    Region = "Region/Stimulus",
    Mean = "Mean",
    Error = "Error",
    Q2_5 = "2.5%",
    Q97_5 = "97.5%") %>%
  align(align = "center", j = c(3:5), part = "body") %>%
  align(align = "center", j = c(1:5), part = "header") %>%
  flextable::compose(i = c(2:5,8:11), j = 1, value = as_paragraph(""), part = "body") %>% # To remove some of the values in the first column
  flextable::hline(i = 6, part = "body") %>% 
  autofit()
#
bayes_table
```

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```


Table S2. Estimate of the contrasts between treatments for all the variables analysed, and pMCMC values testing the hypothesis that contrast is different from 0. In bold, the values that are significant at pMCMC < 0.05.
```{r tbl-contrasts}
#| label: tbl-contrasts
#| tbl-cap: "Contrasts between prenatal conditions for mitochondrial physiology and learning."
#
source(here("R", "func.R"))
#
# A) Organise df 
var <- c("MD", "MP", "ROS", "DNA", "LP", "DET")
region <- c("OB", "OT")
#
data_table <- data.frame()
for(v in var){
  for(r in region){
    x <- paste0(v, "_", r)
    df <- get(x)
    Temperature <- format_dec(mean(c(df$CORT_Hot, df$Control_Hot)) - mean(c(df$CORT_Cold, df$Control_Cold)), 3)
    pMCMC_temp <- format_p(pmcmc(c(df$CORT_Hot, df$Control_Hot) - c(df$CORT_Cold, df$Control_Cold)), 3, equal = FALSE)
    CORT <- format_dec(mean(c(df$Control_Hot, df$Control_Cold)) - mean(c(df$CORT_Hot, df$CORT_Cold)), 3)
    pMCMC_cort <- format_p(pmcmc(c(df$Control_Hot, df$Control_Cold) - c(df$CORT_Hot, df$CORT_Cold)), 3, equal = FALSE)
    Interaction <- format_dec((mean(df$Control_Hot) - mean(df$CORT_Hot)) - (mean(df$Control_Cold) - mean(df$CORT_Cold)), 3)
    pMCMC_int <- format_p(pmcmc((df$Control_Hot - df$CORT_Hot) - (df$Control_Cold - df$CORT_Cold)), 3, equal = FALSE)
    data_temp <- data.frame(Variable = x,
                          Temperature = as.numeric(Temperature),
                          pMCMC_temp = pMCMC_temp,
                          CORT = as.numeric(CORT),
                          pMCMC_cort = pMCMC_cort,
                          Interaction = as.numeric(Interaction),
                          pMCMC_int = pMCMC_int)
    data_table <- dplyr::bind_rows(data_table, data_temp)
  }
}
# Modify the df
data_table_final <- data_table %>%
  pivot_longer(cols = c(Temperature, CORT, Interaction), 
               names_to = "Predictor", 
               values_to = "Contrast") %>%
  mutate(
    # Extract the pMCMC values from the corresponding columns
    `pMCMC contrast` = case_when(
      Predictor == "Temperature" ~ pMCMC_temp,
      Predictor == "CORT" ~ pMCMC_cort,
      Predictor == "Interaction" ~ pMCMC_int
    )
  ) %>%
  separate(col = Variable, into = c("Variable", "Region"), sep = "_") %>%
  mutate(
    Variable = case_when(
      Variable == "MD" ~ "Mit density",
      Variable == "MP" ~ "Mit potential",
      Variable == "ROS" ~ "ROS",
      Variable == "DNA" ~ "DNA damage",
      Variable == "LP" ~ "Lipid peroxidation",
      Variable == "DET" ~ "Detection latency",
      TRUE ~ Variable
      )
    ) %>%
  mutate(Variable = factor(Variable, levels = c("Mit density", "Mit potential", "ROS", "DNA damage", "Lipid peroxidation", "Detection latency"))) %>%
  mutate(
    Region = case_when(
      Region == "OB" ~ "Olfactory bulbs / Chemical",
      Region == "OT" ~ "Optic tecta / Visual",
      TRUE ~ Region
    )
  ) %>%
  dplyr::select(Region, Variable, Predictor, Contrast, `pMCMC contrast`) %>%
  arrange(Region, Variable)
#
# C) Make the contrasts table:
#
set_flextable_defaults(
 font.family = "Times New Roman",
 font.size = 10)
#
contrast_table <- flextable(data_table_final) %>%
  align(align = "center", j = c(4,5), part = "body") %>%
  align(align = "center", j = c(1:4), part = "header") %>%
  bold(~`pMCMC contrast` < 0.05, j = c("pMCMC contrast", "Contrast", "Predictor"),
       bold = TRUE) %>%  # Bold when PMCMC is "<0.05"
  bold(~`pMCMC contrast` <0.001, j = c("pMCMC contrast", "Contrast", "Predictor")) %>%  # Bold when PMCMC is "<0.001"
  flextable::compose(i = c(2:18,20:36), j = 1, value = as_paragraph(""), part = "body") %>%
  flextable::compose(i = c(2,3,5,6,8,9,11,12,14,15,17,18,20,21,23,24,26,27,29,30,32,33,35,36),
                    j = 2, value = as_paragraph(""), part = "body") %>% # To remove some of the values in the second column
  flextable::hline(i = c(3,6,9,12,15,21,24,27,30,33,36), j = c(2:5), part = "body") %>% 
  flextable::hline(i = 18, part = "body") %>%
  autofit()
#
contrast_table
```

Contrasts were done by:  
_Temperature_: β~Hot~ - β~Cold~  
_CORT_: β~CORT~ - β~Control~    
_Interaction_: (β~Control-Hot~ - β~CORT-Hot~) - (β~Control-Cold~ - β~CORT-Cold~)  

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```


Table S3. Summary of the final models for Olfactory Bulbs/Chemical stimulus.
```{r, tbl-results_OB_table}
#| label: results_OB_table
#| tbl-cap: "Results of the models testing for Olfactory Bulbs."
#| tbl-name: "results_OB"
#| tbl-label: "results_OB"
source(here("R", "func.R"))
# 
# A) Refining the df summarizing the posteriors for OB/Chemical stimulus (post_OB)
post_OB_refined <- refine_post(post_OB) %>%
  arrange(Variable, Predictors)
#
# B) Create table
## Table format
set_flextable_defaults(
 font.family = "Times New Roman",
 font.size = 10)
#
OB_table <- flextable(post_OB_refined) %>%
  align(align = "center", j = c(3:5), part = "body") %>%
  align(align = "center", j = c(1:5), part = "header") %>%
  bold(~`PMCMC` < 0.05, j = c("PMCMC", "Estimate Mean", "95% CI", "Predictors"),
       bold = TRUE) %>%  # Bold when PMCMC is "<0.05"
  bold(~`PMCMC` <0.001, j = c("PMCMC", "Estimate Mean", "95% CI", "Predictors")) %>%  # Bold when PMCMC is "<0.001"
  flextable::compose(i = c(2:4,6:8,10:12,14:18,20:23,25:27), j = 1, value = as_paragraph(""), part = "body") %>% # To remove some of the values in the first column
  autofit()
#
OB_table
```

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S4. Summary of the final models for Optic Tecta/Visual stimulus.
```{r, tbl-results_OT_table}
#| label: results_OT_table
#| tbl-cap: "Results of the models testing for Olfactory Bulbs."
#| tbl-name: "results_OT"
#| tbl-label: "results_OT"
source(here("R", "func.R"))
# 
# A) Refining the df summarizing the posteriors for OT/Visual stimulus (post_OT)
post_OT_refined <- refine_post(post_OT) %>%
  arrange(Variable, Predictors)
#
# B) Create table
## Table format
set_flextable_defaults(
 font.family = "Times New Roman",
 font.size = 10)
#
OT_table <- flextable(post_OT_refined) %>%
  align(align = "center", j = c(3:5), part = "body") %>%
  align(align = "center", j = c(1:5), part = "header") %>%
  bold(~`PMCMC` < 0.05, j = c("PMCMC", "Estimate Mean", "95% CI", "Predictors"),
       bold = TRUE) %>%  # Bold when PMCMC is "<0.05"
  bold(~`PMCMC` <0.001, j = c("PMCMC", "Estimate Mean", "95% CI", "Predictors")) %>%  # Bold when PMCMC is "<0.001"
  flextable::compose(i = c(2:4,6:8,10:12,14:17,19:22,24:26), j = 1, value = as_paragraph(""), part = "body") %>% # To remove some of the values in the first column
  autofit()
#
OT_table
```

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

#### Results of the SEM

Table S5. Compiled direct, indirect, and total effects of SEM for OB/Chemical stimulus
```{r, table_sem_results_OB}
#| label: table_sem_results_OB
#| fig-cap: ""
#
# Table created from the df sem_results_OB (see above)
source(here("R", "func.R"))
#
# Modify database
table_semOB_df <- sem_results_OB %>%
  mutate(`Direct effects` = paste0(mean_direct_effects, " [", q5_direct, ", ", q95_direct, "]"),
         `Indirect effects` = paste0(mean_indirect_effects, " [", q5_indirect, ", ", q95_indirect, "]"),
         `Total effects` = paste0(mean_total_effects, " [", q5_total, ", ", q95_total, "]")) %>%
  dplyr::select(source, predictor_modulator, `Direct effects`, `Indirect effects`, `Total effects`) %>%
  mutate(
      predictor_modulator = case_when(
        predictor_modulator == "mean_mitodensity" ~ "Mitochondrial density",
        predictor_modulator == "mean_potential" ~ "Metabolic capacity",
        predictor_modulator == "mean_dnadamage" ~ "DNA damage",
        predictor_modulator == "mean_peroxidation" ~ "Lipid peroxidation",
        predictor_modulator == "ROS" ~ "ROS",
        TRUE ~ predictor_modulator
      ),
      source = case_when(
        source == "det_results_semOB" ~ "Detection latency",
        source == "dna_results_semOB" ~ "DNA damage",
        source == "perox_results_semOB" ~ "Lipid peroxidation",
        source == "ros_results_semOB" ~ "ROS",
        TRUE ~ source
      ),
      `Direct effects` = case_when(`Direct effects` == "NaN [NA, NA]" ~ " - ", TRUE ~ `Direct effects`),
      `Indirect effects` = case_when(`Indirect effects` == "NaN [NA, NA]" ~ " - ", TRUE ~ `Indirect effects`),
      `Total effects` = case_when(`Total effects` == "NaN [NA, NA]" ~ " - ", TRUE ~ `Total effects`)) %>%
  rename(Predictor = predictor_modulator, Response = source) %>%
  mutate(Response = factor(Response, levels = c("Detection latency", "DNA damage", "Lipid peroxidation", "ROS")),
         Predictor = factor(Predictor, levels = c("Mitochondrial density",
                                                "Metabolic capacity",
                                                "ROS",
                                                "DNA damage",
                                                "Lipid peroxidation"))) %>%
  arrange(Response, Predictor)
#
# Table format
set_flextable_defaults(
 font.family = "Times New Roman",
 font.size = 10)
#
table_semOB <- flextable(table_semOB_df) %>%
  align(align = "center", part = "header") %>%
  flextable::compose(i = c(2:5,7,8,10,11,13), j = 1, value = as_paragraph(""), part = "body") %>% # To remove some of the values in the first column
  flextable::hline(i = c(5,8,11), part = "body") %>% 
  autofit()
#
table_semOB
```

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```


Table S6. Compiled direct, indirect, and total effects  of SEM for OT/Visual stimulus
```{r, table_sem_results_OT}
#| label: table_sem_results_OT
#| fig-cap: ""
#
# Table created from the df sem_results_OT (see above)
source(here("R", "func.R"))
#
# Modify database
table_semOT_df <- sem_results_OT %>%
  mutate(`Direct effects` = paste0(mean_direct_effects, " [", q5_direct, ", ", q95_direct, "]"),
         `Indirect effects` = paste0(mean_indirect_effects, " [", q5_indirect, ", ", q95_indirect, "]"),
         `Total effects` = paste0(mean_total_effects, " [", q5_total, ", ", q95_total, "]")) %>%
  dplyr::select(source, predictor_modulator, `Direct effects`, `Indirect effects`, `Total effects`) %>%
  mutate(
      predictor_modulator = case_when(
        predictor_modulator == "mean_mitodensity" ~ "Mitochondrial density",
        predictor_modulator == "mean_potential" ~ "Metabolic capacity",
        predictor_modulator == "mean_dnadamage" ~ "DNA damage",
        predictor_modulator == "mean_peroxidation" ~ "Lipid peroxidation",
        predictor_modulator == "ROS" ~ "ROS",
        TRUE ~ predictor_modulator
      ),
      source = case_when(
        source == "det_results_semOT" ~ "Detection latency",
        source == "dna_results_semOT" ~ "DNA damage",
        source == "perox_results_semOT" ~ "Lipid peroxidation",
        source == "ros_results_semOT" ~ "ROS",
        TRUE ~ source
      ),
      `Direct effects` = case_when(`Direct effects` == "NaN [NA, NA]" ~ " - ", TRUE ~ `Direct effects`),
      `Indirect effects` = case_when(`Indirect effects` == "NaN [NA, NA]" ~ " - ", TRUE ~ `Indirect effects`),
      `Total effects` = case_when(`Total effects` == "NaN [NA, NA]" ~ " - ", TRUE ~ `Total effects`)) %>%
  rename(Predictor = predictor_modulator, Response = source) %>%
  mutate(Response = factor(Response, levels = c("Detection latency", "DNA damage", "Lipid peroxidation", "ROS")),
         Predictor = factor(Predictor, levels = c("Mitochondrial density",
                                                "Metabolic capacity",
                                                "ROS",
                                                "DNA damage",
                                                "Lipid peroxidation"))) %>%
  arrange(Response, Predictor)
#
# Table format
set_flextable_defaults(
 font.family = "Times New Roman",
 font.size = 10)
#
table_semOT <- flextable(table_semOT_df) %>%
  align(align = "center", part = "header") %>%
  flextable::compose(i = c(2:5,7,8,10,11,13), j = 1, value = as_paragraph(""), part = "body") %>% # To remove some of the values in the first column
  flextable::hline(i = c(5,8,11), part = "body") %>% 
  autofit()
#
table_semOT
```


#### Results of preliminary models 

```{r, models_preliminary}
#| label: models_preliminary
# Fitting intial models to see if sex and age are relevant for our models
source(here("R", "func.R"))
#
#
# Run models mitochondrial physiology (each region separately)
#
var_m <- c("mean_mitodensity", "mean_potential", "mean_conpotential", "mean_ros", "mean_conros", "mean_dnadamage", "mean_peroxidation")
regions <- c("OB", "OT")
formula_list_ <- list()
for (p in var_m){
  formula_list_[[p]] <- paste0(p, "~ cort*temp + age_euthanasia + sex + (1|clutch)")
  for (h in regions){
    if (h == "OB"){
      df <- clean_df %>% filter(region == "OB")
      l <- "OB"
    } else {
      df <- clean_df %>% filter(region == "OT")
      l <- "OT"
    }
  
  pmodel_name <- paste0("m_prel_", p, "_", h)
  assign(pmodel_name, fit_m(df = df,
                             cat = "prel",
                             var = p,
                             formula = formula_list_[[p]],
                             fam = gaussian(),
                             label = l,
                             refit = FALSE),
          envir = .GlobalEnv)  # Assign to the global environment
  }
}
#
#
# Run model behaviour (stimuli separated)
beh_df <- clean_df
stimulus <- c("Chemical", "Visual")
formula_t_D <- t_D ~ motivation + motivation:cort + cort*temp + age_trial + sex + prey +(1|clutch) + (1|lizard_id) 
for (k in stimulus){
  df <- beh_df %>% filter(stimulus == k)
  pmodel_name <- paste0("m_prel_t_D_", k)
  assign(pmodel_name, fit_m(df = df,
                            cat = "prel",
                            var = "t_D",
                            formula = formula_t_D,
                            fam = gaussian(),
                            label = k,
                            refit = FALSE),
        envir = .GlobalEnv)  # Assign to the global environment
}
```

Table S7. Summary of the preliminary model for Mitochondrial Density in Olfactory Bulbs.
```{r, results_preliminary_mitdensity_OB}
#| tbl-cap: "Preliminary results of the models testing for Mitochondrial Density in OB"
#| label: results_preliminary_mitdensity
#
sum_m_mitdensity_OB_prel <- m_prel_mean_mitodensity_OB %>%
  dplyr::select(-starts_with("r_"), -sigma, -Intercept, -lprior, -lp__) %>%  # Removes random effect terms
  summarise_draws()  %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_mitdensity_OB_prel)
```

Model formula: mean_mitodensity ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of sex or age, so they were discarded from the final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S8. Summary of the preliminary model for Mitochondrial Density in Optic Tecta.
```{r, results_preliminary_mitdensity_OT}
#| tbl-cap: "Preliminary results of the models testing for Mitochondrial Density in OT"
#| label: results_preliminary_mitdensity_OT
#
sum_m_mitdensity_OT_prel <- m_prel_mean_mitodensity_OT %>%
  dplyr::select(-starts_with("r_"), -sigma, -Intercept, -lprior, -lp__) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_mitdensity_OT_prel)
```

Model formula: mean_mitodensity ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of sex or age, so they were discarded from the final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S9. Summary of the preliminary model for Metabolic capacity in Olfactory Bulbs.
```{r, results_preliminary_potential_OB}
#| tbl-cap: "Preliminary results of the models testing for metabolic capacity in OB"
#| label: results_preliminary_potential_OB
#
sum_m_potential_OB_prel <- m_prel_mean_potential_OB %>%
  dplyr::select(-starts_with("r_"), -sigma, -Intercept, -lprior, -lp__) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_potential_OB_prel)
```

Model formula: mean_potential ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of sex or age, so they were discarded from the final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S10. Summary of the preliminary model for Metabolic capacity in Optic Tecta.
```{r, results_preliminary_potential_OT}
#| tbl-cap: "Preliminary results of the models testing for Metabolic capacity in OT"
#| label: results_preliminary_potential_OT
#
sum_m_potential_OT_prel <- m_prel_mean_potential_OT %>%
  dplyr::select(-starts_with("r_"), -sigma, -Intercept, -lprior, -lp__) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_potential_OT_prel)
```

Model formula: mean_potential ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of sex or age, so they were discarded from the final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S11. Summary of the preliminary model for ROS Production in Olfactory Bulbs.
```{r, results_preliminary_ros_OB}
#| tbl-cap: "Preliminary results of the models testing for ROS Production in OB"
#| label: results_preliminary_ros_OB
#
sum_m_ros_OB_prel <- m_prel_mean_ros_OB %>%
  dplyr::select(-starts_with("r_"), -sigma, -Intercept, -lprior, -lp__) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_ros_OB_prel)
```

Model formula: mean_ros ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of sex or age, so they were discarded from the final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S12. Summary of the preliminary model for ROS Production in Optic Tecta.
```{r, results_preliminary_ros_OT}
#| tbl-cap: "Preliminary results of the models testing for ROS Production in OT"
#| label: results_preliminary_ros_OT
#
sum_m_ros_OT_prel <- m_prel_mean_ros_OT %>%
  dplyr::select(-starts_with("r_"), -sigma, -Intercept, -lprior, -lp__) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_ros_OT_prel)
```

Model formula: mean_ros ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of sex or age, so they were discarded from the final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S13. Summary of the preliminary model for DNA Damage in Olfactory Bulbs.
```{r, results_preliminary_dnadamage_OB}
#| tbl-cap: "Preliminary results of the models testing for DNA Damage in OB"
#| label: results_preliminary_dnadamage_OB
#
sum_m_dnadamage_OB_prel <- m_prel_mean_dnadamage_OB %>%
  dplyr::select(-starts_with("r_"), -sigma, -Intercept, -lprior, -lp__) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_dnadamage_OB_prel)
```

Model formula: mean_dnadamage ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates an effect of sex and age, so they were included in the final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S14. Summary of the preliminary model for DNA Damage in Optic Tecta.
```{r, results_preliminary_dnadamage_OT}
#| tbl-cap: "Preliminary results of the models testing for DNA Damage in OT"
#| label: results_preliminary_dnadamage_OT
#
sum_m_dnadamage_OT_prel <- m_prel_mean_dnadamage_OT %>%
  dplyr::select(-starts_with("r_"), -sigma, -Intercept, -lprior, -lp__) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_dnadamage_OT_prel)
```

Model formula: mean_dnadamage ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of age, so it was discarded from the final models. However, we saw an effect of sex and we included it in our final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S15. Summary of the preliminary model for Lipid Peroxidation in Olfactory Bulbs.
```{r, results_preliminary_peroxidation_OB}
#| tbl-cap: "Preliminary results of the models testing for Lipid Peroxidation in OB"
#| label: results_preliminary_peroxidation_OB
#
sum_m_peroxidation_OB_prel <- m_prel_mean_peroxidation_OB %>%
  dplyr::select(-starts_with("r_"), -sigma, -Intercept, -lprior, -lp__) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_peroxidation_OB_prel)
```

Model formula: mean_peroxidation ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of sex, so it was discarded from the final models. However, we saw an effect of age and we included it in our final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S16. Summary of the preliminary model for Lipid Peroxidation in Optic Tecta.
```{r, results_preliminary_peroxidation_OT}
#| tbl-cap: "Preliminary results of the models testing for Lipid Peroxidation in OT"
#| label: results_preliminary_peroxidation_OT
#
sum_m_peroxidation_OT_prel <- m_prel_mean_peroxidation_OT %>%
  dplyr::select(-starts_with("r_"), -sigma, -Intercept, -lprior, -lp__) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_peroxidation_OT_prel)
```

Model formula: mean_peroxidation ~ cort * temp + age_euthanasia + sex + (1|clutch).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of sex, so it was discarded from the final models. However, we saw an effect of age and we included it in our final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S17. Summary of the preliminary model for Detection Latency (t_D) of Chemical stimuli. 
```{r, results_preliminary_t_D_Chemical}
#| tbl-cap: "Preliminary results of the models testing for Detection Latency (t_D) of Chemical stimuli"
#| label: results_preliminary_t_D_Chemical
# 
sum_m_t_D_prel_Chem <- m_prel_t_D_Chemical %>%
  dplyr::select(-starts_with("r_"), -sigma, -Intercept, -lprior, -lp__) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_t_D_prel_Chem)
```

Model formula: t_D~ motivation + cort:motivation + cort * temp + age_trial + sex + prey + (1|clutch) + (1|lizard_id).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of age, sex, familiarity with prey (prey), motivation, or the cort-motivation interaction, so they were discarded from the final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

Table S18. Summary of the preliminary model for Detection Latency (t_D) of Visual stimuli.
```{r, results_preliminary_t_D_Visual}
#| tbl-cap: "Preliminary results of the models testing for Detection Latency (t_D) of Visual stimuli"
#| label: results_preliminary_t_D_Visual
#
sum_m_t_D_prel_Vis <- m_prel_t_D_Visual %>%
  dplyr::select(-starts_with("r_"), -sigma, -Intercept, -lprior, -lp__) %>%  # Removes random effect terms
  summarise_draws() %>%
  mutate(across(where(is.numeric), ~ as.numeric(format_dec(.x, 3))))
#
flextable(sum_m_t_D_prel_Vis)
```

Model formula: t_D~ motivation + cort:motivation + cort * temp + age_trial + sex + prey + (1|clutch) + (1|lizard_id).
Model convergence was checked through rhat and ess_bulk values. Summary indicates no effect of age, sex, familiarity with prey (prey), motivation, or the cort-motivation interaction, so they were discarded from the final models.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```



#### Final models diagnostics (plots)

```{r , plotmod_mitdensity_OB, out.width="70%", fig.align="center"}
#| label: plotmod_mitdensity_OB
#| caption: "Posterior predictive checks for the model of Mitochondrial Density in Olfactory Bulbs."
#
mod <- readRDS(here("output/models/mean_mitodensity_def_OB.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX3.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX3.png")
```

Fig S1. Posterior predictive checks for the model of Mitochondrial Density in Olfactory Bulbs.
Formula: mean_mitodensity ~ cort * temp + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_mitdensity_OT, out.width="70%", fig.align="center"}
#| label: plotmod_mitdensity_OT
#| caption: "Posterior predictive checks for the model of Mitochondrial Density in Optic Tecta."
#
mod <- readRDS(here("output/models/mean_mitodensity_def_OT.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX4.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX4.png")
```

Fig S2. Posterior predictive checks for the model of Mitochondrial Density in Optic Tecta.
Formula: mean_mitodensity ~ cort * temp + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_potential_OB, out.width="70%", fig.align="center"}
#| label: plotmod_potential_OB
#| caption: "Posterior predictive checks for the model of Metabolic capacity in Olfactory Bulbs."
#
mod <- readRDS(here("output/models/mean_potential_def_OB.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX5.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX5.png")
```

Fig S3. Posterior predictive checks for the model of Metabolic capacity in Olfactory Bulbs.
Formula: mean_potential ~ cort * temp + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_potential_OT, out.width="70%", fig.align="center"}
#| label: plotmod_potential_OT
#| caption: "Posterior predictive checks for the model of Metabolic capacity in Optic Tecta."
#
mod <- readRDS(here("output/models/mean_potential_def_OT.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX6.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX6.png")
```

Fig S4. Posterior predictive checks for the model of Metabolic capacity in Optic Tecta.
Formula: mean_potential ~ cort * temp + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_ros_OB, out.width="70%", fig.align="center"}
#| label: plotmod_ros_OB
#| caption: "Posterior predictive checks for the model of ROS Production in Olfactory Bulbs."
#
mod <- readRDS(here("output/models/mean_ros_def_OB.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX7.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX7.png")
```

Fig S5. Posterior predictive checks for the model of ROS Production in Olfactory Bulbs.
Formula: mean_ros ~ cort * temp + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_ros_OT, out.width="70%", fig.align="center"}
#| label: plotmod_ros_OT
#| caption: "Posterior predictive checks for the model of ROS Production in Optic Tecta."
#
mod <- readRDS(here("output/models/mean_ros_def_OT.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX8.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX8.png")
```

Fig S6. Posterior predictive checks for the model of ROS Production in Optic Tecta.
Formula: mean_ros ~ cort * temp + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_dnadamage_OB, out.width="70%", fig.align="center"}
#| label: plotmod_dnadamage_OB
#| caption: "Posterior predictive checks for the model of DNA Damage in Olfactory Bulbs."
#
mod <- readRDS(here("output/models/mean_dnadamage_def_OB.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX9.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX9.png")
```

Fig S7. Posterior predictive checks for the model of DNA Damage in Olfactory Bulbs.
Formula: mean_dnadamage ~ cort * temp + age_euthanasia + sex + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_dnadamage_OT, out.width="70%", fig.align="center"}
#| label: plotmod_dnadamage_OT
#| caption: "Posterior predictive checks for the model of DNA Damage in Optic Tecta."
#
mod <- readRDS(here("output/models/mean_dnadamage_def_OT.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX10.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX10.png")
```

Fig S8. Posterior predictive checks for the model of DNA Damage in Optic Tecta.
Formula: mean_dnadamage ~ cort * temp + sex + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_peroxidation_OB, out.width="70%", fig.align="center"}
#| label: plotmod_peroxidation_OB
#| caption: "Posterior predictive checks for the model of Lipid Peroxidation in Olfactory Bulbs."
#
mod <- readRDS(here("output/models/mean_peroxidation_def_OB.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX11.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX11.png")
```

Fig S9. Posterior predictive checks for the model of Lipid Peroxidation in Olfactory Bulbs.
Formula: mean_peroxidation ~ cort * temp + age_euthanasia + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_peroxidation_OT, out.width="70%", fig.align="center"}
#| label: plotmod_peroxidation_OT
#| caption: "Posterior predictive checks for the model of Lipid Peroxidation in Optic Tecta."
#
mod <- readRDS(here("output/models/mean_peroxidation_def_OT.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX12.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX12.png")
```

Fig S10. Posterior predictive checks for the model of Lipid Peroxidation in Optic Tecta.
Formula: mean_peroxidation ~ cort * temp + age_euthanasia + (1|clutch)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_tD_Chemical, out.width="70%", fig.align="center"}
#| label: plotmod_tD_Chemical
#| caption: "Posterior predictive checks for the model of Detection Latency (t_D) in Chemical trials."
#
mod <- readRDS(here("output/models/t_D_def_Chemical.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX1.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX1.png")
```

Fig S11. Posterior predictive checks for the model of Detection Latency (t_D) in Chemical trials.
Formula: t_D~ cort * temp + motivation + cort:motivation + (1|clutch) + (1|lizard_id)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

```{r , plotmod_tD_Visual, out.width="70%", fig.align="center"}
#| label: plotmod_tD_Visual
#| caption: "Posterior predictive checks for the model of Detection Latency (t_D) in Visual trials."
#
mod <- readRDS(here("output/models/t_D_def_Visual.rds"))
plot_mod <- plot(mod, plot = FALSE)
#
plot_mod_1 <- plot_mod[[1]]
plot_mod_2 <- plot_mod[[2]]
#
fig_mod <- plot_grid(plot_mod_1, plot_mod_2, ncol = 1)
ggsave("./output/figures/suppl/Figure_SX2.png", plot = fig_mod,
       width = 20, height = 28, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX2.png")
```

Fig S12. Posterior predictive checks for the model of Detection Latency (t_D) in Visual trials.
Formula: t_D~ cort * temp + (1|clutch) + (1|lizard_id)

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```

#### What did average mitochondria do?

When obtaining data using FlowJo, we got the geometric mean value for each event recorded in the flow cytometer after gatting for positive values in the dyes employed (see _Methods: Flow cytometry_). However, this is not informative about the effects per mitochondria. In other words, we might be loosing some resolution about the effects at a mitochondrial level rather than a cellular level. To further investigate the effects per mitochondrial unit, we repeated the models above but dividing each variable by mean mitochondrial density obtained for each individual.  

```{r, data_mitochondrial_controlled}
#| label: data_mitochondrial_controlled
# 
mit_controlled <- mit_df %>%
    mutate(Id_flow = as.character(Id_flow)) %>%
    mutate(mean_dnadamage = log10(mean_dnadamage + 1)) %>%
    mutate(mean_peroxidation = log10(mean_peroxidation + 1)) %>%
    mutate(across(where(~ is.numeric(.)), ~.x / mean_mitodensity))
#
df_controlled <- merge(data_discr, mit_controlled, by = c("stimulus", "Id_flow")) %>%
  mutate(across(c(age_trial, age_euthanasia), as.numeric)) %>%
  mutate(across(where(~ is.double(.) & !is.integer(.)),
                ~ (. - mean(., na.rm = TRUE)) / (2 * sd(., na.rm = TRUE))))
```

```{r, models_mitochondrial_controlled}
#| label: models_mitochondrial_controlled
#
# Run models mitochondrial physiology from df_controlled (each region separately)
#
var_m_controlled <- c("mean_potential", "mean_ros", "mean_dnadamage", "mean_peroxidation")
regions <- c("OB", "OT")
for (p in var_m_controlled){
  for (h in regions){
    if (h == "OB"){
      df <- df_controlled %>% filter(region == "OB")
      l <- "OB"
      if (p %in% c("mean_mitodensity", "mean_potential", "mean_ros")){
        formula <- paste0(p, "~ cort*temp + (1|clutch)")
      } else if (p == "mean_dnadamage"){
        formula <- paste0(p, "~ cort*temp + age_euthanasia + sex + (1|clutch)")
      } else {
        formula <- paste0(p, "~ cort*temp + age_euthanasia + (1|clutch)")
      }
    } else {
      df <- df_controlled %>% filter(region == "OT")
      l <- "OT"
      if (p %in% c("mean_mitodensity", "mean_potential", "mean_ros")){
        formula <- paste0(p, "~ cort*temp + (1|clutch)")
      } else if (p == "mean_dnadamage"){
        formula <- paste0(p, "~ cort*temp + sex + (1|clutch)")
      } else {
        formula <- paste0(p, "~ cort*temp + age_euthanasia + (1|clutch)")
      }
    }

    pmodel_name <- paste0("m_controlled_", p, "_", h)
    assign(pmodel_name, fit_m(df = df,
                              cat = "controlled",
                              var = p,
                              formula = formula,
                              fam = gaussian(),
                              label = l,
                              refit = FALSE),
          envir = .GlobalEnv)  # Assign to the global environment
  }
} 
```

```{r, organise_posteriors_controlled}
#| label: organise_posteriors_controlled
#
# Organising the posteriors of the previous models to fit the tables below
#
source(here("R", "func.R"))
#
# Databases for each region/stimulus
post_OB_cont <- data.frame()
post_OT_cont <- data.frame()
# Names posteriors:
region <- c("OB", "OT")
names_OB_cont <- c("m_controlled_mean_potential_OB", "m_controlled_mean_ros_OB", "m_controlled_mean_dnadamage_OB", "m_controlled_mean_peroxidation_OB")
names_OT_cont <- c("m_controlled_mean_potential_OT", "m_controlled_mean_ros_OT", "m_controlled_mean_dnadamage_OT", "m_controlled_mean_peroxidation_OT")
#
# Organising the results
for (r in region) {
  model_select <- get(paste0("names_", r, "_cont"))   
  for (pos in model_select) {
    model <- get(pos)      # Get the model from the global environment
    post_result <- tidy_post(model)        # Apply tidy_post to each model
    # Add a new column to identify the region and model
    post_result$Region <- r
    post_result$Model <- pos
    # Append to the appropriate data frame
    if (r == "OB") {
      post_OB_cont <- bind_rows(post_OB_cont, post_result)
    } else {
      post_OT_cont <- bind_rows(post_OT_cont, post_result)
    }
  }
}
```

```{r, values_posteriors_controlled}
#| label: values_posteriors_controlled
#
# Extracting the posteriors for the models and the values of interest. Here, I am creating dfs for each of the variables with the values for all the prenatal conditions to make contrasts easier to write.
#
source(here("R", "func.R"))
#
# A) Olfactory bulbs/Chemical stimulus
#
MP_OB_con <- post_values(m_controlled_mean_potential_OB, "none")
ROS_OB_con <- post_values(m_controlled_mean_ros_OB, "none")
DNA_OB_con <- post_values(m_controlled_mean_dnadamage_OB, "none")
LP_OB_con <- post_values(m_controlled_mean_peroxidation_OB, "none")
#
# B) Optic tecta/Visual stimulus
MP_OT_con <- post_values(m_controlled_mean_potential_OT, "none")
ROS_OT_con <- post_values(m_controlled_mean_ros_OT, "none")
DNA_OT_con <- post_values(m_controlled_mean_dnadamage_OT, "sex")
LP_OT_con <- post_values(m_controlled_mean_peroxidation_OT, "none")
```


Table SXX. Estimate of the contrasts between treatments for all the variables analysed, and pMCMC values testing the hypothesis that contrast is different from 0. In bold, the values that are significant at pMCMC < 0.05.
```{r tbl-contrasts_controlled}
#| label: tbl-contrasts_controlled
#| tbl-cap: "Contrasts between prenatal conditions for mitochondrial physiology and learning."
#
source(here("R", "func.R"))
#
# A) Organise df 
var <- c("MP", "ROS", "DNA", "LP")
region <- c("OB", "OT")
#
data_table_controlled <- data.frame()
for(v in var){
  for(r in region){
    x <- paste0(v, "_", r, "_con")
    df <- get(x)
    Temperature <- format_dec(mean(c(df$CORT_Hot, df$Control_Hot)) - mean(c(df$CORT_Cold, df$Control_Cold)), 3)
    pMCMC_temp <- format_p(pmcmc(c(df$CORT_Hot, df$Control_Hot) - c(df$CORT_Cold, df$Control_Cold)), 3, equal = FALSE)
    CORT <- format_dec(mean(c(df$Control_Hot, df$Control_Cold)) - mean(c(df$CORT_Hot, df$CORT_Cold)), 3)
    pMCMC_cort <- format_p(pmcmc(c(df$Control_Hot, df$Control_Cold) - c(df$CORT_Hot, df$CORT_Cold)), 3, equal = FALSE)
    Interaction <- format_dec((mean(df$Control_Hot) - mean(df$CORT_Hot)) - (mean(df$Control_Cold) - mean(df$CORT_Cold)), 3)
    pMCMC_int <- format_p(pmcmc((df$Control_Hot - df$CORT_Hot) - (df$Control_Cold - df$CORT_Cold)), 3, equal = FALSE)
    data_temp <- data.frame(Variable = x,
                          Temperature = as.numeric(Temperature),
                          pMCMC_temp = pMCMC_temp,
                          CORT = as.numeric(CORT),
                          pMCMC_cort = pMCMC_cort,
                          Interaction = as.numeric(Interaction),
                          pMCMC_int = pMCMC_int)
    data_table_controlled <- dplyr::bind_rows(data_table_controlled, data_temp)
  }
}
# Modify the df
data_table_controlled_final <- data_table_controlled %>%
  pivot_longer(cols = c(Temperature, CORT, Interaction), 
               names_to = "Predictor", 
               values_to = "Contrast") %>%
  mutate(
    # Extract the pMCMC values from the corresponding columns
    `pMCMC contrast` = case_when(
      Predictor == "Temperature" ~ pMCMC_temp,
      Predictor == "CORT" ~ pMCMC_cort,
      Predictor == "Interaction" ~ pMCMC_int
    )
  ) %>%
  separate(col = Variable, into = c("Variable", "Region", "control"), sep = "_") %>%
  mutate(
    Variable = case_when(
      Variable == "MP" ~ "Mit potential",
      Variable == "ROS" ~ "ROS",
      Variable == "DNA" ~ "DNA damage",
      Variable == "LP" ~ "Lipid peroxidation",
      Variable == "DET" ~ "Detection latency",
      TRUE ~ Variable
      )
    ) %>%
  mutate(Variable = factor(Variable, levels = c("Mit potential", "ROS", "DNA damage", "Lipid peroxidation"))) %>%
  mutate(
    Region = case_when(
      Region == "OB" ~ "Olfactory bulbs",
      Region == "OT" ~ "Optic tecta",
      TRUE ~ Region
    )
  ) %>%
  dplyr::select(Region, Variable, Predictor, Contrast, `pMCMC contrast`) %>%
  arrange(Region, Variable)
#
# C) Make the contrasts table:
#
set_flextable_defaults(
 font.family = "Times New Roman",
 font.size = 10)
#
contrast_table_controlled <- flextable(data_table_controlled_final) %>%
  align(align = "center", j = c(4,5), part = "body") %>%
  align(align = "center", j = c(1:4), part = "header") %>%
  bold(~`pMCMC contrast` < 0.05, j = c("pMCMC contrast", "Contrast", "Predictor"),
       bold = TRUE) %>%  # Bold when PMCMC is "<0.05"
  bold(~`pMCMC contrast` <0.001, j = c("pMCMC contrast", "Contrast", "Predictor")) %>%  # Bold when PMCMC is "<0.001"
  flextable::compose(i = c(2:12,14:24), j = 1, value = as_paragraph(""), part = "body") %>%
  flextable::compose(i = c(2,3,5,6,8,9,11,12,14,15,17,18,20,21,23,24),
                    j = 2, value = as_paragraph(""), part = "body") %>% # To remove some of the values in the second column
  flextable::hline(i = c(3,6,9,12,15,18,21), j = c(2:5), part = "body") %>% 
  flextable::hline(i = 12, part = "body") %>%
  autofit()
#
contrast_table_controlled
```

Contrasts were done by:  
_Temperature_: β~Hot~ - β~Cold~  
_CORT_: β~CORT~ - β~Control~    
_Interaction_: (β~Control-Hot~ - β~CORT-Hot~) - (β~Control-Cold~ - β~CORT-Cold~)  

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```


Table SXX+1. Summary of the final models for Olfactory Bulbs/Chemical stimulus.
```{r, tbl-results_OB_table_cont}
#| label: results_OB_table_cont
#| tbl-cap: "Results of the models testing for Olfactory Bulbs."
#| tbl-name: "results_OB_cont"
#| tbl-label: "results_OB_cont"
source(here("R", "func.R"))
# 
# A) Refining the df summarizing the posteriors for OB/Chemical stimulus (post_OB_cont)
variable_order <- c("Mit potential",
                     "ROS",
                     "DNA damage",
                     "Peroxidation")
predictor_order <- c("b_Intercept",
                     "b_cortCORT",
                     "b_tempHot",
                     "b_cortCORT:tempHot",
                     "b_age_euthanasia",
                     "b_sexFemale")
post_OB_cont_refined <- post_OB_cont %>%
    mutate(
      Model = case_when(
        Model == "m_controlled_mean_potential_OB" ~ "Mit potential",
        Model == "m_controlled_mean_ros_OB" ~ "ROS",
        Model == "m_controlled_mean_dnadamage_OB" ~ "DNA damage",
        Model == "m_controlled_mean_peroxidation_OB" ~ "Peroxidation",
        Model == "m_controlled_mean_potential_OT" ~ "Mit potential",
        Model == "m_controlled_mean_ros_OT" ~ "ROS",
        Model == "m_controlled_mean_dnadamage_OT" ~ "DNA damage",
        Model == "m_controlled_mean_peroxidation_OT" ~ "Peroxidation",
        TRUE ~ Model
      )
    ) %>%
    mutate(CI_95 = paste0("[", CI_lower, " , ", CI_upper, "]")) %>%
    rename(
      Variable = Model,
      Predictors = Predictor,
      'Estimate Mean' = Mean, 
      '95% CI' = CI_95, 
      PMCMC = PMCMC
    ) %>%
    dplyr::select(
      Variable,
      Predictors,
      'Estimate Mean',
      '95% CI',
      PMCMC) %>%
    mutate(Variable = factor(Variable, levels = variable_order)) %>%
    mutate(Predictors = factor(Predictors, levels = predictor_order)) %>%
    arrange(Variable, Predictors)
#
# B) Create table
## Table format
set_flextable_defaults(
 font.family = "Times New Roman",
 font.size = 10)
#
OB_table_controlled <- flextable(post_OB_cont_refined) %>%
  align(align = "center", j = c(3:5), part = "body") %>%
  align(align = "center", j = c(1:5), part = "header") %>%
  bold(~`PMCMC` < 0.05, j = c("PMCMC", "Estimate Mean", "95% CI", "Predictors"),
       bold = TRUE) %>%  # Bold when PMCMC is "<0.05"
  bold(~`PMCMC` <0.001, j = c("PMCMC", "Estimate Mean", "95% CI", "Predictors")) %>%  # Bold when PMCMC is "<0.001"
  flextable::compose(i = c(2:4,6:8,10:14,16:19), j = 1, value = as_paragraph(""), part = "body") %>% # To remove some of the values in the first column
  autofit()
#
OB_table_controlled
```



```{r, fig-results_OBcont}
#| label: fig-results_OBcont
#| fig-cap: "NEW_OB"
#
source(here("R", "func.R"))
#
# A) Plotting the results for OB/Chemical stimulus using the df from before
plot_potential_OB_con <- plotting(MP_OB_con, "Mit potential")
plot_ROS_OB_con <- plotting(ROS_OB_con, "ROS")
plot_DNA_OB_con <- plotting(DNA_OB_con, "DNA damage")
plot_LP_OB_con <- plotting(LP_OB_con, "Lipid peroxidation")
#
fig_OB_con <- plot_grid(plot_potential_OB_con, plot_ROS_OB_con,
                    plot_DNA_OB_con, plot_LP_OB_con, NULL, NULL,
                    ncol = 2, nrow = 3, rel_heights = c(1, 1, 0.2))
#
# Getting the legend (get_legend() does not work if the legend is on the top or bottom)
plot_legend_bottom_con <- plotting(MP_OB_con, "Mit potential") + theme(legend.position = "bottom", legend.title = element_blank())
gtable_con <- ggplot_gtable(ggplot_build(plot_legend_bottom_con))
legend_plot_con <- gtable_con$grobs[[which(sapply(gtable_con$grobs, function(x) x$name) == "guide-box")]]
# 
# Final composition: Merge everything, adding images and legend
plot_OB_con <- ggdraw(fig_OB_con +
  # Insert legend at the bottom-centered
  draw_grob(legend_plot_con, x = 0.45, y = 0.05, width = 0.0001, height = 0.0001))
# Print final plot
ggsave(here("./output/figures/suppl/new_models/plot_OB_con.png"), plot = plot_OB_con, width = 21, height = 14, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/new_models/plot_OB_con.png")
```


```{r, results='asis', echo=FALSE}
cat("\\newpage")
```


Table SXX+2. Summary of the final models for Optic Tecta/Visual stimulus.
```{r, tbl-results_OT_table_cont}
#| label: results_OT_table_cont
#| tbl-cap: "Results of the models testing for Olfactory Bulbs."
#| tbl-name: "results_OT_cont"
#| tbl-label: "results_OT_cont"
source(here("R", "func.R"))
# 
# A) Refining the df summarizing the posteriors for OT/Visual stimulus (post_OT_cont)
variable_order <- c("Mit potential",
                     "ROS",
                     "DNA damage",
                     "Peroxidation")
predictor_order <- c("b_Intercept",
                     "b_cortCORT",
                     "b_tempHot",
                     "b_cortCORT:tempHot",
                     "b_age_euthanasia",
                     "b_sexFemale")
post_OT_cont_refined <- post_OT_cont %>%
    mutate(
      Model = case_when(
        Model == "m_controlled_mean_potential_OB" ~ "Mit potential",
        Model == "m_controlled_mean_ros_OB" ~ "ROS",
        Model == "m_controlled_mean_dnadamage_OB" ~ "DNA damage",
        Model == "m_controlled_mean_peroxidation_OB" ~ "Peroxidation",
        Model == "m_controlled_mean_potential_OT" ~ "Mit potential",
        Model == "m_controlled_mean_ros_OT" ~ "ROS",
        Model == "m_controlled_mean_dnadamage_OT" ~ "DNA damage",
        Model == "m_controlled_mean_peroxidation_OT" ~ "Peroxidation",
        TRUE ~ Model
      )
    ) %>%
    mutate(CI_95 = paste0("[", CI_lower, " , ", CI_upper, "]")) %>%
    rename(
      Variable = Model,
      Predictors = Predictor,
      'Estimate Mean' = Mean, 
      '95% CI' = CI_95, 
      PMCMC = PMCMC
    ) %>%
    dplyr::select(
      Variable,
      Predictors,
      'Estimate Mean',
      '95% CI',
      PMCMC) %>%
    mutate(Variable = factor(Variable, levels = variable_order)) %>%
    mutate(Predictors = factor(Predictors, levels = predictor_order)) %>%
    arrange(Variable, Predictors)
#
# B) Create table
## Table format
set_flextable_defaults(
 font.family = "Times New Roman",
 font.size = 10)
#
OT_table_controlled <- flextable(post_OT_cont_refined) %>%
  align(align = "center", j = c(3:5), part = "body") %>%
  align(align = "center", j = c(1:5), part = "header") %>%
  bold(~`PMCMC` < 0.05, j = c("PMCMC", "Estimate Mean", "95% CI", "Predictors"),
       bold = TRUE) %>%  # Bold when PMCMC is "<0.05"
  bold(~`PMCMC` <0.001, j = c("PMCMC", "Estimate Mean", "95% CI", "Predictors")) %>%  # Bold when PMCMC is "<0.001"
  flextable::compose(i = c(2:4,6:8,10:13,15:18), j = 1, value = as_paragraph(""), part = "body") %>% # To remove some of the values in the first column
  autofit()
#
OT_table_controlled
```


```{r, fig-results_OTcont}
#| label: fig-results_OTcont
#| fig-cap: "NEW_OT"
#
source(here("R", "func.R"))
#
# A) Plotting the results for OT/Visual stimulus using the df from before
plot_potential_OT_con <- plotting(MP_OT_con, "Mit potential")
plot_ROS_OT_con <- plotting(ROS_OT_con, "ROS")
plot_DNA_OT_con <- plotting(DNA_OT_con, "DNA damage")
plot_LP_OT_con <- plotting(LP_OT_con, "Lipid peroxidation")
#
fig_OT_con <- plot_grid(plot_potential_OT_con, plot_ROS_OT_con,
                    plot_DNA_OT_con, plot_LP_OT_con, NULL, NULL,
                    ncol = 2, nrow = 3, rel_heights = c(1, 1, 0.2))
#
# Getting the legend (get_legend() does not work if the legend is on the top or bottom)
plot_legend_bottom_con <- plotting(MP_OT_con, "Mit potential") + theme(legend.position = "bottom", legend.title = element_blank())
gtable_con <- ggplot_gtable(ggplot_build(plot_legend_bottom_con))
legend_plot_con <- gtable_con$grobs[[which(sapply(gtable_con$grobs, function(x) x$name) == "guide-box")]]
# 
# Final composition: Merge everything, adding images and legend
plot_OT_con <- ggdraw(fig_OT_con +
  # Insert legend at the bottom-centered
  draw_grob(legend_plot_con, x = 0.45, y = 0.05, width = 0.0001, height = 0.0001))
# Print final plot
ggsave(here("./output/figures/suppl/new_models/plot_OT_con.png"), plot = plot_OT_con, width = 21, height = 14, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/new_models/plot_OT_con.png")
```




```{r, results='asis', echo=FALSE}
cat("\\newpage")
```


#### Brain validation

To ensure that neurons were not unintentionally lost during homogenization, we performed a pilot study where we euthanized four lizards and prepared the homogenates from the same brain regions as in the experiment. The homogenates were then dyed with a specific neuronal marker as described in Farrow et al. (2021) and Storks et al. (2023). We employed flow cytometry and fluorescence microscopy to check for the presence of neurons in the homogenates.     

We followed the procedures outlined above (see _Methods: Flow cytometry_) for euthanasia and homogenization. Cells were also fixed and permeabilized as described previously before staining them (see _Methods: Flow cytometry_). Following permeabilization, the samples were centrifuged at 1000 RCF for 10 minutes and the resulting pellet was resuspended in 100 µL of a 1:100 dilution of NeuN + Alexa488 fluorescent conjugate to dye the neuronal nuclei (Farrow et al. 2021; Storks et al. 2023). The samples were incubated at +4 ºC overnight. 

The following day we centrifuged the samples at 1000 RCF for 10 minutes and resuspended the pellet in 100 µL of PBS. Samples were split in two: 50 µL from each was reserved for examination under a Zeiss AxioObserver Z1 microscope, while the remaining 50 µL from each sample was pooled into a single tube for flow cytometry analysis, which allowed us to validate that our gating strategy was correct. 

```{r, neurons_size}
#| label: neurons_size
# Getting the size of the neurons from the validated data
# Olfactory Bulbs
# A) Experiment cells
cells_exp_OB <- mit_df %>% filter(region == "OB")
mean_cells_size_OB <- format_dec(mean(cells_exp_OB$mean_size), 3)
min_cells_OB <- format_dec(quantile(cells_exp_OB$mean_size, 0.025), 3)
max_cells_OB <- format_dec(quantile(cells_exp_OB$mean_size, 0.975), 3)
# B) Neurons validation
neurons_OB <- read.csv(here("./data/size_neurons_OB.csv")) %>%
  filter(X == "Olfactory Bulb_Tube_001_001.fcs")
neurons_size_OB <- log10(neurons_OB$neurons...Geometric.Mean..FSC.A.)
##
##
# Optic Tecta
# A) Experiment cells
cells_exp_OT <- mit_df %>% filter(region == "OT")
mean_cells_size_OT <- format_dec(mean(cells_exp_OT$mean_size), 3)
min_cells_OT <- format_dec(quantile(cells_exp_OT$mean_size, 0.025), 3)
max_cells_OT <- format_dec(quantile(cells_exp_OT$mean_size, 0.975), 3)
# B) Neurons validation
neurons_OT <- read.csv(here("./data/size_neurons_OT.csv")) %>%
  filter(X == "Optical Tecta_Tube_002_002.fcs")
neurons_size_OT <- log10(neurons_OT$cells.neurons...Geometric.Mean..FSC.A.)
```

Samples examined under the microscope showed a clear presence of neuronal nuclei in the homogenates (Fig. S13). Flow cytometry analysis also confirmed the presence of neuronal nuclei in the homogenates, that were within the size range of the cells employed in the experiment (mean size cells experiment in OB = `r mean_cells_size_OB`, 95% CI = [`r min_cells_OB`, `r max_cells_OB`], n = 80; size neurons in OB = `r neurons_size_OB`; mean size cells experiment in OT = `r mean_cells_size_OT`, 95% CI = [`r min_cells_OT`, `r max_cells_OT`], n = 80; size neurons in OB = `r neurons_size_OT`).

```{r, fig-S13}
#| label: fig-S13
#| fig-cap: "Fluorescence microscopy image of neuron nuclei stained with NeuN-Alexa 488. The image was excited using a 488 nm wavelength, and green fluorescence corresponds to NeuN-positive cells. In panel A, NeuN-positive cells for the homogenate of the Olfactory Bulb (OB). In panel B, NeuN-positive cells for the homogenate of the Optic Tecta (OT)."
#
#
imgOB <- image_read(here("output/figures/microscope/OB_neurons_black.jpg"))  %>%
  image_resize("600x400!")
plot_OB <- rasterGrob(imgOB, interpolate = TRUE)
#
imgOT <- image_read(here("output/figures/microscope/OT_neurons_black.jpg")) %>%
  image_resize("600x400!")
plot_OT <- rasterGrob(imgOT, interpolate = TRUE)
#
plot_neun <- plot_grid(plot_OB, plot_OT, nrow = 1)
#
fig_neun <- ggdraw(plot_neun) +
  annotate("text", x = 0.05, y = 0.92, label = "A", hjust = 1, vjust = 1, size = 4, family = "Times", color = "white") +
  annotate("text", x = 0.55, y = 0.92, label = "B", hjust = 1, vjust = 1, size = 4, family = "Times", color = "white") 
ggsave(here("./output/figures/suppl/Figure_SX13.png"), plot = fig_neun, width = 15, height = 5, units = "cm", dpi = 600, bg = "white")
knitr::include_graphics("./output/figures/suppl/Figure_SX13.png")
```

Figure S13. Fluorescence microscopy image of neuron nuclei stained with NeuN-Alexa 488. Images were taken on a Zeiss AxioObserver Z1, equipped with Zeiss Axiocam 506 monochrome camera. A Zeiss 38HE fluorescent  filter set (450-490nm Ex, 500-550nm Em.) was used  in conjunction with a 63x 1.4 NA.


**REFERENCES**

Farrow LF, Andronicos NM, McDonald PG, Hamlin AS. 2021. Quantitative determination of neuronal size and density using flow cytometry. _Journal of Neuroscience Methods_, **352**, 109081.

Storks L, Powell BJ, Leal M. 2023. Peeking inside the lizard brain: neuron numbers in Anolis and its implications for cognitive performance and vertebrate brain evolution. _Integrative and Comparative Biology_, **63(1)**, 223-237.

```{r, results='asis', echo=FALSE}
cat("\\newpage")
```



